
PC_UART_interfaceMaster.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000326a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  0000326a  000032fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000015  00800074  00800074  00003312  2**0
                  ALLOC
  3 .stab         00003594  00000000  00000000  00003314  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000016df  00000000  00000000  000068a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007f87  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000080c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00008237  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00009e80  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000ad6b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000bb18  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000bc78  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000bf05  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c6d3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 1b 0c 	jmp	0x1836	; 0x1836 <__vector_10>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 30 18 	jmp	0x3060	; 0x3060 <__vector_12>
      34:	0c 94 74 08 	jmp	0x10e8	; 0x10e8 <__vector_13>
      38:	0c 94 2b 08 	jmp	0x1056	; 0x1056 <__vector_14>
      3c:	0c 94 c2 08 	jmp	0x1184	; 0x1184 <__vector_15>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e6       	ldi	r30, 0x6A	; 106
      68:	f2 e3       	ldi	r31, 0x32	; 50
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 37       	cpi	r26, 0x74	; 116
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a4 e7       	ldi	r26, 0x74	; 116
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 38       	cpi	r26, 0x89	; 137
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 3a 18 	call	0x3074	; 0x3074 <main>
      8a:	0c 94 33 19 	jmp	0x3266	; 0x3266 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 fc 18 	jmp	0x31f8	; 0x31f8 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 18 19 	jmp	0x3230	; 0x3230 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 08 19 	jmp	0x3210	; 0x3210 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 24 19 	jmp	0x3248	; 0x3248 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 08 19 	jmp	0x3210	; 0x3210 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 24 19 	jmp	0x3248	; 0x3248 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 fc 18 	jmp	0x31f8	; 0x31f8 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 18 19 	jmp	0x3230	; 0x3230 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 08 19 	jmp	0x3210	; 0x3210 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 24 19 	jmp	0x3248	; 0x3248 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 08 19 	jmp	0x3210	; 0x3210 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 24 19 	jmp	0x3248	; 0x3248 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 08 19 	jmp	0x3210	; 0x3210 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 24 19 	jmp	0x3248	; 0x3248 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 0c 19 	jmp	0x3218	; 0x3218 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 28 19 	jmp	0x3250	; 0x3250 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <UART_init>:
*Description: Initialization of Uart Module
* Input     : poiter to uart configuration struct
* Output    : Error Status
* */
UART_Error_t UART_init(str_UartConfg_t * Uart_Config)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <UART_init+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <UART_init+0x8>
     b4e:	0f 92       	push	r0
     b50:	cd b7       	in	r28, 0x3d	; 61
     b52:	de b7       	in	r29, 0x3e	; 62
     b54:	9d 83       	std	Y+5, r25	; 0x05
     b56:	8c 83       	std	Y+4, r24	; 0x04
	UART_Error_t Local_u8_ErrorStatus = UART_ERROR_OK;  /*Check Error*/
     b58:	81 e0       	ldi	r24, 0x01	; 1
     b5a:	8b 83       	std	Y+3, r24	; 0x03
	uint16_t Local_UBRR_Value ;  /*Baud Rate Cal*/

	if(Uart_Config ->u32_BaudRate % UART_BAUD_CHECK ==0)  /*Check if Entered BaudRate is Correct*/
     b5c:	ec 81       	ldd	r30, Y+4	; 0x04
     b5e:	fd 81       	ldd	r31, Y+5	; 0x05
     b60:	80 81       	ld	r24, Z
     b62:	91 81       	ldd	r25, Z+1	; 0x01
     b64:	a2 81       	ldd	r26, Z+2	; 0x02
     b66:	b3 81       	ldd	r27, Z+3	; 0x03
     b68:	2c e2       	ldi	r18, 0x2C	; 44
     b6a:	31 e0       	ldi	r19, 0x01	; 1
     b6c:	40 e0       	ldi	r20, 0x00	; 0
     b6e:	50 e0       	ldi	r21, 0x00	; 0
     b70:	bc 01       	movw	r22, r24
     b72:	cd 01       	movw	r24, r26
     b74:	0e 94 da 18 	call	0x31b4	; 0x31b4 <__udivmodsi4>
     b78:	dc 01       	movw	r26, r24
     b7a:	cb 01       	movw	r24, r22
     b7c:	00 97       	sbiw	r24, 0x00	; 0
     b7e:	a1 05       	cpc	r26, r1
     b80:	b1 05       	cpc	r27, r1
     b82:	09 f0       	breq	.+2      	; 0xb86 <UART_init+0x40>
     b84:	4b c1       	rjmp	.+662    	; 0xe1c <UART_init+0x2d6>
	{
		if(Uart_Config ->u8_DataBits >=  UART_5_BIT_MODE && Uart_Config->u8_DataBits <= UART_9_BIT_MODE)  /*Check Entered Bit Numbers*/
     b86:	ec 81       	ldd	r30, Y+4	; 0x04
     b88:	fd 81       	ldd	r31, Y+5	; 0x05
     b8a:	84 81       	ldd	r24, Z+4	; 0x04
     b8c:	88 30       	cpi	r24, 0x08	; 8
     b8e:	08 f0       	brcs	.+2      	; 0xb92 <UART_init+0x4c>
     b90:	42 c1       	rjmp	.+644    	; 0xe16 <UART_init+0x2d0>
		{
			if(Uart_Config ->u8_DataBits == UART_5_BIT_MODE)
     b92:	ec 81       	ldd	r30, Y+4	; 0x04
     b94:	fd 81       	ldd	r31, Y+5	; 0x05
     b96:	84 81       	ldd	r24, Z+4	; 0x04
     b98:	88 23       	and	r24, r24
     b9a:	b1 f4       	brne	.+44     	; 0xbc8 <UART_init+0x82>
			{
				CLR_BIT(UCSRC,UCSRC_UCSZ0);  /*In Case 5 Bits*/
     b9c:	a0 e4       	ldi	r26, 0x40	; 64
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	e0 e4       	ldi	r30, 0x40	; 64
     ba2:	f0 e0       	ldi	r31, 0x00	; 0
     ba4:	80 81       	ld	r24, Z
     ba6:	8d 7f       	andi	r24, 0xFD	; 253
     ba8:	8c 93       	st	X, r24
				CLR_BIT(UCSRC,UCSRC_UCSZ1);
     baa:	a0 e4       	ldi	r26, 0x40	; 64
     bac:	b0 e0       	ldi	r27, 0x00	; 0
     bae:	e0 e4       	ldi	r30, 0x40	; 64
     bb0:	f0 e0       	ldi	r31, 0x00	; 0
     bb2:	80 81       	ld	r24, Z
     bb4:	8b 7f       	andi	r24, 0xFB	; 251
     bb6:	8c 93       	st	X, r24
				CLR_BIT(UCSRB,UCSRB_UCSZ2);
     bb8:	aa e2       	ldi	r26, 0x2A	; 42
     bba:	b0 e0       	ldi	r27, 0x00	; 0
     bbc:	ea e2       	ldi	r30, 0x2A	; 42
     bbe:	f0 e0       	ldi	r31, 0x00	; 0
     bc0:	80 81       	ld	r24, Z
     bc2:	8b 7f       	andi	r24, 0xFB	; 251
     bc4:	8c 93       	st	X, r24
     bc6:	66 c0       	rjmp	.+204    	; 0xc94 <UART_init+0x14e>
			}
			else if(Uart_Config ->u8_DataBits == UART_6_BIT_MODE)
     bc8:	ec 81       	ldd	r30, Y+4	; 0x04
     bca:	fd 81       	ldd	r31, Y+5	; 0x05
     bcc:	84 81       	ldd	r24, Z+4	; 0x04
     bce:	81 30       	cpi	r24, 0x01	; 1
     bd0:	b1 f4       	brne	.+44     	; 0xbfe <UART_init+0xb8>
			{
				SET_BIT(UCSRC,UCSRC_UCSZ0);   /*In Case 6 Bits*/
     bd2:	a0 e4       	ldi	r26, 0x40	; 64
     bd4:	b0 e0       	ldi	r27, 0x00	; 0
     bd6:	e0 e4       	ldi	r30, 0x40	; 64
     bd8:	f0 e0       	ldi	r31, 0x00	; 0
     bda:	80 81       	ld	r24, Z
     bdc:	82 60       	ori	r24, 0x02	; 2
     bde:	8c 93       	st	X, r24
				CLR_BIT(UCSRC,UCSRC_UCSZ1);
     be0:	a0 e4       	ldi	r26, 0x40	; 64
     be2:	b0 e0       	ldi	r27, 0x00	; 0
     be4:	e0 e4       	ldi	r30, 0x40	; 64
     be6:	f0 e0       	ldi	r31, 0x00	; 0
     be8:	80 81       	ld	r24, Z
     bea:	8b 7f       	andi	r24, 0xFB	; 251
     bec:	8c 93       	st	X, r24
				CLR_BIT(UCSRB,UCSRB_UCSZ2);
     bee:	aa e2       	ldi	r26, 0x2A	; 42
     bf0:	b0 e0       	ldi	r27, 0x00	; 0
     bf2:	ea e2       	ldi	r30, 0x2A	; 42
     bf4:	f0 e0       	ldi	r31, 0x00	; 0
     bf6:	80 81       	ld	r24, Z
     bf8:	8b 7f       	andi	r24, 0xFB	; 251
     bfa:	8c 93       	st	X, r24
     bfc:	4b c0       	rjmp	.+150    	; 0xc94 <UART_init+0x14e>
			}
			else if(Uart_Config ->u8_DataBits == UART_7_BIT_MODE)
     bfe:	ec 81       	ldd	r30, Y+4	; 0x04
     c00:	fd 81       	ldd	r31, Y+5	; 0x05
     c02:	84 81       	ldd	r24, Z+4	; 0x04
     c04:	82 30       	cpi	r24, 0x02	; 2
     c06:	b1 f4       	brne	.+44     	; 0xc34 <UART_init+0xee>
			{
				CLR_BIT(UCSRC,UCSRC_UCSZ0);   /*In Case 7 Bits*/
     c08:	a0 e4       	ldi	r26, 0x40	; 64
     c0a:	b0 e0       	ldi	r27, 0x00	; 0
     c0c:	e0 e4       	ldi	r30, 0x40	; 64
     c0e:	f0 e0       	ldi	r31, 0x00	; 0
     c10:	80 81       	ld	r24, Z
     c12:	8d 7f       	andi	r24, 0xFD	; 253
     c14:	8c 93       	st	X, r24
				SET_BIT(UCSRC,UCSRC_UCSZ1);
     c16:	a0 e4       	ldi	r26, 0x40	; 64
     c18:	b0 e0       	ldi	r27, 0x00	; 0
     c1a:	e0 e4       	ldi	r30, 0x40	; 64
     c1c:	f0 e0       	ldi	r31, 0x00	; 0
     c1e:	80 81       	ld	r24, Z
     c20:	84 60       	ori	r24, 0x04	; 4
     c22:	8c 93       	st	X, r24
				CLR_BIT(UCSRB,UCSRB_UCSZ2);
     c24:	aa e2       	ldi	r26, 0x2A	; 42
     c26:	b0 e0       	ldi	r27, 0x00	; 0
     c28:	ea e2       	ldi	r30, 0x2A	; 42
     c2a:	f0 e0       	ldi	r31, 0x00	; 0
     c2c:	80 81       	ld	r24, Z
     c2e:	8b 7f       	andi	r24, 0xFB	; 251
     c30:	8c 93       	st	X, r24
     c32:	30 c0       	rjmp	.+96     	; 0xc94 <UART_init+0x14e>
			}
			else if(Uart_Config ->u8_DataBits == UART_8_BIT_MODE)
     c34:	ec 81       	ldd	r30, Y+4	; 0x04
     c36:	fd 81       	ldd	r31, Y+5	; 0x05
     c38:	84 81       	ldd	r24, Z+4	; 0x04
     c3a:	83 30       	cpi	r24, 0x03	; 3
     c3c:	b1 f4       	brne	.+44     	; 0xc6a <UART_init+0x124>
			{
				SET_BIT(UCSRC,UCSRC_UCSZ0);     /*In Case 8 Bits*/
     c3e:	a0 e4       	ldi	r26, 0x40	; 64
     c40:	b0 e0       	ldi	r27, 0x00	; 0
     c42:	e0 e4       	ldi	r30, 0x40	; 64
     c44:	f0 e0       	ldi	r31, 0x00	; 0
     c46:	80 81       	ld	r24, Z
     c48:	82 60       	ori	r24, 0x02	; 2
     c4a:	8c 93       	st	X, r24
				SET_BIT(UCSRC,UCSRC_UCSZ1);
     c4c:	a0 e4       	ldi	r26, 0x40	; 64
     c4e:	b0 e0       	ldi	r27, 0x00	; 0
     c50:	e0 e4       	ldi	r30, 0x40	; 64
     c52:	f0 e0       	ldi	r31, 0x00	; 0
     c54:	80 81       	ld	r24, Z
     c56:	84 60       	ori	r24, 0x04	; 4
     c58:	8c 93       	st	X, r24
				CLR_BIT(UCSRB,UCSRB_UCSZ2);
     c5a:	aa e2       	ldi	r26, 0x2A	; 42
     c5c:	b0 e0       	ldi	r27, 0x00	; 0
     c5e:	ea e2       	ldi	r30, 0x2A	; 42
     c60:	f0 e0       	ldi	r31, 0x00	; 0
     c62:	80 81       	ld	r24, Z
     c64:	8b 7f       	andi	r24, 0xFB	; 251
     c66:	8c 93       	st	X, r24
     c68:	15 c0       	rjmp	.+42     	; 0xc94 <UART_init+0x14e>
			}
			else
			{
				SET_BIT(UCSRC,UCSRC_UCSZ0);    /*In Case 9 Bits*/
     c6a:	a0 e4       	ldi	r26, 0x40	; 64
     c6c:	b0 e0       	ldi	r27, 0x00	; 0
     c6e:	e0 e4       	ldi	r30, 0x40	; 64
     c70:	f0 e0       	ldi	r31, 0x00	; 0
     c72:	80 81       	ld	r24, Z
     c74:	82 60       	ori	r24, 0x02	; 2
     c76:	8c 93       	st	X, r24
				SET_BIT(UCSRC,UCSRC_UCSZ1);
     c78:	a0 e4       	ldi	r26, 0x40	; 64
     c7a:	b0 e0       	ldi	r27, 0x00	; 0
     c7c:	e0 e4       	ldi	r30, 0x40	; 64
     c7e:	f0 e0       	ldi	r31, 0x00	; 0
     c80:	80 81       	ld	r24, Z
     c82:	84 60       	ori	r24, 0x04	; 4
     c84:	8c 93       	st	X, r24
				SET_BIT(UCSRB,UCSRB_UCSZ2);
     c86:	aa e2       	ldi	r26, 0x2A	; 42
     c88:	b0 e0       	ldi	r27, 0x00	; 0
     c8a:	ea e2       	ldi	r30, 0x2A	; 42
     c8c:	f0 e0       	ldi	r31, 0x00	; 0
     c8e:	80 81       	ld	r24, Z
     c90:	84 60       	ori	r24, 0x04	; 4
     c92:	8c 93       	st	X, r24
			}

			if(Uart_Config ->u8_FlagAction == UART_POLLING || Uart_Config -> u8_FlagAction == UART_INTERRUPT)
     c94:	ec 81       	ldd	r30, Y+4	; 0x04
     c96:	fd 81       	ldd	r31, Y+5	; 0x05
     c98:	85 81       	ldd	r24, Z+5	; 0x05
     c9a:	88 23       	and	r24, r24
     c9c:	31 f0       	breq	.+12     	; 0xcaa <UART_init+0x164>
     c9e:	ec 81       	ldd	r30, Y+4	; 0x04
     ca0:	fd 81       	ldd	r31, Y+5	; 0x05
     ca2:	85 81       	ldd	r24, Z+5	; 0x05
     ca4:	81 30       	cpi	r24, 0x01	; 1
     ca6:	09 f0       	breq	.+2      	; 0xcaa <UART_init+0x164>
     ca8:	b3 c0       	rjmp	.+358    	; 0xe10 <UART_init+0x2ca>
			{
				Local_u8_ErrorStatus =  UART_CheckSync();   /*Check if it is Sync or Async*/
     caa:	0e 94 19 07 	call	0xe32	; 0xe32 <UART_CheckSync>
     cae:	8b 83       	std	Y+3, r24	; 0x03

				G_UartMode = Uart_Config ->u8_FlagAction;
     cb0:	ec 81       	ldd	r30, Y+4	; 0x04
     cb2:	fd 81       	ldd	r31, Y+5	; 0x05
     cb4:	85 81       	ldd	r24, Z+5	; 0x05
     cb6:	80 93 74 00 	sts	0x0074, r24
				if(UART_ERROR_OK==Local_u8_ErrorStatus)
     cba:	8b 81       	ldd	r24, Y+3	; 0x03
     cbc:	81 30       	cpi	r24, 0x01	; 1
     cbe:	09 f0       	breq	.+2      	; 0xcc2 <UART_init+0x17c>
     cc0:	af c0       	rjmp	.+350    	; 0xe20 <UART_init+0x2da>
				{
					Local_u8_ErrorStatus = UART_CheckParity();  /*Check Parity Type */
     cc2:	0e 94 2c 07 	call	0xe58	; 0xe58 <UART_CheckParity>
     cc6:	8b 83       	std	Y+3, r24	; 0x03
					if(UART_ERROR_OK==Local_u8_ErrorStatus)
     cc8:	8b 81       	ldd	r24, Y+3	; 0x03
     cca:	81 30       	cpi	r24, 0x01	; 1
     ccc:	09 f0       	breq	.+2      	; 0xcd0 <UART_init+0x18a>
     cce:	a8 c0       	rjmp	.+336    	; 0xe20 <UART_init+0x2da>
					{
						Local_u8_ErrorStatus = UART_CheckStopBit();
     cd0:	0e 94 46 07 	call	0xe8c	; 0xe8c <UART_CheckStopBit>
     cd4:	8b 83       	std	Y+3, r24	; 0x03

						if(UART_ERROR_OK == Local_u8_ErrorStatus)
     cd6:	8b 81       	ldd	r24, Y+3	; 0x03
     cd8:	81 30       	cpi	r24, 0x01	; 1
     cda:	09 f0       	breq	.+2      	; 0xcde <UART_init+0x198>
     cdc:	a1 c0       	rjmp	.+322    	; 0xe20 <UART_init+0x2da>
						{
							if(Uart_Config->u8_FlagAction == UART_INTERRUPT)  /*Check INTERRUPT or polling */
     cde:	ec 81       	ldd	r30, Y+4	; 0x04
     ce0:	fd 81       	ldd	r31, Y+5	; 0x05
     ce2:	85 81       	ldd	r24, Z+5	; 0x05
     ce4:	81 30       	cpi	r24, 0x01	; 1
     ce6:	09 f0       	breq	.+2      	; 0xcea <UART_init+0x1a4>
     ce8:	4d c0       	rjmp	.+154    	; 0xd84 <UART_init+0x23e>
							{
								SET_BIT(UCSRC,UCSRC_URSEL);
     cea:	a0 e4       	ldi	r26, 0x40	; 64
     cec:	b0 e0       	ldi	r27, 0x00	; 0
     cee:	e0 e4       	ldi	r30, 0x40	; 64
     cf0:	f0 e0       	ldi	r31, 0x00	; 0
     cf2:	80 81       	ld	r24, Z
     cf4:	80 68       	ori	r24, 0x80	; 128
     cf6:	8c 93       	st	X, r24
								Local_UBRR_Value = (uint16_t) ((UART_FCPU/(UART_UBRR_CALCULATE_CONST * (Uart_Config ->u32_BaudRate))) - 1U);
     cf8:	ec 81       	ldd	r30, Y+4	; 0x04
     cfa:	fd 81       	ldd	r31, Y+5	; 0x05
     cfc:	80 81       	ld	r24, Z
     cfe:	91 81       	ldd	r25, Z+1	; 0x01
     d00:	a2 81       	ldd	r26, Z+2	; 0x02
     d02:	b3 81       	ldd	r27, Z+3	; 0x03
     d04:	88 0f       	add	r24, r24
     d06:	99 1f       	adc	r25, r25
     d08:	aa 1f       	adc	r26, r26
     d0a:	bb 1f       	adc	r27, r27
     d0c:	88 0f       	add	r24, r24
     d0e:	99 1f       	adc	r25, r25
     d10:	aa 1f       	adc	r26, r26
     d12:	bb 1f       	adc	r27, r27
     d14:	88 0f       	add	r24, r24
     d16:	99 1f       	adc	r25, r25
     d18:	aa 1f       	adc	r26, r26
     d1a:	bb 1f       	adc	r27, r27
     d1c:	88 0f       	add	r24, r24
     d1e:	99 1f       	adc	r25, r25
     d20:	aa 1f       	adc	r26, r26
     d22:	bb 1f       	adc	r27, r27
     d24:	9c 01       	movw	r18, r24
     d26:	ad 01       	movw	r20, r26
     d28:	80 e0       	ldi	r24, 0x00	; 0
     d2a:	92 e1       	ldi	r25, 0x12	; 18
     d2c:	aa e7       	ldi	r26, 0x7A	; 122
     d2e:	b0 e0       	ldi	r27, 0x00	; 0
     d30:	bc 01       	movw	r22, r24
     d32:	cd 01       	movw	r24, r26
     d34:	0e 94 da 18 	call	0x31b4	; 0x31b4 <__udivmodsi4>
     d38:	da 01       	movw	r26, r20
     d3a:	c9 01       	movw	r24, r18
     d3c:	01 97       	sbiw	r24, 0x01	; 1
     d3e:	9a 83       	std	Y+2, r25	; 0x02
     d40:	89 83       	std	Y+1, r24	; 0x01
								SET_BIT(UCSRB,UCSRB_TXEN);  /*Enable Transmit*/
     d42:	aa e2       	ldi	r26, 0x2A	; 42
     d44:	b0 e0       	ldi	r27, 0x00	; 0
     d46:	ea e2       	ldi	r30, 0x2A	; 42
     d48:	f0 e0       	ldi	r31, 0x00	; 0
     d4a:	80 81       	ld	r24, Z
     d4c:	88 60       	ori	r24, 0x08	; 8
     d4e:	8c 93       	st	X, r24
								SET_BIT(UCSRB,UCSRB_RXEN);  /*Enable Receive */
     d50:	aa e2       	ldi	r26, 0x2A	; 42
     d52:	b0 e0       	ldi	r27, 0x00	; 0
     d54:	ea e2       	ldi	r30, 0x2A	; 42
     d56:	f0 e0       	ldi	r31, 0x00	; 0
     d58:	80 81       	ld	r24, Z
     d5a:	80 61       	ori	r24, 0x10	; 16
     d5c:	8c 93       	st	X, r24

								UBBRRH = (uint8_t) (Local_UBRR_Value >> SHIFT_8_BITS);  /*But UBBRRH for Suitable Baud Rate*/
     d5e:	e0 e4       	ldi	r30, 0x40	; 64
     d60:	f0 e0       	ldi	r31, 0x00	; 0
     d62:	89 81       	ldd	r24, Y+1	; 0x01
     d64:	9a 81       	ldd	r25, Y+2	; 0x02
     d66:	89 2f       	mov	r24, r25
     d68:	99 27       	eor	r25, r25
     d6a:	80 83       	st	Z, r24

								UBBRRL = (uint8_t)  Local_UBRR_Value;
     d6c:	e9 e2       	ldi	r30, 0x29	; 41
     d6e:	f0 e0       	ldi	r31, 0x00	; 0
     d70:	89 81       	ldd	r24, Y+1	; 0x01
     d72:	80 83       	st	Z, r24
								SET_BIT(SREG,7);   /*Enable Global INTERRUPT */
     d74:	af e5       	ldi	r26, 0x5F	; 95
     d76:	b0 e0       	ldi	r27, 0x00	; 0
     d78:	ef e5       	ldi	r30, 0x5F	; 95
     d7a:	f0 e0       	ldi	r31, 0x00	; 0
     d7c:	80 81       	ld	r24, Z
     d7e:	80 68       	ori	r24, 0x80	; 128
     d80:	8c 93       	st	X, r24
     d82:	4e c0       	rjmp	.+156    	; 0xe20 <UART_init+0x2da>

							}
							else
							{
								/*Polling*/
								SET_BIT(UCSRC,UCSRC_URSEL);
     d84:	a0 e4       	ldi	r26, 0x40	; 64
     d86:	b0 e0       	ldi	r27, 0x00	; 0
     d88:	e0 e4       	ldi	r30, 0x40	; 64
     d8a:	f0 e0       	ldi	r31, 0x00	; 0
     d8c:	80 81       	ld	r24, Z
     d8e:	80 68       	ori	r24, 0x80	; 128
     d90:	8c 93       	st	X, r24
								Local_UBRR_Value = (uint16_t) ((UART_FCPU/(UART_UBRR_CALCULATE_CONST * (Uart_Config ->u32_BaudRate))) - 1U);
     d92:	ec 81       	ldd	r30, Y+4	; 0x04
     d94:	fd 81       	ldd	r31, Y+5	; 0x05
     d96:	80 81       	ld	r24, Z
     d98:	91 81       	ldd	r25, Z+1	; 0x01
     d9a:	a2 81       	ldd	r26, Z+2	; 0x02
     d9c:	b3 81       	ldd	r27, Z+3	; 0x03
     d9e:	88 0f       	add	r24, r24
     da0:	99 1f       	adc	r25, r25
     da2:	aa 1f       	adc	r26, r26
     da4:	bb 1f       	adc	r27, r27
     da6:	88 0f       	add	r24, r24
     da8:	99 1f       	adc	r25, r25
     daa:	aa 1f       	adc	r26, r26
     dac:	bb 1f       	adc	r27, r27
     dae:	88 0f       	add	r24, r24
     db0:	99 1f       	adc	r25, r25
     db2:	aa 1f       	adc	r26, r26
     db4:	bb 1f       	adc	r27, r27
     db6:	88 0f       	add	r24, r24
     db8:	99 1f       	adc	r25, r25
     dba:	aa 1f       	adc	r26, r26
     dbc:	bb 1f       	adc	r27, r27
     dbe:	9c 01       	movw	r18, r24
     dc0:	ad 01       	movw	r20, r26
     dc2:	80 e0       	ldi	r24, 0x00	; 0
     dc4:	92 e1       	ldi	r25, 0x12	; 18
     dc6:	aa e7       	ldi	r26, 0x7A	; 122
     dc8:	b0 e0       	ldi	r27, 0x00	; 0
     dca:	bc 01       	movw	r22, r24
     dcc:	cd 01       	movw	r24, r26
     dce:	0e 94 da 18 	call	0x31b4	; 0x31b4 <__udivmodsi4>
     dd2:	da 01       	movw	r26, r20
     dd4:	c9 01       	movw	r24, r18
     dd6:	01 97       	sbiw	r24, 0x01	; 1
     dd8:	9a 83       	std	Y+2, r25	; 0x02
     dda:	89 83       	std	Y+1, r24	; 0x01
								SET_BIT(UCSRB,UCSRB_TXEN); /*Enable Transmit*/
     ddc:	aa e2       	ldi	r26, 0x2A	; 42
     dde:	b0 e0       	ldi	r27, 0x00	; 0
     de0:	ea e2       	ldi	r30, 0x2A	; 42
     de2:	f0 e0       	ldi	r31, 0x00	; 0
     de4:	80 81       	ld	r24, Z
     de6:	88 60       	ori	r24, 0x08	; 8
     de8:	8c 93       	st	X, r24
								SET_BIT(UCSRB,UCSRB_RXEN); /*Enable Receive */
     dea:	aa e2       	ldi	r26, 0x2A	; 42
     dec:	b0 e0       	ldi	r27, 0x00	; 0
     dee:	ea e2       	ldi	r30, 0x2A	; 42
     df0:	f0 e0       	ldi	r31, 0x00	; 0
     df2:	80 81       	ld	r24, Z
     df4:	80 61       	ori	r24, 0x10	; 16
     df6:	8c 93       	st	X, r24

								UBBRRH = (uint8_t) (Local_UBRR_Value >> SHIFT_8_BITS);
     df8:	e0 e4       	ldi	r30, 0x40	; 64
     dfa:	f0 e0       	ldi	r31, 0x00	; 0
     dfc:	89 81       	ldd	r24, Y+1	; 0x01
     dfe:	9a 81       	ldd	r25, Y+2	; 0x02
     e00:	89 2f       	mov	r24, r25
     e02:	99 27       	eor	r25, r25
     e04:	80 83       	st	Z, r24

								UBBRRL = (uint8_t)  Local_UBRR_Value;
     e06:	e9 e2       	ldi	r30, 0x29	; 41
     e08:	f0 e0       	ldi	r31, 0x00	; 0
     e0a:	89 81       	ldd	r24, Y+1	; 0x01
     e0c:	80 83       	st	Z, r24
     e0e:	08 c0       	rjmp	.+16     	; 0xe20 <UART_init+0x2da>
					/*Do Nothing*/
				}
			}
			else
			{
				Local_u8_ErrorStatus = UART_FLAG_ACTION;  /*If Not Interrupt or Polling */
     e10:	84 e0       	ldi	r24, 0x04	; 4
     e12:	8b 83       	std	Y+3, r24	; 0x03
     e14:	05 c0       	rjmp	.+10     	; 0xe20 <UART_init+0x2da>
			}
		}
		else
		{
			Local_u8_ErrorStatus = UART_ERROR_DATA_NUMBER;  /*If wrong Number of bits entered */
     e16:	83 e0       	ldi	r24, 0x03	; 3
     e18:	8b 83       	std	Y+3, r24	; 0x03
     e1a:	02 c0       	rjmp	.+4      	; 0xe20 <UART_init+0x2da>
		}
	}
	else
	{
		Local_u8_ErrorStatus = UART_ERROR_BAUD_RATE;   /*If wrong Baud Rate is entered */
     e1c:	82 e0       	ldi	r24, 0x02	; 2
     e1e:	8b 83       	std	Y+3, r24	; 0x03
	}
	return Local_u8_ErrorStatus;
     e20:	8b 81       	ldd	r24, Y+3	; 0x03
}
     e22:	0f 90       	pop	r0
     e24:	0f 90       	pop	r0
     e26:	0f 90       	pop	r0
     e28:	0f 90       	pop	r0
     e2a:	0f 90       	pop	r0
     e2c:	cf 91       	pop	r28
     e2e:	df 91       	pop	r29
     e30:	08 95       	ret

00000e32 <UART_CheckSync>:

static UART_Error_t UART_CheckSync(void)
{
     e32:	df 93       	push	r29
     e34:	cf 93       	push	r28
     e36:	0f 92       	push	r0
     e38:	cd b7       	in	r28, 0x3d	; 61
     e3a:	de b7       	in	r29, 0x3e	; 62
	UART_Error_t Local_u8_ErrorStatus = UART_ERROR_OK;    /*Check Configuration File if entered State is Sync or Async or other */
     e3c:	81 e0       	ldi	r24, 0x01	; 1
     e3e:	89 83       	std	Y+1, r24	; 0x01
	#if(UART_ASYNCHRONOUS == ENABLE)
		CLR_BIT(UCSRC,UCSRC_UMSEL);
     e40:	a0 e4       	ldi	r26, 0x40	; 64
     e42:	b0 e0       	ldi	r27, 0x00	; 0
     e44:	e0 e4       	ldi	r30, 0x40	; 64
     e46:	f0 e0       	ldi	r31, 0x00	; 0
     e48:	80 81       	ld	r24, Z
     e4a:	8f 7b       	andi	r24, 0xBF	; 191
     e4c:	8c 93       	st	X, r24
		SET_BIT(UCSRC,UCSRC_UMSEL);
	#else
		Local_u8_ErrorStatus = UART_ERROR_SYNCHRONIZATION;
	#endif

	return Local_u8_ErrorStatus;
     e4e:	89 81       	ldd	r24, Y+1	; 0x01
}
     e50:	0f 90       	pop	r0
     e52:	cf 91       	pop	r28
     e54:	df 91       	pop	r29
     e56:	08 95       	ret

00000e58 <UART_CheckParity>:

static UART_Error_t UART_CheckParity(void)
{
     e58:	df 93       	push	r29
     e5a:	cf 93       	push	r28
     e5c:	0f 92       	push	r0
     e5e:	cd b7       	in	r28, 0x3d	; 61
     e60:	de b7       	in	r29, 0x3e	; 62
	UART_Error_t Local_u8_ErrorStatus = UART_ERROR_OK;   /*Check Configuration File if parity is even or odd or other*/
     e62:	81 e0       	ldi	r24, 0x01	; 1
     e64:	89 83       	std	Y+1, r24	; 0x01
		CLR_BIT(UCSRC,UCSRC_UPM0);
	#elif(UART_PARITY_CHOICE == UART_PARITY_ODD)
		SET_BIT(UCSRC,UCSRC_UPM1);
		CLR_BIT(UCSRC,UCSRC_UPM0);
	#elif(UART_PARITY_CHOICE == UART_NO_PARITY)
		CLR_BIT(UCSRC,UCSRC_UPM1);
     e66:	a0 e4       	ldi	r26, 0x40	; 64
     e68:	b0 e0       	ldi	r27, 0x00	; 0
     e6a:	e0 e4       	ldi	r30, 0x40	; 64
     e6c:	f0 e0       	ldi	r31, 0x00	; 0
     e6e:	80 81       	ld	r24, Z
     e70:	8f 7d       	andi	r24, 0xDF	; 223
     e72:	8c 93       	st	X, r24
		CLR_BIT(UCSRC,UCSRC_UPM0);
     e74:	a0 e4       	ldi	r26, 0x40	; 64
     e76:	b0 e0       	ldi	r27, 0x00	; 0
     e78:	e0 e4       	ldi	r30, 0x40	; 64
     e7a:	f0 e0       	ldi	r31, 0x00	; 0
     e7c:	80 81       	ld	r24, Z
     e7e:	8f 7e       	andi	r24, 0xEF	; 239
     e80:	8c 93       	st	X, r24
	#else
		Local_u8_ErrorStatus = UART_ERROR_PARITY;
	#endif
		return Local_u8_ErrorStatus;
     e82:	89 81       	ldd	r24, Y+1	; 0x01
}
     e84:	0f 90       	pop	r0
     e86:	cf 91       	pop	r28
     e88:	df 91       	pop	r29
     e8a:	08 95       	ret

00000e8c <UART_CheckStopBit>:

static UART_Error_t UART_CheckStopBit(void)  /*Check Configuration File if stop bit is one  or two or other*/
{
     e8c:	df 93       	push	r29
     e8e:	cf 93       	push	r28
     e90:	0f 92       	push	r0
     e92:	cd b7       	in	r28, 0x3d	; 61
     e94:	de b7       	in	r29, 0x3e	; 62
	UART_Error_t Local_u8_ErrorStatus = UART_ERROR_OK;
     e96:	81 e0       	ldi	r24, 0x01	; 1
     e98:	89 83       	std	Y+1, r24	; 0x01
	#if(STOP_BITS == UART_ONE_STOP_BIT)
		CLR_BIT(UCSRC,UCSRC_USBS);
     e9a:	a0 e4       	ldi	r26, 0x40	; 64
     e9c:	b0 e0       	ldi	r27, 0x00	; 0
     e9e:	e0 e4       	ldi	r30, 0x40	; 64
     ea0:	f0 e0       	ldi	r31, 0x00	; 0
     ea2:	80 81       	ld	r24, Z
     ea4:	87 7f       	andi	r24, 0xF7	; 247
     ea6:	8c 93       	st	X, r24
	#elif(STOP_BITS == UART_TWO_STOP_BITS)
		SET_BIT(UCSRC,UCSRC_USBS);
	#else
		Local_u8_ErrorStatus = UART_ERROR_STOPBIT;
	#endif
		return Local_u8_ErrorStatus;
     ea8:	89 81       	ldd	r24, Y+1	; 0x01
}
     eaa:	0f 90       	pop	r0
     eac:	cf 91       	pop	r28
     eae:	df 91       	pop	r29
     eb0:	08 95       	ret

00000eb2 <UART_sendByte>:
*Description: Sending byte of data
* Input     : u16Data to send
* Output    : Error Status
* */
UART_Error_t UART_sendByte(const uint8_t u8_Data)
{
     eb2:	df 93       	push	r29
     eb4:	cf 93       	push	r28
     eb6:	00 d0       	rcall	.+0      	; 0xeb8 <UART_sendByte+0x6>
     eb8:	0f 92       	push	r0
     eba:	cd b7       	in	r28, 0x3d	; 61
     ebc:	de b7       	in	r29, 0x3e	; 62
     ebe:	8b 83       	std	Y+3, r24	; 0x03
	UART_Error_t Local_u8_ErrorStatus = UART_ERROR_OK;
     ec0:	81 e0       	ldi	r24, 0x01	; 1
     ec2:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t Local_u8_ValueUDRE;

	if(G_UartMode == UART_POLLING)   /*In Case of Polling*/
     ec4:	80 91 74 00 	lds	r24, 0x0074
     ec8:	88 23       	and	r24, r24
     eca:	81 f4       	brne	.+32     	; 0xeec <UART_sendByte+0x3a>
	{

		Local_u8_ValueUDRE = GET_BIT(UCSRA,UCSRA_UDRE) ;
     ecc:	eb e2       	ldi	r30, 0x2B	; 43
     ece:	f0 e0       	ldi	r31, 0x00	; 0
     ed0:	80 81       	ld	r24, Z
     ed2:	82 95       	swap	r24
     ed4:	86 95       	lsr	r24
     ed6:	87 70       	andi	r24, 0x07	; 7
     ed8:	81 70       	andi	r24, 0x01	; 1
     eda:	89 83       	std	Y+1, r24	; 0x01

		if(Local_u8_ValueUDRE == 1)
     edc:	89 81       	ldd	r24, Y+1	; 0x01
     ede:	81 30       	cpi	r24, 0x01	; 1
     ee0:	f9 f4       	brne	.+62     	; 0xf20 <UART_sendByte+0x6e>
		{
			UDR = u8_Data;
     ee2:	ec e2       	ldi	r30, 0x2C	; 44
     ee4:	f0 e0       	ldi	r31, 0x00	; 0
     ee6:	8b 81       	ldd	r24, Y+3	; 0x03
     ee8:	80 83       	st	Z, r24
     eea:	1a c0       	rjmp	.+52     	; 0xf20 <UART_sendByte+0x6e>
		}
	}
	else
	{
		if(G_sendData == 0)
     eec:	80 91 75 00 	lds	r24, 0x0075
     ef0:	88 23       	and	r24, r24
     ef2:	b1 f4       	brne	.+44     	; 0xf20 <UART_sendByte+0x6e>
		{

			if((GET_BIT(UCSRA,UCSRA_DOR)) == 0)  /*check Detect over Run */
     ef4:	eb e2       	ldi	r30, 0x2B	; 43
     ef6:	f0 e0       	ldi	r31, 0x00	; 0
     ef8:	80 81       	ld	r24, Z
     efa:	86 95       	lsr	r24
     efc:	86 95       	lsr	r24
     efe:	86 95       	lsr	r24
     f00:	88 2f       	mov	r24, r24
     f02:	90 e0       	ldi	r25, 0x00	; 0
     f04:	81 70       	andi	r24, 0x01	; 1
     f06:	90 70       	andi	r25, 0x00	; 0
     f08:	00 97       	sbiw	r24, 0x00	; 0
     f0a:	51 f4       	brne	.+20     	; 0xf20 <UART_sendByte+0x6e>
			{
				G_sendData = u8_Data;
     f0c:	8b 81       	ldd	r24, Y+3	; 0x03
     f0e:	80 93 75 00 	sts	0x0075, r24

				SET_BIT(UCSRB,UCSRB_UDRIE);
     f12:	aa e2       	ldi	r26, 0x2A	; 42
     f14:	b0 e0       	ldi	r27, 0x00	; 0
     f16:	ea e2       	ldi	r30, 0x2A	; 42
     f18:	f0 e0       	ldi	r31, 0x00	; 0
     f1a:	80 81       	ld	r24, Z
     f1c:	80 62       	ori	r24, 0x20	; 32
     f1e:	8c 93       	st	X, r24
		{
			/*Nothing*/
		}
	}

		return Local_u8_ErrorStatus;
     f20:	8a 81       	ldd	r24, Y+2	; 0x02
}
     f22:	0f 90       	pop	r0
     f24:	0f 90       	pop	r0
     f26:	0f 90       	pop	r0
     f28:	cf 91       	pop	r28
     f2a:	df 91       	pop	r29
     f2c:	08 95       	ret

00000f2e <UART_recieveByte>:
*Description: Receiving byte of data
* Input     : pointer to u16Data
* Output    : Error Status
* */
UART_Error_t UART_recieveByte(uint8_t *u8_Data)
{
     f2e:	df 93       	push	r29
     f30:	cf 93       	push	r28
     f32:	00 d0       	rcall	.+0      	; 0xf34 <UART_recieveByte+0x6>
     f34:	0f 92       	push	r0
     f36:	cd b7       	in	r28, 0x3d	; 61
     f38:	de b7       	in	r29, 0x3e	; 62
     f3a:	9b 83       	std	Y+3, r25	; 0x03
     f3c:	8a 83       	std	Y+2, r24	; 0x02
	UART_Error_t Local_u8_ErrorStatus = UART_ERROR_OK;
     f3e:	81 e0       	ldi	r24, 0x01	; 1
     f40:	89 83       	std	Y+1, r24	; 0x01

	if(G_UartMode == UART_POLLING)
     f42:	80 91 74 00 	lds	r24, 0x0074
     f46:	88 23       	and	r24, r24
     f48:	79 f4       	brne	.+30     	; 0xf68 <UART_recieveByte+0x3a>
	{
		if((GET_BIT(UCSRA,7)) ==1)  /*In Case Of polling*/
     f4a:	eb e2       	ldi	r30, 0x2B	; 43
     f4c:	f0 e0       	ldi	r31, 0x00	; 0
     f4e:	80 81       	ld	r24, Z
     f50:	88 1f       	adc	r24, r24
     f52:	88 27       	eor	r24, r24
     f54:	88 1f       	adc	r24, r24
     f56:	81 30       	cpi	r24, 0x01	; 1
     f58:	a1 f4       	brne	.+40     	; 0xf82 <UART_recieveByte+0x54>
		{
			*u8_Data=UDR;
     f5a:	ec e2       	ldi	r30, 0x2C	; 44
     f5c:	f0 e0       	ldi	r31, 0x00	; 0
     f5e:	80 81       	ld	r24, Z
     f60:	ea 81       	ldd	r30, Y+2	; 0x02
     f62:	fb 81       	ldd	r31, Y+3	; 0x03
     f64:	80 83       	st	Z, r24
     f66:	0d c0       	rjmp	.+26     	; 0xf82 <UART_recieveByte+0x54>
		}
	}
	else
	{
		 G_RecData = u8_Data;
     f68:	8a 81       	ldd	r24, Y+2	; 0x02
     f6a:	9b 81       	ldd	r25, Y+3	; 0x03
     f6c:	90 93 88 00 	sts	0x0088, r25
     f70:	80 93 87 00 	sts	0x0087, r24
		SET_BIT(UCSRB,UCSRB_RXCIE); /*Enable Interrupt*/
     f74:	aa e2       	ldi	r26, 0x2A	; 42
     f76:	b0 e0       	ldi	r27, 0x00	; 0
     f78:	ea e2       	ldi	r30, 0x2A	; 42
     f7a:	f0 e0       	ldi	r31, 0x00	; 0
     f7c:	80 81       	ld	r24, Z
     f7e:	80 68       	ori	r24, 0x80	; 128
     f80:	8c 93       	st	X, r24

	}

	return Local_u8_ErrorStatus;
     f82:	89 81       	ldd	r24, Y+1	; 0x01

}
     f84:	0f 90       	pop	r0
     f86:	0f 90       	pop	r0
     f88:	0f 90       	pop	r0
     f8a:	cf 91       	pop	r28
     f8c:	df 91       	pop	r29
     f8e:	08 95       	ret

00000f90 <UART_GetPollingFlag>:
*Description: Receiving Flag used in Case of Polling
* Input     : pointer to u8Data
* Output    : No Return
* */
void UART_GetPollingFlag(uint8_t *u8_Data)
{
     f90:	df 93       	push	r29
     f92:	cf 93       	push	r28
     f94:	00 d0       	rcall	.+0      	; 0xf96 <UART_GetPollingFlag+0x6>
     f96:	0f 92       	push	r0
     f98:	cd b7       	in	r28, 0x3d	; 61
     f9a:	de b7       	in	r29, 0x3e	; 62
     f9c:	9b 83       	std	Y+3, r25	; 0x03
     f9e:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t Local_u8_ValueTX;

	Local_u8_ValueTX = GET_BIT(UCSRA,UCSRA_TXC); /*Get Value of Transmit Flag*/
     fa0:	eb e2       	ldi	r30, 0x2B	; 43
     fa2:	f0 e0       	ldi	r31, 0x00	; 0
     fa4:	80 81       	ld	r24, Z
     fa6:	82 95       	swap	r24
     fa8:	86 95       	lsr	r24
     faa:	86 95       	lsr	r24
     fac:	83 70       	andi	r24, 0x03	; 3
     fae:	81 70       	andi	r24, 0x01	; 1
     fb0:	89 83       	std	Y+1, r24	; 0x01
	if(Local_u8_ValueTX == 1)
     fb2:	89 81       	ldd	r24, Y+1	; 0x01
     fb4:	81 30       	cpi	r24, 0x01	; 1
     fb6:	61 f4       	brne	.+24     	; 0xfd0 <UART_GetPollingFlag+0x40>
	{
		SET_BIT(UCSRA,6);
     fb8:	ab e2       	ldi	r26, 0x2B	; 43
     fba:	b0 e0       	ldi	r27, 0x00	; 0
     fbc:	eb e2       	ldi	r30, 0x2B	; 43
     fbe:	f0 e0       	ldi	r31, 0x00	; 0
     fc0:	80 81       	ld	r24, Z
     fc2:	80 64       	ori	r24, 0x40	; 64
     fc4:	8c 93       	st	X, r24
		*u8_Data = 1;  /*Add One to return */
     fc6:	ea 81       	ldd	r30, Y+2	; 0x02
     fc8:	fb 81       	ldd	r31, Y+3	; 0x03
     fca:	81 e0       	ldi	r24, 0x01	; 1
     fcc:	80 83       	st	Z, r24
     fce:	03 c0       	rjmp	.+6      	; 0xfd6 <UART_GetPollingFlag+0x46>
	}
	else
	{
		*u8_Data  = 0;  /*Add Zero To Return */
     fd0:	ea 81       	ldd	r30, Y+2	; 0x02
     fd2:	fb 81       	ldd	r31, Y+3	; 0x03
     fd4:	10 82       	st	Z, r1
	}
}
     fd6:	0f 90       	pop	r0
     fd8:	0f 90       	pop	r0
     fda:	0f 90       	pop	r0
     fdc:	cf 91       	pop	r28
     fde:	df 91       	pop	r29
     fe0:	08 95       	ret

00000fe2 <UART_TX_SetCallBack>:

uint8_t UART_TX_SetCallBack(void (*Copy_FunctionAddress)(void))
{
     fe2:	df 93       	push	r29
     fe4:	cf 93       	push	r28
     fe6:	00 d0       	rcall	.+0      	; 0xfe8 <UART_TX_SetCallBack+0x6>
     fe8:	0f 92       	push	r0
     fea:	cd b7       	in	r28, 0x3d	; 61
     fec:	de b7       	in	r29, 0x3e	; 62
     fee:	9b 83       	std	Y+3, r25	; 0x03
     ff0:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t Local_u8ErrorState=1;              //Error State: No Error
     ff2:	81 e0       	ldi	r24, 0x01	; 1
     ff4:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_FunctionAddress==NULL_POINTER) //check if pointer points to Nothing
     ff6:	8a 81       	ldd	r24, Y+2	; 0x02
     ff8:	9b 81       	ldd	r25, Y+3	; 0x03
     ffa:	00 97       	sbiw	r24, 0x00	; 0
     ffc:	11 f4       	brne	.+4      	; 0x1002 <UART_TX_SetCallBack+0x20>
	{
		Local_u8ErrorState=0;             //Error State : Error
     ffe:	19 82       	std	Y+1, r1	; 0x01
    1000:	06 c0       	rjmp	.+12     	; 0x100e <UART_TX_SetCallBack+0x2c>
	}
	else
	{
       	UART_TX_CallBack =Copy_FunctionAddress;//Send Function Address To Call Back pointer
    1002:	8a 81       	ldd	r24, Y+2	; 0x02
    1004:	9b 81       	ldd	r25, Y+3	; 0x03
    1006:	90 93 77 00 	sts	0x0077, r25
    100a:	80 93 76 00 	sts	0x0076, r24
	}

	return Local_u8ErrorState; //Return Error State
    100e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1010:	0f 90       	pop	r0
    1012:	0f 90       	pop	r0
    1014:	0f 90       	pop	r0
    1016:	cf 91       	pop	r28
    1018:	df 91       	pop	r29
    101a:	08 95       	ret

0000101c <UART_RX_SetCallBack>:

uint8_t UART_RX_SetCallBack(void (*Copy_FunctionAddress)(void))
{
    101c:	df 93       	push	r29
    101e:	cf 93       	push	r28
    1020:	00 d0       	rcall	.+0      	; 0x1022 <UART_RX_SetCallBack+0x6>
    1022:	0f 92       	push	r0
    1024:	cd b7       	in	r28, 0x3d	; 61
    1026:	de b7       	in	r29, 0x3e	; 62
    1028:	9b 83       	std	Y+3, r25	; 0x03
    102a:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t Local_u8ErrorState=1;              //Error State: No Error
    102c:	81 e0       	ldi	r24, 0x01	; 1
    102e:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_FunctionAddress==NULL_POINTER) //check if pointer points to Nothing
    1030:	8a 81       	ldd	r24, Y+2	; 0x02
    1032:	9b 81       	ldd	r25, Y+3	; 0x03
    1034:	00 97       	sbiw	r24, 0x00	; 0
    1036:	11 f4       	brne	.+4      	; 0x103c <UART_RX_SetCallBack+0x20>
	{
		Local_u8ErrorState=0;             //Error State : Error
    1038:	19 82       	std	Y+1, r1	; 0x01
    103a:	06 c0       	rjmp	.+12     	; 0x1048 <UART_RX_SetCallBack+0x2c>
	}
	else
	{
       	UART_RX_CallBack =Copy_FunctionAddress;//Send Function Address To Call Back pointer
    103c:	8a 81       	ldd	r24, Y+2	; 0x02
    103e:	9b 81       	ldd	r25, Y+3	; 0x03
    1040:	90 93 79 00 	sts	0x0079, r25
    1044:	80 93 78 00 	sts	0x0078, r24
	}

	return Local_u8ErrorState; //Return Error State
    1048:	89 81       	ldd	r24, Y+1	; 0x01
}
    104a:	0f 90       	pop	r0
    104c:	0f 90       	pop	r0
    104e:	0f 90       	pop	r0
    1050:	cf 91       	pop	r28
    1052:	df 91       	pop	r29
    1054:	08 95       	ret

00001056 <__vector_14>:

void __vector_14(void)
{
    1056:	1f 92       	push	r1
    1058:	0f 92       	push	r0
    105a:	0f b6       	in	r0, 0x3f	; 63
    105c:	0f 92       	push	r0
    105e:	11 24       	eor	r1, r1
    1060:	8f 93       	push	r24
    1062:	9f 93       	push	r25
    1064:	af 93       	push	r26
    1066:	bf 93       	push	r27
    1068:	ef 93       	push	r30
    106a:	ff 93       	push	r31
    106c:	df 93       	push	r29
    106e:	cf 93       	push	r28
    1070:	cd b7       	in	r28, 0x3d	; 61
    1072:	de b7       	in	r29, 0x3e	; 62
	if((GET_BIT(UCSRA,UCSRA_UDRE))==1  && (GET_BIT(UCSRA,UCSRA_DOR))==0 ) /*Check if UDR is Empty and overRun Error*/
    1074:	eb e2       	ldi	r30, 0x2B	; 43
    1076:	f0 e0       	ldi	r31, 0x00	; 0
    1078:	80 81       	ld	r24, Z
    107a:	82 95       	swap	r24
    107c:	86 95       	lsr	r24
    107e:	87 70       	andi	r24, 0x07	; 7
    1080:	88 2f       	mov	r24, r24
    1082:	90 e0       	ldi	r25, 0x00	; 0
    1084:	81 70       	andi	r24, 0x01	; 1
    1086:	90 70       	andi	r25, 0x00	; 0
    1088:	88 23       	and	r24, r24
    108a:	d1 f0       	breq	.+52     	; 0x10c0 <__vector_14+0x6a>
    108c:	eb e2       	ldi	r30, 0x2B	; 43
    108e:	f0 e0       	ldi	r31, 0x00	; 0
    1090:	80 81       	ld	r24, Z
    1092:	86 95       	lsr	r24
    1094:	86 95       	lsr	r24
    1096:	86 95       	lsr	r24
    1098:	88 2f       	mov	r24, r24
    109a:	90 e0       	ldi	r25, 0x00	; 0
    109c:	81 70       	andi	r24, 0x01	; 1
    109e:	90 70       	andi	r25, 0x00	; 0
    10a0:	00 97       	sbiw	r24, 0x00	; 0
    10a2:	71 f4       	brne	.+28     	; 0x10c0 <__vector_14+0x6a>
	{
		UDR = G_sendData;   /*Move Data to UDR*/
    10a4:	ec e2       	ldi	r30, 0x2C	; 44
    10a6:	f0 e0       	ldi	r31, 0x00	; 0
    10a8:	80 91 75 00 	lds	r24, 0x0075
    10ac:	80 83       	st	Z, r24

		G_sendData = 0;
    10ae:	10 92 75 00 	sts	0x0075, r1
		SET_BIT(UCSRB,UCSRB_TXCIE);
    10b2:	aa e2       	ldi	r26, 0x2A	; 42
    10b4:	b0 e0       	ldi	r27, 0x00	; 0
    10b6:	ea e2       	ldi	r30, 0x2A	; 42
    10b8:	f0 e0       	ldi	r31, 0x00	; 0
    10ba:	80 81       	ld	r24, Z
    10bc:	80 64       	ori	r24, 0x40	; 64
    10be:	8c 93       	st	X, r24
	}

	CLR_BIT(UCSRB,UCSRB_UDRIE); /*Disable Interrupt*/
    10c0:	aa e2       	ldi	r26, 0x2A	; 42
    10c2:	b0 e0       	ldi	r27, 0x00	; 0
    10c4:	ea e2       	ldi	r30, 0x2A	; 42
    10c6:	f0 e0       	ldi	r31, 0x00	; 0
    10c8:	80 81       	ld	r24, Z
    10ca:	8f 7d       	andi	r24, 0xDF	; 223
    10cc:	8c 93       	st	X, r24
}
    10ce:	cf 91       	pop	r28
    10d0:	df 91       	pop	r29
    10d2:	ff 91       	pop	r31
    10d4:	ef 91       	pop	r30
    10d6:	bf 91       	pop	r27
    10d8:	af 91       	pop	r26
    10da:	9f 91       	pop	r25
    10dc:	8f 91       	pop	r24
    10de:	0f 90       	pop	r0
    10e0:	0f be       	out	0x3f, r0	; 63
    10e2:	0f 90       	pop	r0
    10e4:	1f 90       	pop	r1
    10e6:	18 95       	reti

000010e8 <__vector_13>:

void __vector_13(void)
{
    10e8:	1f 92       	push	r1
    10ea:	0f 92       	push	r0
    10ec:	0f b6       	in	r0, 0x3f	; 63
    10ee:	0f 92       	push	r0
    10f0:	11 24       	eor	r1, r1
    10f2:	2f 93       	push	r18
    10f4:	3f 93       	push	r19
    10f6:	4f 93       	push	r20
    10f8:	5f 93       	push	r21
    10fa:	6f 93       	push	r22
    10fc:	7f 93       	push	r23
    10fe:	8f 93       	push	r24
    1100:	9f 93       	push	r25
    1102:	af 93       	push	r26
    1104:	bf 93       	push	r27
    1106:	ef 93       	push	r30
    1108:	ff 93       	push	r31
    110a:	df 93       	push	r29
    110c:	cf 93       	push	r28
    110e:	cd b7       	in	r28, 0x3d	; 61
    1110:	de b7       	in	r29, 0x3e	; 62

	if((GET_BIT(UCSRA,UCSRA_UDRE))==1)  /*Check if UDR is Empty*/
    1112:	eb e2       	ldi	r30, 0x2B	; 43
    1114:	f0 e0       	ldi	r31, 0x00	; 0
    1116:	80 81       	ld	r24, Z
    1118:	82 95       	swap	r24
    111a:	86 95       	lsr	r24
    111c:	87 70       	andi	r24, 0x07	; 7
    111e:	88 2f       	mov	r24, r24
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	81 70       	andi	r24, 0x01	; 1
    1124:	90 70       	andi	r25, 0x00	; 0
    1126:	88 23       	and	r24, r24
    1128:	99 f0       	breq	.+38     	; 0x1150 <__vector_13+0x68>
	{
		*G_RecData = UDR;   /*Getting Value in UDR*/
    112a:	a0 91 87 00 	lds	r26, 0x0087
    112e:	b0 91 88 00 	lds	r27, 0x0088
    1132:	ec e2       	ldi	r30, 0x2C	; 44
    1134:	f0 e0       	ldi	r31, 0x00	; 0
    1136:	80 81       	ld	r24, Z
    1138:	8c 93       	st	X, r24

		if(UART_RX_CallBack!=0)
    113a:	80 91 78 00 	lds	r24, 0x0078
    113e:	90 91 79 00 	lds	r25, 0x0079
    1142:	00 97       	sbiw	r24, 0x00	; 0
    1144:	29 f0       	breq	.+10     	; 0x1150 <__vector_13+0x68>
		{
			 	UART_RX_CallBack();
    1146:	e0 91 78 00 	lds	r30, 0x0078
    114a:	f0 91 79 00 	lds	r31, 0x0079
    114e:	09 95       	icall
		}

	}

	CLR_BIT(UCSRB,UCSRB_RXCIE); /*Disable Interrupt*/
    1150:	aa e2       	ldi	r26, 0x2A	; 42
    1152:	b0 e0       	ldi	r27, 0x00	; 0
    1154:	ea e2       	ldi	r30, 0x2A	; 42
    1156:	f0 e0       	ldi	r31, 0x00	; 0
    1158:	80 81       	ld	r24, Z
    115a:	8f 77       	andi	r24, 0x7F	; 127
    115c:	8c 93       	st	X, r24

}
    115e:	cf 91       	pop	r28
    1160:	df 91       	pop	r29
    1162:	ff 91       	pop	r31
    1164:	ef 91       	pop	r30
    1166:	bf 91       	pop	r27
    1168:	af 91       	pop	r26
    116a:	9f 91       	pop	r25
    116c:	8f 91       	pop	r24
    116e:	7f 91       	pop	r23
    1170:	6f 91       	pop	r22
    1172:	5f 91       	pop	r21
    1174:	4f 91       	pop	r20
    1176:	3f 91       	pop	r19
    1178:	2f 91       	pop	r18
    117a:	0f 90       	pop	r0
    117c:	0f be       	out	0x3f, r0	; 63
    117e:	0f 90       	pop	r0
    1180:	1f 90       	pop	r1
    1182:	18 95       	reti

00001184 <__vector_15>:

void __vector_15(void)
{
    1184:	1f 92       	push	r1
    1186:	0f 92       	push	r0
    1188:	0f b6       	in	r0, 0x3f	; 63
    118a:	0f 92       	push	r0
    118c:	11 24       	eor	r1, r1
    118e:	2f 93       	push	r18
    1190:	3f 93       	push	r19
    1192:	4f 93       	push	r20
    1194:	5f 93       	push	r21
    1196:	6f 93       	push	r22
    1198:	7f 93       	push	r23
    119a:	8f 93       	push	r24
    119c:	9f 93       	push	r25
    119e:	af 93       	push	r26
    11a0:	bf 93       	push	r27
    11a2:	ef 93       	push	r30
    11a4:	ff 93       	push	r31
    11a6:	df 93       	push	r29
    11a8:	cf 93       	push	r28
    11aa:	cd b7       	in	r28, 0x3d	; 61
    11ac:	de b7       	in	r29, 0x3e	; 62
	if(UART_TX_CallBack!=0)
    11ae:	80 91 76 00 	lds	r24, 0x0076
    11b2:	90 91 77 00 	lds	r25, 0x0077
    11b6:	00 97       	sbiw	r24, 0x00	; 0
    11b8:	29 f0       	breq	.+10     	; 0x11c4 <__vector_15+0x40>
	{
 		UART_TX_CallBack();
    11ba:	e0 91 76 00 	lds	r30, 0x0076
    11be:	f0 91 77 00 	lds	r31, 0x0077
    11c2:	09 95       	icall
 	}

 CLR_BIT(UCSRB,UCSRB_TXCIE);
    11c4:	aa e2       	ldi	r26, 0x2A	; 42
    11c6:	b0 e0       	ldi	r27, 0x00	; 0
    11c8:	ea e2       	ldi	r30, 0x2A	; 42
    11ca:	f0 e0       	ldi	r31, 0x00	; 0
    11cc:	80 81       	ld	r24, Z
    11ce:	8f 7b       	andi	r24, 0xBF	; 191
    11d0:	8c 93       	st	X, r24
}
    11d2:	cf 91       	pop	r28
    11d4:	df 91       	pop	r29
    11d6:	ff 91       	pop	r31
    11d8:	ef 91       	pop	r30
    11da:	bf 91       	pop	r27
    11dc:	af 91       	pop	r26
    11de:	9f 91       	pop	r25
    11e0:	8f 91       	pop	r24
    11e2:	7f 91       	pop	r23
    11e4:	6f 91       	pop	r22
    11e6:	5f 91       	pop	r21
    11e8:	4f 91       	pop	r20
    11ea:	3f 91       	pop	r19
    11ec:	2f 91       	pop	r18
    11ee:	0f 90       	pop	r0
    11f0:	0f be       	out	0x3f, r0	; 63
    11f2:	0f 90       	pop	r0
    11f4:	1f 90       	pop	r1
    11f6:	18 95       	reti

000011f8 <Timer_Init>:
/*Description: Timer/Counter Initialization
 * Input     : Timer_Configuration_S* Confg_S (Struct contain : Timer Channel, Pre-scaler, Timer mode , Mode as described in Struct)
 * Output    : Error Checking
 *_______________________________________________________________________________________________________________________________*/
extern uint8_t Timer_Init(Str_TimerConfiguration_t* Confg_S)
{
    11f8:	df 93       	push	r29
    11fa:	cf 93       	push	r28
    11fc:	00 d0       	rcall	.+0      	; 0x11fe <Timer_Init+0x6>
    11fe:	00 d0       	rcall	.+0      	; 0x1200 <Timer_Init+0x8>
    1200:	0f 92       	push	r0
    1202:	cd b7       	in	r28, 0x3d	; 61
    1204:	de b7       	in	r29, 0x3e	; 62
    1206:	9b 83       	std	Y+3, r25	; 0x03
    1208:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t Local_uint8_ErrorStatus = ERROR_OK;  /*Error Status : No Error*/
    120a:	19 82       	std	Y+1, r1	; 0x01

	/*______________________Check Channel________________________________________________________________*/
	switch(Confg_S->Timer_Channel)                /*Check Timer Channel (Timer0 , Timer1, Timer2)*/
    120c:	ea 81       	ldd	r30, Y+2	; 0x02
    120e:	fb 81       	ldd	r31, Y+3	; 0x03
    1210:	80 81       	ld	r24, Z
    1212:	28 2f       	mov	r18, r24
    1214:	30 e0       	ldi	r19, 0x00	; 0
    1216:	3d 83       	std	Y+5, r19	; 0x05
    1218:	2c 83       	std	Y+4, r18	; 0x04
    121a:	8c 81       	ldd	r24, Y+4	; 0x04
    121c:	9d 81       	ldd	r25, Y+5	; 0x05
    121e:	81 30       	cpi	r24, 0x01	; 1
    1220:	91 05       	cpc	r25, r1
    1222:	71 f1       	breq	.+92     	; 0x1280 <Timer_Init+0x88>
    1224:	2c 81       	ldd	r18, Y+4	; 0x04
    1226:	3d 81       	ldd	r19, Y+5	; 0x05
    1228:	22 30       	cpi	r18, 0x02	; 2
    122a:	31 05       	cpc	r19, r1
    122c:	09 f4       	brne	.+2      	; 0x1230 <Timer_Init+0x38>
    122e:	4b c0       	rjmp	.+150    	; 0x12c6 <Timer_Init+0xce>
    1230:	8c 81       	ldd	r24, Y+4	; 0x04
    1232:	9d 81       	ldd	r25, Y+5	; 0x05
    1234:	00 97       	sbiw	r24, 0x00	; 0
    1236:	09 f0       	breq	.+2      	; 0x123a <Timer_Init+0x42>
    1238:	69 c0       	rjmp	.+210    	; 0x130c <Timer_Init+0x114>
	{
		case TIMER0:                              /*In case Timer0*/
			/*_______________________Check Timer Mode________________________________________________________________*/
			switch(Confg_S -> Timer_Mode)         /*Check if Selected Mode is Counter or Timer*/
    123a:	ea 81       	ldd	r30, Y+2	; 0x02
    123c:	fb 81       	ldd	r31, Y+3	; 0x03
    123e:	82 81       	ldd	r24, Z+2	; 0x02
    1240:	88 2f       	mov	r24, r24
    1242:	90 e0       	ldi	r25, 0x00	; 0
    1244:	00 96       	adiw	r24, 0x00	; 0
    1246:	82 30       	cpi	r24, 0x02	; 2
    1248:	91 05       	cpc	r25, r1
    124a:	30 f4       	brcc	.+12     	; 0x1258 <Timer_Init+0x60>
			{
				case TIMER_MODE :case COUNTER_MODE :
					GSA_uint8_Prescaler_Timer[TIMER0] = Confg_S ->Timer_Psc;  /*Set Pre-scaler to send it To Start Function*/
    124c:	ea 81       	ldd	r30, Y+2	; 0x02
    124e:	fb 81       	ldd	r31, Y+3	; 0x03
    1250:	81 81       	ldd	r24, Z+1	; 0x01
    1252:	80 93 7c 00 	sts	0x007C, r24
    1256:	02 c0       	rjmp	.+4      	; 0x125c <Timer_Init+0x64>
					break;
				default :
					Local_uint8_ErrorStatus = ERROR_NOK;  /*Return Error*/
    1258:	81 e0       	ldi	r24, 0x01	; 1
    125a:	89 83       	std	Y+1, r24	; 0x01
					break;
			}
			/*________________________________________________________________________________________________________*/

			/*_____________________Check OverFlow Mode________________________________________________________________*/
			switch(Confg_S -> Interrupt_Mode)             /*Check If Chosen OverFlow mode is Polling or Interrupt*/
    125c:	ea 81       	ldd	r30, Y+2	; 0x02
    125e:	fb 81       	ldd	r31, Y+3	; 0x03
    1260:	83 81       	ldd	r24, Z+3	; 0x03
    1262:	88 2f       	mov	r24, r24
    1264:	90 e0       	ldi	r25, 0x00	; 0
    1266:	00 96       	adiw	r24, 0x00	; 0
    1268:	82 30       	cpi	r24, 0x02	; 2
    126a:	91 05       	cpc	r25, r1
    126c:	30 f4       	brcc	.+12     	; 0x127a <Timer_Init+0x82>
			{
				case POLLING :case INTERRUPT :
					GSA_uint8_Mode_Timer[TIMER0] = Confg_S ->Interrupt_Mode;  /*Set Mode to send it to Start Timer Function*/
    126e:	ea 81       	ldd	r30, Y+2	; 0x02
    1270:	fb 81       	ldd	r31, Y+3	; 0x03
    1272:	83 81       	ldd	r24, Z+3	; 0x03
    1274:	80 93 7f 00 	sts	0x007F, r24
    1278:	4b c0       	rjmp	.+150    	; 0x1310 <Timer_Init+0x118>
					break;
				default :
					Local_uint8_ErrorStatus = ERROR_NOK;  /*Return Error*/
    127a:	81 e0       	ldi	r24, 0x01	; 1
    127c:	89 83       	std	Y+1, r24	; 0x01
    127e:	48 c0       	rjmp	.+144    	; 0x1310 <Timer_Init+0x118>
			/*__________________________________________________________________________________________________________*/
			break;

		case TIMER1:   /*In Case Timer1*/
			/*_______________________Check Timer Mode________________________________________________________________*/
			switch(Confg_S -> Timer_Mode)         /*Check if Selected Mode is Counter or Timer*/
    1280:	ea 81       	ldd	r30, Y+2	; 0x02
    1282:	fb 81       	ldd	r31, Y+3	; 0x03
    1284:	82 81       	ldd	r24, Z+2	; 0x02
    1286:	88 2f       	mov	r24, r24
    1288:	90 e0       	ldi	r25, 0x00	; 0
    128a:	00 96       	adiw	r24, 0x00	; 0
    128c:	82 30       	cpi	r24, 0x02	; 2
    128e:	91 05       	cpc	r25, r1
    1290:	30 f4       	brcc	.+12     	; 0x129e <Timer_Init+0xa6>
			{
				case TIMER_MODE :case COUNTER_MODE :
					GSA_uint8_Prescaler_Timer[TIMER1] = Confg_S ->Timer_Psc;  /*Set Pre-scaler to send it To Start Function*/
    1292:	ea 81       	ldd	r30, Y+2	; 0x02
    1294:	fb 81       	ldd	r31, Y+3	; 0x03
    1296:	81 81       	ldd	r24, Z+1	; 0x01
    1298:	80 93 7d 00 	sts	0x007D, r24
    129c:	02 c0       	rjmp	.+4      	; 0x12a2 <Timer_Init+0xaa>
					break;

				default :
					Local_uint8_ErrorStatus = ERROR_NOK;  /*Return Error*/
    129e:	81 e0       	ldi	r24, 0x01	; 1
    12a0:	89 83       	std	Y+1, r24	; 0x01
					break;
			}
			/*________________________________________________________________________________________________________*/

			/*_____________________Check OverFlow Mode________________________________________________________________*/
			switch(Confg_S -> Interrupt_Mode)             /*Check If Chosen OverFlow mode is Polling or Interrupt*/
    12a2:	ea 81       	ldd	r30, Y+2	; 0x02
    12a4:	fb 81       	ldd	r31, Y+3	; 0x03
    12a6:	83 81       	ldd	r24, Z+3	; 0x03
    12a8:	88 2f       	mov	r24, r24
    12aa:	90 e0       	ldi	r25, 0x00	; 0
    12ac:	00 96       	adiw	r24, 0x00	; 0
    12ae:	82 30       	cpi	r24, 0x02	; 2
    12b0:	91 05       	cpc	r25, r1
    12b2:	30 f4       	brcc	.+12     	; 0x12c0 <Timer_Init+0xc8>
			{
				case POLLING :case INTERRUPT :
					GSA_uint8_Mode_Timer[TIMER1] = Confg_S ->Interrupt_Mode;  /*Set Mode to send it to Start Timer Function*/
    12b4:	ea 81       	ldd	r30, Y+2	; 0x02
    12b6:	fb 81       	ldd	r31, Y+3	; 0x03
    12b8:	83 81       	ldd	r24, Z+3	; 0x03
    12ba:	80 93 80 00 	sts	0x0080, r24
    12be:	28 c0       	rjmp	.+80     	; 0x1310 <Timer_Init+0x118>
					break;
				default :
					Local_uint8_ErrorStatus = ERROR_NOK;  /*Return Error*/
    12c0:	81 e0       	ldi	r24, 0x01	; 1
    12c2:	89 83       	std	Y+1, r24	; 0x01
    12c4:	25 c0       	rjmp	.+74     	; 0x1310 <Timer_Init+0x118>
			/*__________________________________________________________________________________________________________*/
			break;

		case TIMER2:   /* In Case Timer2*/
			/*_______________________Check Timer Mode________________________________________________________________*/
			switch(Confg_S -> Timer_Mode)         /*Check if Selected Mode is Counter or Timer*/
    12c6:	ea 81       	ldd	r30, Y+2	; 0x02
    12c8:	fb 81       	ldd	r31, Y+3	; 0x03
    12ca:	82 81       	ldd	r24, Z+2	; 0x02
    12cc:	88 2f       	mov	r24, r24
    12ce:	90 e0       	ldi	r25, 0x00	; 0
    12d0:	00 96       	adiw	r24, 0x00	; 0
    12d2:	82 30       	cpi	r24, 0x02	; 2
    12d4:	91 05       	cpc	r25, r1
    12d6:	30 f4       	brcc	.+12     	; 0x12e4 <Timer_Init+0xec>
			{
				case TIMER_MODE :case COUNTER_MODE :
					GSA_uint8_Prescaler_Timer[TIMER2] = Confg_S ->Timer_Psc;  /*Set Pre-scaler to send it To Start Function*/
    12d8:	ea 81       	ldd	r30, Y+2	; 0x02
    12da:	fb 81       	ldd	r31, Y+3	; 0x03
    12dc:	81 81       	ldd	r24, Z+1	; 0x01
    12de:	80 93 7e 00 	sts	0x007E, r24
    12e2:	02 c0       	rjmp	.+4      	; 0x12e8 <Timer_Init+0xf0>
					break;
				default :
					Local_uint8_ErrorStatus = ERROR_NOK;  /*Return Error*/
    12e4:	81 e0       	ldi	r24, 0x01	; 1
    12e6:	89 83       	std	Y+1, r24	; 0x01
					break;
			}
			/*________________________________________________________________________________________________________*/

			/*_____________________Check OverFlow Mode________________________________________________________________*/
			switch(Confg_S -> Interrupt_Mode)             /*Check If Chosen OverFlow mode is Polling or Interrupt*/
    12e8:	ea 81       	ldd	r30, Y+2	; 0x02
    12ea:	fb 81       	ldd	r31, Y+3	; 0x03
    12ec:	83 81       	ldd	r24, Z+3	; 0x03
    12ee:	88 2f       	mov	r24, r24
    12f0:	90 e0       	ldi	r25, 0x00	; 0
    12f2:	00 96       	adiw	r24, 0x00	; 0
    12f4:	82 30       	cpi	r24, 0x02	; 2
    12f6:	91 05       	cpc	r25, r1
    12f8:	30 f4       	brcc	.+12     	; 0x1306 <Timer_Init+0x10e>
			{
				case POLLING :case INTERRUPT :
					GSA_uint8_Mode_Timer[TIMER2] = Confg_S ->Interrupt_Mode;  /*Set Mode to send it to Start Timer Function*/
    12fa:	ea 81       	ldd	r30, Y+2	; 0x02
    12fc:	fb 81       	ldd	r31, Y+3	; 0x03
    12fe:	83 81       	ldd	r24, Z+3	; 0x03
    1300:	80 93 81 00 	sts	0x0081, r24
    1304:	05 c0       	rjmp	.+10     	; 0x1310 <Timer_Init+0x118>
					break;
				default :
					Local_uint8_ErrorStatus = ERROR_NOK;   /*Return Error*/
    1306:	81 e0       	ldi	r24, 0x01	; 1
    1308:	89 83       	std	Y+1, r24	; 0x01
    130a:	02 c0       	rjmp	.+4      	; 0x1310 <Timer_Init+0x118>
					break;
			}
			/*__________________________________________________________________________________________________________*/
			break;
		default :
			Local_uint8_ErrorStatus = ERROR_NOK;  /*Return Error*/
    130c:	81 e0       	ldi	r24, 0x01	; 1
    130e:	89 83       	std	Y+1, r24	; 0x01
			break;
		/*___________________________________________________________________________________________________________________*/

	}

	return Local_uint8_ErrorStatus;   /*Return Error Status*/
    1310:	89 81       	ldd	r24, Y+1	; 0x01
}
    1312:	0f 90       	pop	r0
    1314:	0f 90       	pop	r0
    1316:	0f 90       	pop	r0
    1318:	0f 90       	pop	r0
    131a:	0f 90       	pop	r0
    131c:	cf 91       	pop	r28
    131e:	df 91       	pop	r29
    1320:	08 95       	ret

00001322 <Timer_Start>:
/*Description: Timer/Counter Start
 * Input     :  Timer Channel(Timer Channel (Timer0 or Timer1 or Timer2), Tick Counting (Counts given by user)
 * Output    : Error Checking
 *_______________________________________________________________________________________________________________________________*/
extern uint8_t Timer_Start(uint8_t Copy_uint8_TimerChannel,uint32_t Copy_uint32_TickCounts)
{
    1322:	df 93       	push	r29
    1324:	cf 93       	push	r28
    1326:	cd b7       	in	r28, 0x3d	; 61
    1328:	de b7       	in	r29, 0x3e	; 62
    132a:	2c 97       	sbiw	r28, 0x0c	; 12
    132c:	0f b6       	in	r0, 0x3f	; 63
    132e:	f8 94       	cli
    1330:	de bf       	out	0x3e, r29	; 62
    1332:	0f be       	out	0x3f, r0	; 63
    1334:	cd bf       	out	0x3d, r28	; 61
    1336:	8a 83       	std	Y+2, r24	; 0x02
    1338:	4b 83       	std	Y+3, r20	; 0x03
    133a:	5c 83       	std	Y+4, r21	; 0x04
    133c:	6d 83       	std	Y+5, r22	; 0x05
    133e:	7e 83       	std	Y+6, r23	; 0x06

	/*_____________________Variables________________________________________________________________________________*/
	uint8_t Local_uint8_ErrorStatus = ERROR_OK;
    1340:	19 82       	std	Y+1, r1	; 0x01
	/*______________________________________________________________________________________________________________*/

	switch(Copy_uint8_TimerChannel)                                       /*Check Channel Entered*/
    1342:	8a 81       	ldd	r24, Y+2	; 0x02
    1344:	28 2f       	mov	r18, r24
    1346:	30 e0       	ldi	r19, 0x00	; 0
    1348:	3c 87       	std	Y+12, r19	; 0x0c
    134a:	2b 87       	std	Y+11, r18	; 0x0b
    134c:	8b 85       	ldd	r24, Y+11	; 0x0b
    134e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1350:	00 97       	sbiw	r24, 0x00	; 0
    1352:	39 f0       	breq	.+14     	; 0x1362 <Timer_Start+0x40>
    1354:	2b 85       	ldd	r18, Y+11	; 0x0b
    1356:	3c 85       	ldd	r19, Y+12	; 0x0c
    1358:	21 30       	cpi	r18, 0x01	; 1
    135a:	31 05       	cpc	r19, r1
    135c:	09 f4       	brne	.+2      	; 0x1360 <Timer_Start+0x3e>
    135e:	75 c0       	rjmp	.+234    	; 0x144a <Timer_Start+0x128>
    1360:	db c0       	rjmp	.+438    	; 0x1518 <Timer_Start+0x1f6>
	{
	/*_________________________________Timer Channels________________________________________________________________*/
		case TIMER0 :                                  /*In Case of Timer 0*/
			if(Copy_uint32_TickCounts < TIMER0_OVERFLOW)
    1362:	8b 81       	ldd	r24, Y+3	; 0x03
    1364:	9c 81       	ldd	r25, Y+4	; 0x04
    1366:	ad 81       	ldd	r26, Y+5	; 0x05
    1368:	be 81       	ldd	r27, Y+6	; 0x06
    136a:	8f 3f       	cpi	r24, 0xFF	; 255
    136c:	91 05       	cpc	r25, r1
    136e:	a1 05       	cpc	r26, r1
    1370:	b1 05       	cpc	r27, r1
    1372:	08 f0       	brcs	.+2      	; 0x1376 <Timer_Start+0x54>
    1374:	67 c0       	rjmp	.+206    	; 0x1444 <Timer_Start+0x122>
			{
				/*TIMER0_COUNTER_REGISTER = TIMER0_OVERFLOW - Copy_uint32_TickCounts;*/
				switch(GSA_uint8_Mode_Timer[TIMER0])                /*Check Timer Mode*/
    1376:	80 91 7f 00 	lds	r24, 0x007F
    137a:	28 2f       	mov	r18, r24
    137c:	30 e0       	ldi	r19, 0x00	; 0
    137e:	3a 87       	std	Y+10, r19	; 0x0a
    1380:	29 87       	std	Y+9, r18	; 0x09
    1382:	89 85       	ldd	r24, Y+9	; 0x09
    1384:	9a 85       	ldd	r25, Y+10	; 0x0a
    1386:	00 97       	sbiw	r24, 0x00	; 0
    1388:	31 f0       	breq	.+12     	; 0x1396 <Timer_Start+0x74>
    138a:	29 85       	ldd	r18, Y+9	; 0x09
    138c:	3a 85       	ldd	r19, Y+10	; 0x0a
    138e:	21 30       	cpi	r18, 0x01	; 1
    1390:	31 05       	cpc	r19, r1
    1392:	21 f1       	breq	.+72     	; 0x13dc <Timer_Start+0xba>
    1394:	54 c0       	rjmp	.+168    	; 0x143e <Timer_Start+0x11c>
				{
				/*________________________________Timer Mode_____________________________________________________________*/
					case POLLING :                         /*If Selected Mode is Polling*/
						SET_BIT(TIMER0_CONTROL_REGISTER,TIMER0_CONTROL_WAVEGENERATION_1);
    1396:	a3 e5       	ldi	r26, 0x53	; 83
    1398:	b0 e0       	ldi	r27, 0x00	; 0
    139a:	e3 e5       	ldi	r30, 0x53	; 83
    139c:	f0 e0       	ldi	r31, 0x00	; 0
    139e:	80 81       	ld	r24, Z
    13a0:	88 60       	ori	r24, 0x08	; 8
    13a2:	8c 93       	st	X, r24
						TIMER0_CONTROL_REGISTER &=(uint8_t) CLR_PRE_SCALLER;                     /*Ensure Pre-scaler Bits is cleared*/
    13a4:	a3 e5       	ldi	r26, 0x53	; 83
    13a6:	b0 e0       	ldi	r27, 0x00	; 0
    13a8:	e3 e5       	ldi	r30, 0x53	; 83
    13aa:	f0 e0       	ldi	r31, 0x00	; 0
    13ac:	80 81       	ld	r24, Z
    13ae:	88 7f       	andi	r24, 0xF8	; 248
    13b0:	8c 93       	st	X, r24
						TIMER0_CONTROL_REGISTER |=(uint8_t) GSA_uint8_Prescaler_Timer[TIMER0];  /*Use Pre-scaler Entered by user*/
    13b2:	a3 e5       	ldi	r26, 0x53	; 83
    13b4:	b0 e0       	ldi	r27, 0x00	; 0
    13b6:	e3 e5       	ldi	r30, 0x53	; 83
    13b8:	f0 e0       	ldi	r31, 0x00	; 0
    13ba:	90 81       	ld	r25, Z
    13bc:	80 91 7c 00 	lds	r24, 0x007C
    13c0:	89 2b       	or	r24, r25
    13c2:	8c 93       	st	X, r24
						SET_BIT(TIMER0_INTERRUPT_FLAG_REGISTER,TIMER0_INTERRUPT_OVERFLOW_FLAG_BIT);
    13c4:	a8 e5       	ldi	r26, 0x58	; 88
    13c6:	b0 e0       	ldi	r27, 0x00	; 0
    13c8:	e8 e5       	ldi	r30, 0x58	; 88
    13ca:	f0 e0       	ldi	r31, 0x00	; 0
    13cc:	80 81       	ld	r24, Z
    13ce:	81 60       	ori	r24, 0x01	; 1
    13d0:	8c 93       	st	X, r24
						TIMER0_OUTPUT_COMPARE_MATCH = Copy_uint32_TickCounts;
    13d2:	ec e5       	ldi	r30, 0x5C	; 92
    13d4:	f0 e0       	ldi	r31, 0x00	; 0
    13d6:	8b 81       	ldd	r24, Y+3	; 0x03
    13d8:	80 83       	st	Z, r24
    13da:	a0 c0       	rjmp	.+320    	; 0x151c <Timer_Start+0x1fa>
						break;
					case INTERRUPT:
						SET_BIT(TIMER0_CONTROL_REGISTER,TIMER0_CONTROL_WAVEGENERATION_1);
    13dc:	a3 e5       	ldi	r26, 0x53	; 83
    13de:	b0 e0       	ldi	r27, 0x00	; 0
    13e0:	e3 e5       	ldi	r30, 0x53	; 83
    13e2:	f0 e0       	ldi	r31, 0x00	; 0
    13e4:	80 81       	ld	r24, Z
    13e6:	88 60       	ori	r24, 0x08	; 8
    13e8:	8c 93       	st	X, r24
						CLR_BIT(TIMER0_CONTROL_REGISTER,TIMER0_CONTROL_WAVEGENERATION_0);
    13ea:	a3 e5       	ldi	r26, 0x53	; 83
    13ec:	b0 e0       	ldi	r27, 0x00	; 0
    13ee:	e3 e5       	ldi	r30, 0x53	; 83
    13f0:	f0 e0       	ldi	r31, 0x00	; 0
    13f2:	80 81       	ld	r24, Z
    13f4:	8f 7b       	andi	r24, 0xBF	; 191
    13f6:	8c 93       	st	X, r24
						/*SET_BIT(TIMER0_INTERRUPT_MASK_REGISTER,TIMER0_INTERRUPT_OVERFLOW_ENABLE_BIT);*/ /*Enable OverFlow Interrupt*/
						SET_BIT(STATUS_REGISTER,GLOBAL_INTERRUPT_BIT);   /*Enable Global Interrupt*/
    13f8:	af e5       	ldi	r26, 0x5F	; 95
    13fa:	b0 e0       	ldi	r27, 0x00	; 0
    13fc:	ef e5       	ldi	r30, 0x5F	; 95
    13fe:	f0 e0       	ldi	r31, 0x00	; 0
    1400:	80 81       	ld	r24, Z
    1402:	80 68       	ori	r24, 0x80	; 128
    1404:	8c 93       	st	X, r24
						SET_BIT(TIMER0_INTERRUPT_MASK_REGISTER,TIMER0_INTERRUPT_COMPARE_MATCH_ENABLE_BIT);
    1406:	a9 e5       	ldi	r26, 0x59	; 89
    1408:	b0 e0       	ldi	r27, 0x00	; 0
    140a:	e9 e5       	ldi	r30, 0x59	; 89
    140c:	f0 e0       	ldi	r31, 0x00	; 0
    140e:	80 81       	ld	r24, Z
    1410:	82 60       	ori	r24, 0x02	; 2
    1412:	8c 93       	st	X, r24
						TIMER0_CONTROL_REGISTER &=(uint8_t) CLR_PRE_SCALLER;                     /*Ensure Pre-scaler Bits is cleared*/
    1414:	a3 e5       	ldi	r26, 0x53	; 83
    1416:	b0 e0       	ldi	r27, 0x00	; 0
    1418:	e3 e5       	ldi	r30, 0x53	; 83
    141a:	f0 e0       	ldi	r31, 0x00	; 0
    141c:	80 81       	ld	r24, Z
    141e:	88 7f       	andi	r24, 0xF8	; 248
    1420:	8c 93       	st	X, r24
						TIMER0_CONTROL_REGISTER |=(uint8_t) GSA_uint8_Prescaler_Timer[TIMER0];  /*Use Pre-scaler Entered by user*/
    1422:	a3 e5       	ldi	r26, 0x53	; 83
    1424:	b0 e0       	ldi	r27, 0x00	; 0
    1426:	e3 e5       	ldi	r30, 0x53	; 83
    1428:	f0 e0       	ldi	r31, 0x00	; 0
    142a:	90 81       	ld	r25, Z
    142c:	80 91 7c 00 	lds	r24, 0x007C
    1430:	89 2b       	or	r24, r25
    1432:	8c 93       	st	X, r24
						TIMER0_OUTPUT_COMPARE_MATCH = Copy_uint32_TickCounts;
    1434:	ec e5       	ldi	r30, 0x5C	; 92
    1436:	f0 e0       	ldi	r31, 0x00	; 0
    1438:	8b 81       	ldd	r24, Y+3	; 0x03
    143a:	80 83       	st	Z, r24
    143c:	6f c0       	rjmp	.+222    	; 0x151c <Timer_Start+0x1fa>
						break;
					default:
						Local_uint8_ErrorStatus = ERROR_NOK;
    143e:	81 e0       	ldi	r24, 0x01	; 1
    1440:	89 83       	std	Y+1, r24	; 0x01
    1442:	6c c0       	rjmp	.+216    	; 0x151c <Timer_Start+0x1fa>
				/*_________________________________________________________________________________________________________________*/
				}
			}
			else
			{
				Local_uint8_ErrorStatus = ERROR_NOK; /*Error Status : Error*/
    1444:	81 e0       	ldi	r24, 0x01	; 1
    1446:	89 83       	std	Y+1, r24	; 0x01
    1448:	69 c0       	rjmp	.+210    	; 0x151c <Timer_Start+0x1fa>
			}
		break;
		case TIMER1 :                                  /*In Case of Timer 0*/
			if(Copy_uint32_TickCounts < TIMER1_OVERFLOW)
    144a:	8b 81       	ldd	r24, Y+3	; 0x03
    144c:	9c 81       	ldd	r25, Y+4	; 0x04
    144e:	ad 81       	ldd	r26, Y+5	; 0x05
    1450:	be 81       	ldd	r27, Y+6	; 0x06
    1452:	80 30       	cpi	r24, 0x00	; 0
    1454:	30 e0       	ldi	r19, 0x00	; 0
    1456:	93 07       	cpc	r25, r19
    1458:	31 e0       	ldi	r19, 0x01	; 1
    145a:	a3 07       	cpc	r26, r19
    145c:	30 e0       	ldi	r19, 0x00	; 0
    145e:	b3 07       	cpc	r27, r19
    1460:	08 f0       	brcs	.+2      	; 0x1464 <Timer_Start+0x142>
    1462:	57 c0       	rjmp	.+174    	; 0x1512 <Timer_Start+0x1f0>
			{
					TIMER1_COUNTER_REGISTER = TIMER1_OVERFLOW - Copy_uint32_TickCounts;
    1464:	ec e4       	ldi	r30, 0x4C	; 76
    1466:	f0 e0       	ldi	r31, 0x00	; 0
    1468:	8b 81       	ldd	r24, Y+3	; 0x03
    146a:	9c 81       	ldd	r25, Y+4	; 0x04
    146c:	90 95       	com	r25
    146e:	81 95       	neg	r24
    1470:	9f 4f       	sbci	r25, 0xFF	; 255
    1472:	91 83       	std	Z+1, r25	; 0x01
    1474:	80 83       	st	Z, r24
						switch(GSA_uint8_Mode_Timer[TIMER1])                /*Check Timer Mode*/
    1476:	80 91 80 00 	lds	r24, 0x0080
    147a:	28 2f       	mov	r18, r24
    147c:	30 e0       	ldi	r19, 0x00	; 0
    147e:	38 87       	std	Y+8, r19	; 0x08
    1480:	2f 83       	std	Y+7, r18	; 0x07
    1482:	8f 81       	ldd	r24, Y+7	; 0x07
    1484:	98 85       	ldd	r25, Y+8	; 0x08
    1486:	00 97       	sbiw	r24, 0x00	; 0
    1488:	31 f0       	breq	.+12     	; 0x1496 <Timer_Start+0x174>
    148a:	2f 81       	ldd	r18, Y+7	; 0x07
    148c:	38 85       	ldd	r19, Y+8	; 0x08
    148e:	21 30       	cpi	r18, 0x01	; 1
    1490:	31 05       	cpc	r19, r1
    1492:	e9 f0       	breq	.+58     	; 0x14ce <Timer_Start+0x1ac>
    1494:	3b c0       	rjmp	.+118    	; 0x150c <Timer_Start+0x1ea>
						{
						/*________________________________Timer Mode_____________________________________________________________*/
							case POLLING :                         /*If Selected Mode is Polling*/
								TIMER1_CONTROL_REGISTER_B &=(uint8_t) CLR_PRE_SCALLER;                     /*Ensure Pre-scaler Bits is cleared*/
    1496:	ae e4       	ldi	r26, 0x4E	; 78
    1498:	b0 e0       	ldi	r27, 0x00	; 0
    149a:	ee e4       	ldi	r30, 0x4E	; 78
    149c:	f0 e0       	ldi	r31, 0x00	; 0
    149e:	80 81       	ld	r24, Z
    14a0:	88 7f       	andi	r24, 0xF8	; 248
    14a2:	8c 93       	st	X, r24
								TIMER1_CONTROL_REGISTER_B |=(uint8_t) GSA_uint8_Prescaler_Timer[TIMER1];  /*Use Pre-scaler Entered by user*/
    14a4:	ae e4       	ldi	r26, 0x4E	; 78
    14a6:	b0 e0       	ldi	r27, 0x00	; 0
    14a8:	ee e4       	ldi	r30, 0x4E	; 78
    14aa:	f0 e0       	ldi	r31, 0x00	; 0
    14ac:	90 81       	ld	r25, Z
    14ae:	80 91 7d 00 	lds	r24, 0x007D
    14b2:	89 2b       	or	r24, r25
    14b4:	8c 93       	st	X, r24
								SET_BIT(TIMER1_INTERRUPT_FLAG_REGISTER,TIMER1_INTERRUPT_OVERFLOW_FLAG_BIT);
    14b6:	a8 e5       	ldi	r26, 0x58	; 88
    14b8:	b0 e0       	ldi	r27, 0x00	; 0
    14ba:	e8 e5       	ldi	r30, 0x58	; 88
    14bc:	f0 e0       	ldi	r31, 0x00	; 0
    14be:	80 81       	ld	r24, Z
    14c0:	84 60       	ori	r24, 0x04	; 4
    14c2:	8c 93       	st	X, r24
								TIMER1_COUNTER_REGISTER = RESET_COUNTER;
    14c4:	ec e4       	ldi	r30, 0x4C	; 76
    14c6:	f0 e0       	ldi	r31, 0x00	; 0
    14c8:	11 82       	std	Z+1, r1	; 0x01
    14ca:	10 82       	st	Z, r1
    14cc:	27 c0       	rjmp	.+78     	; 0x151c <Timer_Start+0x1fa>
								break;
							case INTERRUPT:
								TIMER1_CONTROL_REGISTER_B &=(uint8_t) CLR_PRE_SCALLER;                     /*Ensure Pre-scaler Bits is cleared*/
    14ce:	ae e4       	ldi	r26, 0x4E	; 78
    14d0:	b0 e0       	ldi	r27, 0x00	; 0
    14d2:	ee e4       	ldi	r30, 0x4E	; 78
    14d4:	f0 e0       	ldi	r31, 0x00	; 0
    14d6:	80 81       	ld	r24, Z
    14d8:	88 7f       	andi	r24, 0xF8	; 248
    14da:	8c 93       	st	X, r24
								TIMER1_CONTROL_REGISTER_B |=(uint8_t) GSA_uint8_Prescaler_Timer[TIMER1];  /*Use Pre-scaler Entered by user*/
    14dc:	ae e4       	ldi	r26, 0x4E	; 78
    14de:	b0 e0       	ldi	r27, 0x00	; 0
    14e0:	ee e4       	ldi	r30, 0x4E	; 78
    14e2:	f0 e0       	ldi	r31, 0x00	; 0
    14e4:	90 81       	ld	r25, Z
    14e6:	80 91 7d 00 	lds	r24, 0x007D
    14ea:	89 2b       	or	r24, r25
    14ec:	8c 93       	st	X, r24
								SET_BIT(TIMER1_INTERRUPT_MASK_REGISTER,TIMER1_INTERRUPT_OVERFLOW_ENABLE_BIT);   /*Enable OverFlow Interrupt*/
    14ee:	a9 e5       	ldi	r26, 0x59	; 89
    14f0:	b0 e0       	ldi	r27, 0x00	; 0
    14f2:	e9 e5       	ldi	r30, 0x59	; 89
    14f4:	f0 e0       	ldi	r31, 0x00	; 0
    14f6:	80 81       	ld	r24, Z
    14f8:	84 60       	ori	r24, 0x04	; 4
    14fa:	8c 93       	st	X, r24
								SET_BIT(STATUS_REGISTER,GLOBAL_INTERRUPT_BIT);   /*Enable Global Interrupt*/
    14fc:	af e5       	ldi	r26, 0x5F	; 95
    14fe:	b0 e0       	ldi	r27, 0x00	; 0
    1500:	ef e5       	ldi	r30, 0x5F	; 95
    1502:	f0 e0       	ldi	r31, 0x00	; 0
    1504:	80 81       	ld	r24, Z
    1506:	80 68       	ori	r24, 0x80	; 128
    1508:	8c 93       	st	X, r24
    150a:	08 c0       	rjmp	.+16     	; 0x151c <Timer_Start+0x1fa>

								break;
							default:
								Local_uint8_ErrorStatus = ERROR_NOK;
    150c:	81 e0       	ldi	r24, 0x01	; 1
    150e:	89 83       	std	Y+1, r24	; 0x01
    1510:	05 c0       	rjmp	.+10     	; 0x151c <Timer_Start+0x1fa>
						/*_________________________________________________________________________________________________________________*/
						}
					}
					else
					{
						Local_uint8_ErrorStatus = ERROR_NOK; /*Error Status : Error*/
    1512:	81 e0       	ldi	r24, 0x01	; 1
    1514:	89 83       	std	Y+1, r24	; 0x01
    1516:	02 c0       	rjmp	.+4      	; 0x151c <Timer_Start+0x1fa>
					}
				break;
		default:
				Local_uint8_ErrorStatus = ERROR_NOK; /*Error Status : Error*/
    1518:	81 e0       	ldi	r24, 0x01	; 1
    151a:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return Local_uint8_ErrorStatus; /*Return Error Status*/
    151c:	89 81       	ldd	r24, Y+1	; 0x01
}
    151e:	2c 96       	adiw	r28, 0x0c	; 12
    1520:	0f b6       	in	r0, 0x3f	; 63
    1522:	f8 94       	cli
    1524:	de bf       	out	0x3e, r29	; 62
    1526:	0f be       	out	0x3f, r0	; 63
    1528:	cd bf       	out	0x3d, r28	; 61
    152a:	cf 91       	pop	r28
    152c:	df 91       	pop	r29
    152e:	08 95       	ret

00001530 <Timer_Stop>:
/*Description: Timer/Counter Stop
 * Input     :  Timer Channel(Timer Channel (Timer0 or Timer1 or Timer2)
 * Output    : Error Checking
 *_______________________________________________________________________________________________________________________________*/
extern uint8_t Timer_Stop(uint8_t Copy_uint8_TimerChannel)
{
    1530:	df 93       	push	r29
    1532:	cf 93       	push	r28
    1534:	00 d0       	rcall	.+0      	; 0x1536 <Timer_Stop+0x6>
    1536:	00 d0       	rcall	.+0      	; 0x1538 <Timer_Stop+0x8>
    1538:	cd b7       	in	r28, 0x3d	; 61
    153a:	de b7       	in	r29, 0x3e	; 62
    153c:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t Local_uint8_ErrorStatus = ERROR_OK; /*Error Status : No Error*/
    153e:	19 82       	std	Y+1, r1	; 0x01

	switch(Copy_uint8_TimerChannel)
    1540:	8a 81       	ldd	r24, Y+2	; 0x02
    1542:	28 2f       	mov	r18, r24
    1544:	30 e0       	ldi	r19, 0x00	; 0
    1546:	3c 83       	std	Y+4, r19	; 0x04
    1548:	2b 83       	std	Y+3, r18	; 0x03
    154a:	8b 81       	ldd	r24, Y+3	; 0x03
    154c:	9c 81       	ldd	r25, Y+4	; 0x04
    154e:	00 97       	sbiw	r24, 0x00	; 0
    1550:	31 f0       	breq	.+12     	; 0x155e <Timer_Stop+0x2e>
    1552:	2b 81       	ldd	r18, Y+3	; 0x03
    1554:	3c 81       	ldd	r19, Y+4	; 0x04
    1556:	21 30       	cpi	r18, 0x01	; 1
    1558:	31 05       	cpc	r19, r1
    155a:	49 f0       	breq	.+18     	; 0x156e <Timer_Stop+0x3e>
    155c:	10 c0       	rjmp	.+32     	; 0x157e <Timer_Stop+0x4e>
	{
		case TIMER0 :
			TIMER0_CONTROL_REGISTER &= (uint8_t) CLR_PRE_SCALLER; /*Stop Pre Scaler*/
    155e:	a3 e5       	ldi	r26, 0x53	; 83
    1560:	b0 e0       	ldi	r27, 0x00	; 0
    1562:	e3 e5       	ldi	r30, 0x53	; 83
    1564:	f0 e0       	ldi	r31, 0x00	; 0
    1566:	80 81       	ld	r24, Z
    1568:	88 7f       	andi	r24, 0xF8	; 248
    156a:	8c 93       	st	X, r24
    156c:	0a c0       	rjmp	.+20     	; 0x1582 <Timer_Stop+0x52>
			break;
		case TIMER1 :
			TIMER1_CONTROL_REGISTER_B &= (uint8_t) CLR_PRE_SCALLER; /*Stop Pre Scaler*/
    156e:	ae e4       	ldi	r26, 0x4E	; 78
    1570:	b0 e0       	ldi	r27, 0x00	; 0
    1572:	ee e4       	ldi	r30, 0x4E	; 78
    1574:	f0 e0       	ldi	r31, 0x00	; 0
    1576:	80 81       	ld	r24, Z
    1578:	88 7f       	andi	r24, 0xF8	; 248
    157a:	8c 93       	st	X, r24
    157c:	02 c0       	rjmp	.+4      	; 0x1582 <Timer_Stop+0x52>
			break;
		default:
			Local_uint8_ErrorStatus = ERROR_NOK; /*Error Status : Error*/
    157e:	81 e0       	ldi	r24, 0x01	; 1
    1580:	89 83       	std	Y+1, r24	; 0x01

	}

	return Local_uint8_ErrorStatus; /*Return Error Status*/
    1582:	89 81       	ldd	r24, Y+1	; 0x01
}
    1584:	0f 90       	pop	r0
    1586:	0f 90       	pop	r0
    1588:	0f 90       	pop	r0
    158a:	0f 90       	pop	r0
    158c:	cf 91       	pop	r28
    158e:	df 91       	pop	r29
    1590:	08 95       	ret

00001592 <Timer_Reset>:
/*Description: Timer Reset
 * Input     :  Timer Channel(Timer Channel (Timer0 or Timer1 or Timer2)
 * Output    : Error Checking
 *_______________________________________________________________________________________________________________________________*/
extern uint8_t Timer_Reset(uint8_t Copy_uint8_TimerChannel)
{
    1592:	df 93       	push	r29
    1594:	cf 93       	push	r28
    1596:	00 d0       	rcall	.+0      	; 0x1598 <Timer_Reset+0x6>
    1598:	00 d0       	rcall	.+0      	; 0x159a <Timer_Reset+0x8>
    159a:	cd b7       	in	r28, 0x3d	; 61
    159c:	de b7       	in	r29, 0x3e	; 62
    159e:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t Local_uint8_ErrorStatus = ERROR_OK;  /*Error Status : No Error*/
    15a0:	19 82       	std	Y+1, r1	; 0x01

	switch(Copy_uint8_TimerChannel)
    15a2:	8a 81       	ldd	r24, Y+2	; 0x02
    15a4:	28 2f       	mov	r18, r24
    15a6:	30 e0       	ldi	r19, 0x00	; 0
    15a8:	3c 83       	std	Y+4, r19	; 0x04
    15aa:	2b 83       	std	Y+3, r18	; 0x03
    15ac:	8b 81       	ldd	r24, Y+3	; 0x03
    15ae:	9c 81       	ldd	r25, Y+4	; 0x04
    15b0:	00 97       	sbiw	r24, 0x00	; 0
    15b2:	31 f0       	breq	.+12     	; 0x15c0 <Timer_Reset+0x2e>
    15b4:	2b 81       	ldd	r18, Y+3	; 0x03
    15b6:	3c 81       	ldd	r19, Y+4	; 0x04
    15b8:	21 30       	cpi	r18, 0x01	; 1
    15ba:	31 05       	cpc	r19, r1
    15bc:	29 f0       	breq	.+10     	; 0x15c8 <Timer_Reset+0x36>
    15be:	09 c0       	rjmp	.+18     	; 0x15d2 <Timer_Reset+0x40>
	{
		case TIMER0 :
			TIMER0_COUNTER_REGISTER = RESET_COUNTER; /*Reset Counter */
    15c0:	e2 e5       	ldi	r30, 0x52	; 82
    15c2:	f0 e0       	ldi	r31, 0x00	; 0
    15c4:	10 82       	st	Z, r1
    15c6:	07 c0       	rjmp	.+14     	; 0x15d6 <Timer_Reset+0x44>
			break;
		case TIMER1 :
			TIMER1_COUNTER_REGISTER = RESET_COUNTER; /*Reset Counter */
    15c8:	ec e4       	ldi	r30, 0x4C	; 76
    15ca:	f0 e0       	ldi	r31, 0x00	; 0
    15cc:	11 82       	std	Z+1, r1	; 0x01
    15ce:	10 82       	st	Z, r1
    15d0:	02 c0       	rjmp	.+4      	; 0x15d6 <Timer_Reset+0x44>

			break;
		default:
			Local_uint8_ErrorStatus = ERROR_NOK; /*Error Status : Error*/
    15d2:	81 e0       	ldi	r24, 0x01	; 1
    15d4:	89 83       	std	Y+1, r24	; 0x01

	}

	return Local_uint8_ErrorStatus; /*Return Error Status*/
    15d6:	89 81       	ldd	r24, Y+1	; 0x01
}
    15d8:	0f 90       	pop	r0
    15da:	0f 90       	pop	r0
    15dc:	0f 90       	pop	r0
    15de:	0f 90       	pop	r0
    15e0:	cf 91       	pop	r28
    15e2:	df 91       	pop	r29
    15e4:	08 95       	ret

000015e6 <Timer_Get_TickTime>:
/*Description: Get Timer Tick Time value to use it by user
 * Input     : Timer Channel(Timer Channel (Timer0 or Timer1 or Timer2), *Timer_Time (Pointer to return Value)
 * Output    : Error Checking
 *_______________________________________________________________________________________________________________________________*/
extern uint8_t Timer_Get_TickTime(uint8_t Copy_uint8_TimerChannel, uint32_t *Copy_uint8Ptr_TimerTickTime)
{
    15e6:	df 93       	push	r29
    15e8:	cf 93       	push	r28
    15ea:	00 d0       	rcall	.+0      	; 0x15ec <Timer_Get_TickTime+0x6>
    15ec:	00 d0       	rcall	.+0      	; 0x15ee <Timer_Get_TickTime+0x8>
    15ee:	00 d0       	rcall	.+0      	; 0x15f0 <Timer_Get_TickTime+0xa>
    15f0:	cd b7       	in	r28, 0x3d	; 61
    15f2:	de b7       	in	r29, 0x3e	; 62
    15f4:	8a 83       	std	Y+2, r24	; 0x02
    15f6:	7c 83       	std	Y+4, r23	; 0x04
    15f8:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t Local_uint8_ErrorStatus = ERROR_OK;  /*Error Status :No Error*/
    15fa:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_uint8Ptr_TimerTickTime == NULL_POINTER)
    15fc:	8b 81       	ldd	r24, Y+3	; 0x03
    15fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1600:	00 97       	sbiw	r24, 0x00	; 0
    1602:	19 f4       	brne	.+6      	; 0x160a <Timer_Get_TickTime+0x24>
	{
		Local_uint8_ErrorStatus = ERROR_NOK;   /*Error Status : Error*/
    1604:	81 e0       	ldi	r24, 0x01	; 1
    1606:	89 83       	std	Y+1, r24	; 0x01
    1608:	a6 c0       	rjmp	.+332    	; 0x1756 <Timer_Get_TickTime+0x170>
	}
	else
	{
		switch(Copy_uint8_TimerChannel)
    160a:	8a 81       	ldd	r24, Y+2	; 0x02
    160c:	28 2f       	mov	r18, r24
    160e:	30 e0       	ldi	r19, 0x00	; 0
    1610:	3e 83       	std	Y+6, r19	; 0x06
    1612:	2d 83       	std	Y+5, r18	; 0x05
    1614:	8d 81       	ldd	r24, Y+5	; 0x05
    1616:	9e 81       	ldd	r25, Y+6	; 0x06
    1618:	00 97       	sbiw	r24, 0x00	; 0
    161a:	39 f0       	breq	.+14     	; 0x162a <Timer_Get_TickTime+0x44>
    161c:	2d 81       	ldd	r18, Y+5	; 0x05
    161e:	3e 81       	ldd	r19, Y+6	; 0x06
    1620:	21 30       	cpi	r18, 0x01	; 1
    1622:	31 05       	cpc	r19, r1
    1624:	09 f4       	brne	.+2      	; 0x1628 <Timer_Get_TickTime+0x42>
    1626:	4b c0       	rjmp	.+150    	; 0x16be <Timer_Get_TickTime+0xd8>
    1628:	94 c0       	rjmp	.+296    	; 0x1752 <Timer_Get_TickTime+0x16c>
		{
			case TIMER0 :
				if(GSA_uint8_Prescaler_Timer[TIMER0] == F_CPU_CLOCK_TIMER_0)
    162a:	80 91 7c 00 	lds	r24, 0x007C
    162e:	81 30       	cpi	r24, 0x01	; 1
    1630:	39 f4       	brne	.+14     	; 0x1640 <Timer_Get_TickTime+0x5a>
				{
					*Copy_uint8Ptr_TimerTickTime = TICKTIME_SYSTEM_CLOCK_US;   /*Pre Scaler = System Clock*/
    1632:	eb 81       	ldd	r30, Y+3	; 0x03
    1634:	fc 81       	ldd	r31, Y+4	; 0x04
    1636:	10 82       	st	Z, r1
    1638:	11 82       	std	Z+1, r1	; 0x01
    163a:	12 82       	std	Z+2, r1	; 0x02
    163c:	13 82       	std	Z+3, r1	; 0x03
    163e:	8b c0       	rjmp	.+278    	; 0x1756 <Timer_Get_TickTime+0x170>
				}
				else if(GSA_uint8_Prescaler_Timer[TIMER0] == F_CPU_CLOCK_8_TIMER_0)
    1640:	80 91 7c 00 	lds	r24, 0x007C
    1644:	82 30       	cpi	r24, 0x02	; 2
    1646:	59 f4       	brne	.+22     	; 0x165e <Timer_Get_TickTime+0x78>
				{
					*Copy_uint8Ptr_TimerTickTime = TICKTIME_8_US;   /*Pre Scaler = System Clock/8 */
    1648:	eb 81       	ldd	r30, Y+3	; 0x03
    164a:	fc 81       	ldd	r31, Y+4	; 0x04
    164c:	81 e0       	ldi	r24, 0x01	; 1
    164e:	90 e0       	ldi	r25, 0x00	; 0
    1650:	a0 e0       	ldi	r26, 0x00	; 0
    1652:	b0 e0       	ldi	r27, 0x00	; 0
    1654:	80 83       	st	Z, r24
    1656:	91 83       	std	Z+1, r25	; 0x01
    1658:	a2 83       	std	Z+2, r26	; 0x02
    165a:	b3 83       	std	Z+3, r27	; 0x03
    165c:	7c c0       	rjmp	.+248    	; 0x1756 <Timer_Get_TickTime+0x170>
				}
				else if(GSA_uint8_Prescaler_Timer[TIMER0] == F_CPU_CLOCK_64_TIMER_0)
    165e:	80 91 7c 00 	lds	r24, 0x007C
    1662:	83 30       	cpi	r24, 0x03	; 3
    1664:	59 f4       	brne	.+22     	; 0x167c <Timer_Get_TickTime+0x96>
				{
					*Copy_uint8Ptr_TimerTickTime = TICKTIME_64_US;   /*Pre Scaler = System Clock/64 */
    1666:	eb 81       	ldd	r30, Y+3	; 0x03
    1668:	fc 81       	ldd	r31, Y+4	; 0x04
    166a:	88 e0       	ldi	r24, 0x08	; 8
    166c:	90 e0       	ldi	r25, 0x00	; 0
    166e:	a0 e0       	ldi	r26, 0x00	; 0
    1670:	b0 e0       	ldi	r27, 0x00	; 0
    1672:	80 83       	st	Z, r24
    1674:	91 83       	std	Z+1, r25	; 0x01
    1676:	a2 83       	std	Z+2, r26	; 0x02
    1678:	b3 83       	std	Z+3, r27	; 0x03
    167a:	6d c0       	rjmp	.+218    	; 0x1756 <Timer_Get_TickTime+0x170>
				}
				else if(GSA_uint8_Prescaler_Timer[TIMER0] == F_CPU_CLOCK_256_TIMER_0)
    167c:	80 91 7c 00 	lds	r24, 0x007C
    1680:	84 30       	cpi	r24, 0x04	; 4
    1682:	59 f4       	brne	.+22     	; 0x169a <Timer_Get_TickTime+0xb4>
				{
					*Copy_uint8Ptr_TimerTickTime = TICKTIME_256_US;   /*Pre Scaler = System Clock/256 */
    1684:	eb 81       	ldd	r30, Y+3	; 0x03
    1686:	fc 81       	ldd	r31, Y+4	; 0x04
    1688:	80 e2       	ldi	r24, 0x20	; 32
    168a:	90 e0       	ldi	r25, 0x00	; 0
    168c:	a0 e0       	ldi	r26, 0x00	; 0
    168e:	b0 e0       	ldi	r27, 0x00	; 0
    1690:	80 83       	st	Z, r24
    1692:	91 83       	std	Z+1, r25	; 0x01
    1694:	a2 83       	std	Z+2, r26	; 0x02
    1696:	b3 83       	std	Z+3, r27	; 0x03
    1698:	5e c0       	rjmp	.+188    	; 0x1756 <Timer_Get_TickTime+0x170>
				}
				else if(GSA_uint8_Prescaler_Timer[TIMER0] == F_CPU_CLOCK_1024_TIMER_0)
    169a:	80 91 7c 00 	lds	r24, 0x007C
    169e:	85 30       	cpi	r24, 0x05	; 5
    16a0:	59 f4       	brne	.+22     	; 0x16b8 <Timer_Get_TickTime+0xd2>
				{
					*Copy_uint8Ptr_TimerTickTime = TICKTIME_1024_US;   /*Pre Scaler = System Clock/1024 */
    16a2:	eb 81       	ldd	r30, Y+3	; 0x03
    16a4:	fc 81       	ldd	r31, Y+4	; 0x04
    16a6:	8d e7       	ldi	r24, 0x7D	; 125
    16a8:	90 e0       	ldi	r25, 0x00	; 0
    16aa:	a0 e0       	ldi	r26, 0x00	; 0
    16ac:	b0 e0       	ldi	r27, 0x00	; 0
    16ae:	80 83       	st	Z, r24
    16b0:	91 83       	std	Z+1, r25	; 0x01
    16b2:	a2 83       	std	Z+2, r26	; 0x02
    16b4:	b3 83       	std	Z+3, r27	; 0x03
    16b6:	4f c0       	rjmp	.+158    	; 0x1756 <Timer_Get_TickTime+0x170>
				}
				else
				{
					Local_uint8_ErrorStatus = ERROR_NOK;   /*Error Status : Error*/
    16b8:	81 e0       	ldi	r24, 0x01	; 1
    16ba:	89 83       	std	Y+1, r24	; 0x01
    16bc:	4c c0       	rjmp	.+152    	; 0x1756 <Timer_Get_TickTime+0x170>
				}
				break;
			case TIMER1 :
				if(GSA_uint8_Prescaler_Timer[TIMER1] == F_CPU_CLOCK_TIMER_1)
    16be:	80 91 7d 00 	lds	r24, 0x007D
    16c2:	81 30       	cpi	r24, 0x01	; 1
    16c4:	39 f4       	brne	.+14     	; 0x16d4 <Timer_Get_TickTime+0xee>
				{
					*Copy_uint8Ptr_TimerTickTime = TICKTIME_SYSTEM_CLOCK_US;   /*Pre Scaler = System Clock*/
    16c6:	eb 81       	ldd	r30, Y+3	; 0x03
    16c8:	fc 81       	ldd	r31, Y+4	; 0x04
    16ca:	10 82       	st	Z, r1
    16cc:	11 82       	std	Z+1, r1	; 0x01
    16ce:	12 82       	std	Z+2, r1	; 0x02
    16d0:	13 82       	std	Z+3, r1	; 0x03
    16d2:	41 c0       	rjmp	.+130    	; 0x1756 <Timer_Get_TickTime+0x170>
				}
				else if(GSA_uint8_Prescaler_Timer[TIMER1] == F_CPU_CLOCK_8_TIMER_1)
    16d4:	80 91 7d 00 	lds	r24, 0x007D
    16d8:	82 30       	cpi	r24, 0x02	; 2
    16da:	59 f4       	brne	.+22     	; 0x16f2 <Timer_Get_TickTime+0x10c>
				{
					*Copy_uint8Ptr_TimerTickTime = TICKTIME_8_US;   /*Pre Scaler = System Clock/8 */
    16dc:	eb 81       	ldd	r30, Y+3	; 0x03
    16de:	fc 81       	ldd	r31, Y+4	; 0x04
    16e0:	81 e0       	ldi	r24, 0x01	; 1
    16e2:	90 e0       	ldi	r25, 0x00	; 0
    16e4:	a0 e0       	ldi	r26, 0x00	; 0
    16e6:	b0 e0       	ldi	r27, 0x00	; 0
    16e8:	80 83       	st	Z, r24
    16ea:	91 83       	std	Z+1, r25	; 0x01
    16ec:	a2 83       	std	Z+2, r26	; 0x02
    16ee:	b3 83       	std	Z+3, r27	; 0x03
    16f0:	32 c0       	rjmp	.+100    	; 0x1756 <Timer_Get_TickTime+0x170>
				}
				else if(GSA_uint8_Prescaler_Timer[TIMER1] == F_CPU_CLOCK_64_TIMER_1)
    16f2:	80 91 7d 00 	lds	r24, 0x007D
    16f6:	83 30       	cpi	r24, 0x03	; 3
    16f8:	59 f4       	brne	.+22     	; 0x1710 <Timer_Get_TickTime+0x12a>
				{
					*Copy_uint8Ptr_TimerTickTime = TICKTIME_64_US;   /*Pre Scaler = System Clock/64 */
    16fa:	eb 81       	ldd	r30, Y+3	; 0x03
    16fc:	fc 81       	ldd	r31, Y+4	; 0x04
    16fe:	88 e0       	ldi	r24, 0x08	; 8
    1700:	90 e0       	ldi	r25, 0x00	; 0
    1702:	a0 e0       	ldi	r26, 0x00	; 0
    1704:	b0 e0       	ldi	r27, 0x00	; 0
    1706:	80 83       	st	Z, r24
    1708:	91 83       	std	Z+1, r25	; 0x01
    170a:	a2 83       	std	Z+2, r26	; 0x02
    170c:	b3 83       	std	Z+3, r27	; 0x03
    170e:	23 c0       	rjmp	.+70     	; 0x1756 <Timer_Get_TickTime+0x170>
				}
				else if(GSA_uint8_Prescaler_Timer[TIMER1] == F_CPU_CLOCK_256_TIMER_1)
    1710:	80 91 7d 00 	lds	r24, 0x007D
    1714:	84 30       	cpi	r24, 0x04	; 4
    1716:	59 f4       	brne	.+22     	; 0x172e <Timer_Get_TickTime+0x148>
				{
					*Copy_uint8Ptr_TimerTickTime = TICKTIME_256_US;   /*Pre Scaler = System Clock/256 */
    1718:	eb 81       	ldd	r30, Y+3	; 0x03
    171a:	fc 81       	ldd	r31, Y+4	; 0x04
    171c:	80 e2       	ldi	r24, 0x20	; 32
    171e:	90 e0       	ldi	r25, 0x00	; 0
    1720:	a0 e0       	ldi	r26, 0x00	; 0
    1722:	b0 e0       	ldi	r27, 0x00	; 0
    1724:	80 83       	st	Z, r24
    1726:	91 83       	std	Z+1, r25	; 0x01
    1728:	a2 83       	std	Z+2, r26	; 0x02
    172a:	b3 83       	std	Z+3, r27	; 0x03
    172c:	14 c0       	rjmp	.+40     	; 0x1756 <Timer_Get_TickTime+0x170>
				}
				else if(GSA_uint8_Prescaler_Timer[TIMER1] == F_CPU_CLOCK_1024_TIMER_1)
    172e:	80 91 7d 00 	lds	r24, 0x007D
    1732:	85 30       	cpi	r24, 0x05	; 5
    1734:	59 f4       	brne	.+22     	; 0x174c <Timer_Get_TickTime+0x166>
				{
					*Copy_uint8Ptr_TimerTickTime = TICKTIME_1024_US;   /*Pre Scaler = System Clock/1024 */
    1736:	eb 81       	ldd	r30, Y+3	; 0x03
    1738:	fc 81       	ldd	r31, Y+4	; 0x04
    173a:	8d e7       	ldi	r24, 0x7D	; 125
    173c:	90 e0       	ldi	r25, 0x00	; 0
    173e:	a0 e0       	ldi	r26, 0x00	; 0
    1740:	b0 e0       	ldi	r27, 0x00	; 0
    1742:	80 83       	st	Z, r24
    1744:	91 83       	std	Z+1, r25	; 0x01
    1746:	a2 83       	std	Z+2, r26	; 0x02
    1748:	b3 83       	std	Z+3, r27	; 0x03
    174a:	05 c0       	rjmp	.+10     	; 0x1756 <Timer_Get_TickTime+0x170>
				}
				else
				{
					Local_uint8_ErrorStatus = ERROR_NOK;   /*Error Status : Error*/
    174c:	81 e0       	ldi	r24, 0x01	; 1
    174e:	89 83       	std	Y+1, r24	; 0x01
    1750:	02 c0       	rjmp	.+4      	; 0x1756 <Timer_Get_TickTime+0x170>
				}
				break;
			default:
				Local_uint8_ErrorStatus = ERROR_NOK;     /*Error Status : Error*/
    1752:	81 e0       	ldi	r24, 0x01	; 1
    1754:	89 83       	std	Y+1, r24	; 0x01
		}
	}

		return Local_uint8_ErrorStatus; /*Return Error Status*/
    1756:	89 81       	ldd	r24, Y+1	; 0x01
}
    1758:	26 96       	adiw	r28, 0x06	; 6
    175a:	0f b6       	in	r0, 0x3f	; 63
    175c:	f8 94       	cli
    175e:	de bf       	out	0x3e, r29	; 62
    1760:	0f be       	out	0x3f, r0	; 63
    1762:	cd bf       	out	0x3d, r28	; 61
    1764:	cf 91       	pop	r28
    1766:	df 91       	pop	r29
    1768:	08 95       	ret

0000176a <Timer_Get_FlagStatus>:
/*Description: Get Timer Flag Status
 * Input     : Timer Channel(Timer Channel (Timer0 or Timer1 or Timer2), *FlagStatus (Pointer to Flag)
 * Output    : Error Checking
 *_______________________________________________________________________________________________________________________________*/
extern uint8_t Timer_Get_FlagStatus(uint8_t Copy_uint8_TimerChannel, uint8_t *Copy_uint8Ptr_FlagStatus)
{
    176a:	df 93       	push	r29
    176c:	cf 93       	push	r28
    176e:	00 d0       	rcall	.+0      	; 0x1770 <Timer_Get_FlagStatus+0x6>
    1770:	00 d0       	rcall	.+0      	; 0x1772 <Timer_Get_FlagStatus+0x8>
    1772:	00 d0       	rcall	.+0      	; 0x1774 <Timer_Get_FlagStatus+0xa>
    1774:	cd b7       	in	r28, 0x3d	; 61
    1776:	de b7       	in	r29, 0x3e	; 62
    1778:	8a 83       	std	Y+2, r24	; 0x02
    177a:	7c 83       	std	Y+4, r23	; 0x04
    177c:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t Local_uint8_ErrorStatus = ERROR_OK;        /*Error status : No Error */
    177e:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_uint8Ptr_FlagStatus == NULL_POINTER)       /*Check if pointer points to NULL*/
    1780:	8b 81       	ldd	r24, Y+3	; 0x03
    1782:	9c 81       	ldd	r25, Y+4	; 0x04
    1784:	00 97       	sbiw	r24, 0x00	; 0
    1786:	11 f4       	brne	.+4      	; 0x178c <Timer_Get_FlagStatus+0x22>
	{
		Local_uint8_ErrorStatus = ERROR_NOK;
    1788:	81 e0       	ldi	r24, 0x01	; 1
    178a:	89 83       	std	Y+1, r24	; 0x01
	}
	switch(Copy_uint8_TimerChannel)
    178c:	8a 81       	ldd	r24, Y+2	; 0x02
    178e:	28 2f       	mov	r18, r24
    1790:	30 e0       	ldi	r19, 0x00	; 0
    1792:	3e 83       	std	Y+6, r19	; 0x06
    1794:	2d 83       	std	Y+5, r18	; 0x05
    1796:	8d 81       	ldd	r24, Y+5	; 0x05
    1798:	9e 81       	ldd	r25, Y+6	; 0x06
    179a:	00 97       	sbiw	r24, 0x00	; 0
    179c:	31 f0       	breq	.+12     	; 0x17aa <Timer_Get_FlagStatus+0x40>
    179e:	2d 81       	ldd	r18, Y+5	; 0x05
    17a0:	3e 81       	ldd	r19, Y+6	; 0x06
    17a2:	21 30       	cpi	r18, 0x01	; 1
    17a4:	31 05       	cpc	r19, r1
    17a6:	51 f0       	breq	.+20     	; 0x17bc <Timer_Get_FlagStatus+0x52>
    17a8:	13 c0       	rjmp	.+38     	; 0x17d0 <Timer_Get_FlagStatus+0x66>
	{
		case TIMER0 :
			/**Copy_uint8Ptr_FlagStatus = GET_BIT(TIMER0_INTERRUPT_FLAG_REGISTER,TIMER0_INTERRUPT_OVERFLOW_FLAG_BIT);*/ /*Read Flag*/
			*Copy_uint8Ptr_FlagStatus = GET_BIT(TIMER0_INTERRUPT_FLAG_REGISTER,TIMER0_INTERRUPT_COMPARE_MATCH_FLAG_BIT);
    17aa:	e8 e5       	ldi	r30, 0x58	; 88
    17ac:	f0 e0       	ldi	r31, 0x00	; 0
    17ae:	80 81       	ld	r24, Z
    17b0:	86 95       	lsr	r24
    17b2:	81 70       	andi	r24, 0x01	; 1
    17b4:	eb 81       	ldd	r30, Y+3	; 0x03
    17b6:	fc 81       	ldd	r31, Y+4	; 0x04
    17b8:	80 83       	st	Z, r24
    17ba:	0c c0       	rjmp	.+24     	; 0x17d4 <Timer_Get_FlagStatus+0x6a>
			break;
		case TIMER1 :
			*Copy_uint8Ptr_FlagStatus = GET_BIT(TIMER1_INTERRUPT_FLAG_REGISTER,TIMER1_INTERRUPT_OVERFLOW_FLAG_BIT); /*Read Flag*/
    17bc:	e8 e5       	ldi	r30, 0x58	; 88
    17be:	f0 e0       	ldi	r31, 0x00	; 0
    17c0:	80 81       	ld	r24, Z
    17c2:	86 95       	lsr	r24
    17c4:	86 95       	lsr	r24
    17c6:	81 70       	andi	r24, 0x01	; 1
    17c8:	eb 81       	ldd	r30, Y+3	; 0x03
    17ca:	fc 81       	ldd	r31, Y+4	; 0x04
    17cc:	80 83       	st	Z, r24
    17ce:	02 c0       	rjmp	.+4      	; 0x17d4 <Timer_Get_FlagStatus+0x6a>
			break;
		default:
			Local_uint8_ErrorStatus = ERROR_NOK;  /*Error status : Error */
    17d0:	81 e0       	ldi	r24, 0x01	; 1
    17d2:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_uint8_ErrorStatus;  /*Return Error*/
    17d4:	89 81       	ldd	r24, Y+1	; 0x01
}
    17d6:	26 96       	adiw	r28, 0x06	; 6
    17d8:	0f b6       	in	r0, 0x3f	; 63
    17da:	f8 94       	cli
    17dc:	de bf       	out	0x3e, r29	; 62
    17de:	0f be       	out	0x3f, r0	; 63
    17e0:	cd bf       	out	0x3d, r28	; 61
    17e2:	cf 91       	pop	r28
    17e4:	df 91       	pop	r29
    17e6:	08 95       	ret

000017e8 <TIMER_SetCallBack>:

uint8_t TIMER_SetCallBack(uint8_t Copy_uint8_TimerChannel,void (*Copy_FunctionAddress)(void))
{
    17e8:	df 93       	push	r29
    17ea:	cf 93       	push	r28
    17ec:	00 d0       	rcall	.+0      	; 0x17ee <TIMER_SetCallBack+0x6>
    17ee:	00 d0       	rcall	.+0      	; 0x17f0 <TIMER_SetCallBack+0x8>
    17f0:	cd b7       	in	r28, 0x3d	; 61
    17f2:	de b7       	in	r29, 0x3e	; 62
    17f4:	8a 83       	std	Y+2, r24	; 0x02
    17f6:	7c 83       	std	Y+4, r23	; 0x04
    17f8:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t Local_u8ErrorState=0;              //Error State: No Error
    17fa:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_FunctionAddress==NULL_POINTER) //check if pointer points to Nothing
    17fc:	8b 81       	ldd	r24, Y+3	; 0x03
    17fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1800:	00 97       	sbiw	r24, 0x00	; 0
    1802:	19 f4       	brne	.+6      	; 0x180a <TIMER_SetCallBack+0x22>
	{
		Local_u8ErrorState=1;             //Error State : Error
    1804:	81 e0       	ldi	r24, 0x01	; 1
    1806:	89 83       	std	Y+1, r24	; 0x01
    1808:	0e c0       	rjmp	.+28     	; 0x1826 <TIMER_SetCallBack+0x3e>
	}
	else
	{
		switch(Copy_uint8_TimerChannel)                   //Switch on INT
    180a:	8a 81       	ldd	r24, Y+2	; 0x02
    180c:	88 2f       	mov	r24, r24
    180e:	90 e0       	ldi	r25, 0x00	; 0
    1810:	00 97       	sbiw	r24, 0x00	; 0
    1812:	39 f4       	brne	.+14     	; 0x1822 <TIMER_SetCallBack+0x3a>
		{
			case TIMER0 :                                 //In Case INT0
				TIMER0_CallBack =Copy_FunctionAddress;//Send Function Address To Call Back pointer
    1814:	8b 81       	ldd	r24, Y+3	; 0x03
    1816:	9c 81       	ldd	r25, Y+4	; 0x04
    1818:	90 93 7b 00 	sts	0x007B, r25
    181c:	80 93 7a 00 	sts	0x007A, r24
    1820:	02 c0       	rjmp	.+4      	; 0x1826 <TIMER_SetCallBack+0x3e>
				break;
			default :
				Local_u8ErrorState=1;  //Error State : Error
    1822:	81 e0       	ldi	r24, 0x01	; 1
    1824:	89 83       	std	Y+1, r24	; 0x01
				break;

		}
	}
	return Local_u8ErrorState; //Return Error State
    1826:	89 81       	ldd	r24, Y+1	; 0x01
}
    1828:	0f 90       	pop	r0
    182a:	0f 90       	pop	r0
    182c:	0f 90       	pop	r0
    182e:	0f 90       	pop	r0
    1830:	cf 91       	pop	r28
    1832:	df 91       	pop	r29
    1834:	08 95       	ret

00001836 <__vector_10>:
void __vector_10(void)
{
    1836:	1f 92       	push	r1
    1838:	0f 92       	push	r0
    183a:	0f b6       	in	r0, 0x3f	; 63
    183c:	0f 92       	push	r0
    183e:	11 24       	eor	r1, r1
    1840:	2f 93       	push	r18
    1842:	3f 93       	push	r19
    1844:	4f 93       	push	r20
    1846:	5f 93       	push	r21
    1848:	6f 93       	push	r22
    184a:	7f 93       	push	r23
    184c:	8f 93       	push	r24
    184e:	9f 93       	push	r25
    1850:	af 93       	push	r26
    1852:	bf 93       	push	r27
    1854:	ef 93       	push	r30
    1856:	ff 93       	push	r31
    1858:	df 93       	push	r29
    185a:	cf 93       	push	r28
    185c:	cd b7       	in	r28, 0x3d	; 61
    185e:	de b7       	in	r29, 0x3e	; 62
	if(TIMER0_CallBack!=0)
    1860:	80 91 7a 00 	lds	r24, 0x007A
    1864:	90 91 7b 00 	lds	r25, 0x007B
    1868:	00 97       	sbiw	r24, 0x00	; 0
    186a:	29 f0       	breq	.+10     	; 0x1876 <__vector_10+0x40>
	{
		TIMER0_CallBack();
    186c:	e0 91 7a 00 	lds	r30, 0x007A
    1870:	f0 91 7b 00 	lds	r31, 0x007B
    1874:	09 95       	icall
	}
}
    1876:	cf 91       	pop	r28
    1878:	df 91       	pop	r29
    187a:	ff 91       	pop	r31
    187c:	ef 91       	pop	r30
    187e:	bf 91       	pop	r27
    1880:	af 91       	pop	r26
    1882:	9f 91       	pop	r25
    1884:	8f 91       	pop	r24
    1886:	7f 91       	pop	r23
    1888:	6f 91       	pop	r22
    188a:	5f 91       	pop	r21
    188c:	4f 91       	pop	r20
    188e:	3f 91       	pop	r19
    1890:	2f 91       	pop	r18
    1892:	0f 90       	pop	r0
    1894:	0f be       	out	0x3f, r0	; 63
    1896:	0f 90       	pop	r0
    1898:	1f 90       	pop	r1
    189a:	18 95       	reti

0000189c <Sleep_PowerSaveMode>:
#include "SleepModes.h"



extern void Sleep_PowerSaveMode(void)
{
    189c:	df 93       	push	r29
    189e:	cf 93       	push	r28
    18a0:	cd b7       	in	r28, 0x3d	; 61
    18a2:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(MCUCR,SM0);
    18a4:	a5 e5       	ldi	r26, 0x55	; 85
    18a6:	b0 e0       	ldi	r27, 0x00	; 0
    18a8:	e5 e5       	ldi	r30, 0x55	; 85
    18aa:	f0 e0       	ldi	r31, 0x00	; 0
    18ac:	80 81       	ld	r24, Z
    18ae:	80 61       	ori	r24, 0x10	; 16
    18b0:	8c 93       	st	X, r24
	SET_BIT(MCUCR,SM1);
    18b2:	a5 e5       	ldi	r26, 0x55	; 85
    18b4:	b0 e0       	ldi	r27, 0x00	; 0
    18b6:	e5 e5       	ldi	r30, 0x55	; 85
    18b8:	f0 e0       	ldi	r31, 0x00	; 0
    18ba:	80 81       	ld	r24, Z
    18bc:	80 62       	ori	r24, 0x20	; 32
    18be:	8c 93       	st	X, r24
	SET_BIT(MCUCR,SE);
    18c0:	a5 e5       	ldi	r26, 0x55	; 85
    18c2:	b0 e0       	ldi	r27, 0x00	; 0
    18c4:	e5 e5       	ldi	r30, 0x55	; 85
    18c6:	f0 e0       	ldi	r31, 0x00	; 0
    18c8:	80 81       	ld	r24, Z
    18ca:	80 68       	ori	r24, 0x80	; 128
    18cc:	8c 93       	st	X, r24
}
    18ce:	cf 91       	pop	r28
    18d0:	df 91       	pop	r29
    18d2:	08 95       	ret

000018d4 <DIO_u8Init_PORT>:
/*Description: Set PORT Direction (INPUT or OUTPUT)
 * Input     : Copy_u8PortNB (PORT Number) ,  Copy_u8Dir (PORT Direction)
 * Output    : Return Error Status (Error or NO Error)
 * */
extern uint8_t DIO_u8Init_PORT(uint8_t Copy_u8PortNB,uint8_t Copy_u8Dir)
{
    18d4:	df 93       	push	r29
    18d6:	cf 93       	push	r28
    18d8:	00 d0       	rcall	.+0      	; 0x18da <DIO_u8Init_PORT+0x6>
    18da:	00 d0       	rcall	.+0      	; 0x18dc <DIO_u8Init_PORT+0x8>
    18dc:	0f 92       	push	r0
    18de:	cd b7       	in	r28, 0x3d	; 61
    18e0:	de b7       	in	r29, 0x3e	; 62
    18e2:	8a 83       	std	Y+2, r24	; 0x02
    18e4:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t Local_u8Error=NO_ERROR;          /*Local Error State*/
    18e6:	19 82       	std	Y+1, r1	; 0x01
	{
		Local_u8Error=ERROR; /*Error Status : Error*/
	}
	else
	{	
		switch (Copy_u8PortNB)       /*Switch case on PORT Number*/
    18e8:	8a 81       	ldd	r24, Y+2	; 0x02
    18ea:	28 2f       	mov	r18, r24
    18ec:	30 e0       	ldi	r19, 0x00	; 0
    18ee:	3d 83       	std	Y+5, r19	; 0x05
    18f0:	2c 83       	std	Y+4, r18	; 0x04
    18f2:	8c 81       	ldd	r24, Y+4	; 0x04
    18f4:	9d 81       	ldd	r25, Y+5	; 0x05
    18f6:	81 30       	cpi	r24, 0x01	; 1
    18f8:	91 05       	cpc	r25, r1
    18fa:	d1 f0       	breq	.+52     	; 0x1930 <DIO_u8Init_PORT+0x5c>
    18fc:	2c 81       	ldd	r18, Y+4	; 0x04
    18fe:	3d 81       	ldd	r19, Y+5	; 0x05
    1900:	22 30       	cpi	r18, 0x02	; 2
    1902:	31 05       	cpc	r19, r1
    1904:	2c f4       	brge	.+10     	; 0x1910 <DIO_u8Init_PORT+0x3c>
    1906:	8c 81       	ldd	r24, Y+4	; 0x04
    1908:	9d 81       	ldd	r25, Y+5	; 0x05
    190a:	00 97       	sbiw	r24, 0x00	; 0
    190c:	61 f0       	breq	.+24     	; 0x1926 <DIO_u8Init_PORT+0x52>
    190e:	1f c0       	rjmp	.+62     	; 0x194e <DIO_u8Init_PORT+0x7a>
    1910:	2c 81       	ldd	r18, Y+4	; 0x04
    1912:	3d 81       	ldd	r19, Y+5	; 0x05
    1914:	22 30       	cpi	r18, 0x02	; 2
    1916:	31 05       	cpc	r19, r1
    1918:	81 f0       	breq	.+32     	; 0x193a <DIO_u8Init_PORT+0x66>
    191a:	8c 81       	ldd	r24, Y+4	; 0x04
    191c:	9d 81       	ldd	r25, Y+5	; 0x05
    191e:	83 30       	cpi	r24, 0x03	; 3
    1920:	91 05       	cpc	r25, r1
    1922:	81 f0       	breq	.+32     	; 0x1944 <DIO_u8Init_PORT+0x70>
    1924:	14 c0       	rjmp	.+40     	; 0x194e <DIO_u8Init_PORT+0x7a>
		{
			case DIO_PORT_0 :            /*InCase PORTA*/
				DIRECTION_PORT0 = Copy_u8Dir;    /*PORTA DATA Direction*/
    1926:	ea e3       	ldi	r30, 0x3A	; 58
    1928:	f0 e0       	ldi	r31, 0x00	; 0
    192a:	8b 81       	ldd	r24, Y+3	; 0x03
    192c:	80 83       	st	Z, r24
    192e:	11 c0       	rjmp	.+34     	; 0x1952 <DIO_u8Init_PORT+0x7e>
					break;
			case DIO_PORT_1 :            /*InCase PORTB*/
				DIRECTION_PORT1 = Copy_u8Dir;    /*PORTB DATA Direction*/
    1930:	e7 e3       	ldi	r30, 0x37	; 55
    1932:	f0 e0       	ldi	r31, 0x00	; 0
    1934:	8b 81       	ldd	r24, Y+3	; 0x03
    1936:	80 83       	st	Z, r24
    1938:	0c c0       	rjmp	.+24     	; 0x1952 <DIO_u8Init_PORT+0x7e>
					break;
			case DIO_PORT_2 :            /*InCase PORTC*/
				DIRECTION_PORT2 = Copy_u8Dir;    /*PORTC DATA Direction*/
    193a:	e4 e3       	ldi	r30, 0x34	; 52
    193c:	f0 e0       	ldi	r31, 0x00	; 0
    193e:	8b 81       	ldd	r24, Y+3	; 0x03
    1940:	80 83       	st	Z, r24
    1942:	07 c0       	rjmp	.+14     	; 0x1952 <DIO_u8Init_PORT+0x7e>
					break;
			case DIO_PORT_3 :            /*InCase PORTD*/
				DIRECTION_PORT3 = Copy_u8Dir;    /*PORTD DATA Direction*/
    1944:	e1 e3       	ldi	r30, 0x31	; 49
    1946:	f0 e0       	ldi	r31, 0x00	; 0
    1948:	8b 81       	ldd	r24, Y+3	; 0x03
    194a:	80 83       	st	Z, r24
    194c:	02 c0       	rjmp	.+4      	; 0x1952 <DIO_u8Init_PORT+0x7e>
					break;
			default :                   /*Other Case Wrong PORT NO*/
					Local_u8Error=ERROR;    /*Error Flag*/
    194e:	81 e0       	ldi	r24, 0x01	; 1
    1950:	89 83       	std	Y+1, r24	; 0x01
					break;
		}
	}
	/*Return Error State*/
	return Local_u8Error;    /*if ERROR exist it return 1 if NO ERROR return 0*/
    1952:	89 81       	ldd	r24, Y+1	; 0x01
}
    1954:	0f 90       	pop	r0
    1956:	0f 90       	pop	r0
    1958:	0f 90       	pop	r0
    195a:	0f 90       	pop	r0
    195c:	0f 90       	pop	r0
    195e:	cf 91       	pop	r28
    1960:	df 91       	pop	r29
    1962:	08 95       	ret

00001964 <DIO_u8Init_PIN>:
/*Description: Set PIN Direction (INPUT or OUTPUT)
 * Input     :Copy_u8PinNB (PIN Number) ,  Copy_u8Dir (PIN Direction)
 * Output    : Return Error Status (Error or NO Error)
 * */
extern uint8_t DIO_u8Init_PIN(uint8_t Copy_u8PinN,uint8_t Copy_u8Dir)
{
    1964:	df 93       	push	r29
    1966:	cf 93       	push	r28
    1968:	00 d0       	rcall	.+0      	; 0x196a <DIO_u8Init_PIN+0x6>
    196a:	0f 92       	push	r0
    196c:	cd b7       	in	r28, 0x3d	; 61
    196e:	de b7       	in	r29, 0x3e	; 62
    1970:	8a 83       	std	Y+2, r24	; 0x02
    1972:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t Local_u8Error=NO_ERROR;              /*Local Error State*/
    1974:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8PinN > MAX_PIN_NO)     /*Check if Entered PIN NO. is more Than 7*/
    1976:	8a 81       	ldd	r24, Y+2	; 0x02
    1978:	80 32       	cpi	r24, 0x20	; 32
    197a:	18 f0       	brcs	.+6      	; 0x1982 <DIO_u8Init_PIN+0x1e>
	{
		Local_u8Error=ERROR;            /*Return ERROR*/
    197c:	81 e0       	ldi	r24, 0x01	; 1
    197e:	89 83       	std	Y+1, r24	; 0x01
    1980:	b4 c0       	rjmp	.+360    	; 0x1aea <DIO_u8Init_PIN+0x186>
	}
	else if(Copy_u8Dir != DIO_INPUT && Copy_u8Dir != DIO_OUTPUT) /*Check if entered PIN Direction is not INPUT or OUTPUT*/
    1982:	8b 81       	ldd	r24, Y+3	; 0x03
    1984:	88 23       	and	r24, r24
    1986:	31 f0       	breq	.+12     	; 0x1994 <DIO_u8Init_PIN+0x30>
    1988:	8b 81       	ldd	r24, Y+3	; 0x03
    198a:	81 30       	cpi	r24, 0x01	; 1
    198c:	19 f0       	breq	.+6      	; 0x1994 <DIO_u8Init_PIN+0x30>
	{
		Local_u8Error=ERROR;           /*Return ERROR*/
    198e:	81 e0       	ldi	r24, 0x01	; 1
    1990:	89 83       	std	Y+1, r24	; 0x01
    1992:	ab c0       	rjmp	.+342    	; 0x1aea <DIO_u8Init_PIN+0x186>
	}
	else                          /*Entered PIN NO is not more than 7 and Direction is INPUT or OUTPUT*/
	{
		if(Copy_u8PinN>=0 && Copy_u8PinN<PIN_PER_PORT)
    1994:	8a 81       	ldd	r24, Y+2	; 0x02
    1996:	88 30       	cpi	r24, 0x08	; 8
    1998:	10 f5       	brcc	.+68     	; 0x19de <DIO_u8Init_PIN+0x7a>
		{		/*InCase PORTA*/
			ASSIGN_BIT(DIRECTION_PORT0,Copy_u8PinN,Copy_u8Dir);  /*ASSIGN PIN NO to entered Direction*/
    199a:	aa e3       	ldi	r26, 0x3A	; 58
    199c:	b0 e0       	ldi	r27, 0x00	; 0
    199e:	ea e3       	ldi	r30, 0x3A	; 58
    19a0:	f0 e0       	ldi	r31, 0x00	; 0
    19a2:	80 81       	ld	r24, Z
    19a4:	48 2f       	mov	r20, r24
    19a6:	8a 81       	ldd	r24, Y+2	; 0x02
    19a8:	28 2f       	mov	r18, r24
    19aa:	30 e0       	ldi	r19, 0x00	; 0
    19ac:	81 e0       	ldi	r24, 0x01	; 1
    19ae:	90 e0       	ldi	r25, 0x00	; 0
    19b0:	02 c0       	rjmp	.+4      	; 0x19b6 <DIO_u8Init_PIN+0x52>
    19b2:	88 0f       	add	r24, r24
    19b4:	99 1f       	adc	r25, r25
    19b6:	2a 95       	dec	r18
    19b8:	e2 f7       	brpl	.-8      	; 0x19b2 <DIO_u8Init_PIN+0x4e>
    19ba:	80 95       	com	r24
    19bc:	48 23       	and	r20, r24
    19be:	8b 81       	ldd	r24, Y+3	; 0x03
    19c0:	28 2f       	mov	r18, r24
    19c2:	30 e0       	ldi	r19, 0x00	; 0
    19c4:	8a 81       	ldd	r24, Y+2	; 0x02
    19c6:	88 2f       	mov	r24, r24
    19c8:	90 e0       	ldi	r25, 0x00	; 0
    19ca:	b9 01       	movw	r22, r18
    19cc:	02 c0       	rjmp	.+4      	; 0x19d2 <DIO_u8Init_PIN+0x6e>
    19ce:	66 0f       	add	r22, r22
    19d0:	77 1f       	adc	r23, r23
    19d2:	8a 95       	dec	r24
    19d4:	e2 f7       	brpl	.-8      	; 0x19ce <DIO_u8Init_PIN+0x6a>
    19d6:	cb 01       	movw	r24, r22
    19d8:	84 2b       	or	r24, r20
    19da:	8c 93       	st	X, r24
    19dc:	86 c0       	rjmp	.+268    	; 0x1aea <DIO_u8Init_PIN+0x186>
		}
		else if(Copy_u8PinN>=PIN_PER_PORT && Copy_u8PinN<(DIO_PORT_1+1)*PIN_PER_PORT)
    19de:	8a 81       	ldd	r24, Y+2	; 0x02
    19e0:	88 30       	cpi	r24, 0x08	; 8
    19e2:	48 f1       	brcs	.+82     	; 0x1a36 <DIO_u8Init_PIN+0xd2>
    19e4:	8a 81       	ldd	r24, Y+2	; 0x02
    19e6:	80 31       	cpi	r24, 0x10	; 16
    19e8:	30 f5       	brcc	.+76     	; 0x1a36 <DIO_u8Init_PIN+0xd2>
		{
			                                /*InCase PORTB*/
				ASSIGN_BIT(DIRECTION_PORT1,(Copy_u8PinN-PIN_PER_PORT),Copy_u8Dir);      /*ASSIGN PIN NO to entered Direction*/
    19ea:	a7 e3       	ldi	r26, 0x37	; 55
    19ec:	b0 e0       	ldi	r27, 0x00	; 0
    19ee:	e7 e3       	ldi	r30, 0x37	; 55
    19f0:	f0 e0       	ldi	r31, 0x00	; 0
    19f2:	80 81       	ld	r24, Z
    19f4:	48 2f       	mov	r20, r24
    19f6:	8a 81       	ldd	r24, Y+2	; 0x02
    19f8:	88 2f       	mov	r24, r24
    19fa:	90 e0       	ldi	r25, 0x00	; 0
    19fc:	9c 01       	movw	r18, r24
    19fe:	28 50       	subi	r18, 0x08	; 8
    1a00:	30 40       	sbci	r19, 0x00	; 0
    1a02:	81 e0       	ldi	r24, 0x01	; 1
    1a04:	90 e0       	ldi	r25, 0x00	; 0
    1a06:	02 c0       	rjmp	.+4      	; 0x1a0c <DIO_u8Init_PIN+0xa8>
    1a08:	88 0f       	add	r24, r24
    1a0a:	99 1f       	adc	r25, r25
    1a0c:	2a 95       	dec	r18
    1a0e:	e2 f7       	brpl	.-8      	; 0x1a08 <DIO_u8Init_PIN+0xa4>
    1a10:	80 95       	com	r24
    1a12:	48 23       	and	r20, r24
    1a14:	8b 81       	ldd	r24, Y+3	; 0x03
    1a16:	28 2f       	mov	r18, r24
    1a18:	30 e0       	ldi	r19, 0x00	; 0
    1a1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a1c:	88 2f       	mov	r24, r24
    1a1e:	90 e0       	ldi	r25, 0x00	; 0
    1a20:	08 97       	sbiw	r24, 0x08	; 8
    1a22:	b9 01       	movw	r22, r18
    1a24:	02 c0       	rjmp	.+4      	; 0x1a2a <DIO_u8Init_PIN+0xc6>
    1a26:	66 0f       	add	r22, r22
    1a28:	77 1f       	adc	r23, r23
    1a2a:	8a 95       	dec	r24
    1a2c:	e2 f7       	brpl	.-8      	; 0x1a26 <DIO_u8Init_PIN+0xc2>
    1a2e:	cb 01       	movw	r24, r22
    1a30:	84 2b       	or	r24, r20
    1a32:	8c 93       	st	X, r24
    1a34:	5a c0       	rjmp	.+180    	; 0x1aea <DIO_u8Init_PIN+0x186>
		}
		else if(Copy_u8PinN>=2*PIN_PER_PORT && Copy_u8PinN<(DIO_PORT_2+1)*PIN_PER_PORT)
    1a36:	8a 81       	ldd	r24, Y+2	; 0x02
    1a38:	80 31       	cpi	r24, 0x10	; 16
    1a3a:	48 f1       	brcs	.+82     	; 0x1a8e <DIO_u8Init_PIN+0x12a>
    1a3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a3e:	88 31       	cpi	r24, 0x18	; 24
    1a40:	30 f5       	brcc	.+76     	; 0x1a8e <DIO_u8Init_PIN+0x12a>
		{
			                               /*InCase PORTC*/
				ASSIGN_BIT(DIRECTION_PORT2,(Copy_u8PinN-(2*PIN_PER_PORT)),Copy_u8Dir);      /*ASSIGN PIN NO to entered Direction*/
    1a42:	a4 e3       	ldi	r26, 0x34	; 52
    1a44:	b0 e0       	ldi	r27, 0x00	; 0
    1a46:	e4 e3       	ldi	r30, 0x34	; 52
    1a48:	f0 e0       	ldi	r31, 0x00	; 0
    1a4a:	80 81       	ld	r24, Z
    1a4c:	48 2f       	mov	r20, r24
    1a4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a50:	88 2f       	mov	r24, r24
    1a52:	90 e0       	ldi	r25, 0x00	; 0
    1a54:	9c 01       	movw	r18, r24
    1a56:	20 51       	subi	r18, 0x10	; 16
    1a58:	30 40       	sbci	r19, 0x00	; 0
    1a5a:	81 e0       	ldi	r24, 0x01	; 1
    1a5c:	90 e0       	ldi	r25, 0x00	; 0
    1a5e:	02 c0       	rjmp	.+4      	; 0x1a64 <DIO_u8Init_PIN+0x100>
    1a60:	88 0f       	add	r24, r24
    1a62:	99 1f       	adc	r25, r25
    1a64:	2a 95       	dec	r18
    1a66:	e2 f7       	brpl	.-8      	; 0x1a60 <DIO_u8Init_PIN+0xfc>
    1a68:	80 95       	com	r24
    1a6a:	48 23       	and	r20, r24
    1a6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a6e:	28 2f       	mov	r18, r24
    1a70:	30 e0       	ldi	r19, 0x00	; 0
    1a72:	8a 81       	ldd	r24, Y+2	; 0x02
    1a74:	88 2f       	mov	r24, r24
    1a76:	90 e0       	ldi	r25, 0x00	; 0
    1a78:	40 97       	sbiw	r24, 0x10	; 16
    1a7a:	b9 01       	movw	r22, r18
    1a7c:	02 c0       	rjmp	.+4      	; 0x1a82 <DIO_u8Init_PIN+0x11e>
    1a7e:	66 0f       	add	r22, r22
    1a80:	77 1f       	adc	r23, r23
    1a82:	8a 95       	dec	r24
    1a84:	e2 f7       	brpl	.-8      	; 0x1a7e <DIO_u8Init_PIN+0x11a>
    1a86:	cb 01       	movw	r24, r22
    1a88:	84 2b       	or	r24, r20
    1a8a:	8c 93       	st	X, r24
    1a8c:	2e c0       	rjmp	.+92     	; 0x1aea <DIO_u8Init_PIN+0x186>
		}
		else if(Copy_u8PinN>=3*PIN_PER_PORT && Copy_u8PinN<(DIO_PORT_3+1)*PIN_PER_PORT)
    1a8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a90:	88 31       	cpi	r24, 0x18	; 24
    1a92:	48 f1       	brcs	.+82     	; 0x1ae6 <DIO_u8Init_PIN+0x182>
    1a94:	8a 81       	ldd	r24, Y+2	; 0x02
    1a96:	80 32       	cpi	r24, 0x20	; 32
    1a98:	30 f5       	brcc	.+76     	; 0x1ae6 <DIO_u8Init_PIN+0x182>
		{
			                               /*InCase PORTD*/
				ASSIGN_BIT(DIRECTION_PORT3,(Copy_u8PinN-(3*PIN_PER_PORT)),Copy_u8Dir);      /*ASSIGN PIN NO to entered Direction*/
    1a9a:	a1 e3       	ldi	r26, 0x31	; 49
    1a9c:	b0 e0       	ldi	r27, 0x00	; 0
    1a9e:	e1 e3       	ldi	r30, 0x31	; 49
    1aa0:	f0 e0       	ldi	r31, 0x00	; 0
    1aa2:	80 81       	ld	r24, Z
    1aa4:	48 2f       	mov	r20, r24
    1aa6:	8a 81       	ldd	r24, Y+2	; 0x02
    1aa8:	88 2f       	mov	r24, r24
    1aaa:	90 e0       	ldi	r25, 0x00	; 0
    1aac:	9c 01       	movw	r18, r24
    1aae:	28 51       	subi	r18, 0x18	; 24
    1ab0:	30 40       	sbci	r19, 0x00	; 0
    1ab2:	81 e0       	ldi	r24, 0x01	; 1
    1ab4:	90 e0       	ldi	r25, 0x00	; 0
    1ab6:	02 c0       	rjmp	.+4      	; 0x1abc <DIO_u8Init_PIN+0x158>
    1ab8:	88 0f       	add	r24, r24
    1aba:	99 1f       	adc	r25, r25
    1abc:	2a 95       	dec	r18
    1abe:	e2 f7       	brpl	.-8      	; 0x1ab8 <DIO_u8Init_PIN+0x154>
    1ac0:	80 95       	com	r24
    1ac2:	48 23       	and	r20, r24
    1ac4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ac6:	28 2f       	mov	r18, r24
    1ac8:	30 e0       	ldi	r19, 0x00	; 0
    1aca:	8a 81       	ldd	r24, Y+2	; 0x02
    1acc:	88 2f       	mov	r24, r24
    1ace:	90 e0       	ldi	r25, 0x00	; 0
    1ad0:	48 97       	sbiw	r24, 0x18	; 24
    1ad2:	b9 01       	movw	r22, r18
    1ad4:	02 c0       	rjmp	.+4      	; 0x1ada <DIO_u8Init_PIN+0x176>
    1ad6:	66 0f       	add	r22, r22
    1ad8:	77 1f       	adc	r23, r23
    1ada:	8a 95       	dec	r24
    1adc:	e2 f7       	brpl	.-8      	; 0x1ad6 <DIO_u8Init_PIN+0x172>
    1ade:	cb 01       	movw	r24, r22
    1ae0:	84 2b       	or	r24, r20
    1ae2:	8c 93       	st	X, r24
    1ae4:	02 c0       	rjmp	.+4      	; 0x1aea <DIO_u8Init_PIN+0x186>
		}
		else
		{
			/*Other Case Wrong PORT NO*/
				Local_u8Error=ERROR;                         /*Error Flag*/
    1ae6:	81 e0       	ldi	r24, 0x01	; 1
    1ae8:	89 83       	std	Y+1, r24	; 0x01
		}			

	}

	return Local_u8Error;  /*if ERROR exist it return 1 if NO ERROR return 0*/
    1aea:	89 81       	ldd	r24, Y+1	; 0x01
}
    1aec:	0f 90       	pop	r0
    1aee:	0f 90       	pop	r0
    1af0:	0f 90       	pop	r0
    1af2:	cf 91       	pop	r28
    1af4:	df 91       	pop	r29
    1af6:	08 95       	ret

00001af8 <DIO_u8SetPortValue>:
/*Description: Set PORT Value (from 0 to 255)
 * Input     : Copy_u8PortNB (PORT Number) , Copy_u8Value (Value)
 * Output    : Return Error Status (Error or NO Error)
 * */
uint8_t DIO_u8SetPortValue(uint8_t Copy_u8PortNB,uint8_t Copy_u8Value)
{
    1af8:	df 93       	push	r29
    1afa:	cf 93       	push	r28
    1afc:	00 d0       	rcall	.+0      	; 0x1afe <DIO_u8SetPortValue+0x6>
    1afe:	00 d0       	rcall	.+0      	; 0x1b00 <DIO_u8SetPortValue+0x8>
    1b00:	0f 92       	push	r0
    1b02:	cd b7       	in	r28, 0x3d	; 61
    1b04:	de b7       	in	r29, 0x3e	; 62
    1b06:	8a 83       	std	Y+2, r24	; 0x02
    1b08:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t Local_u8Error=NO_ERROR;                 /*Local Error State*/
    1b0a:	19 82       	std	Y+1, r1	; 0x01
		
	if(Copy_u8Value < DIO_HIGH || Copy_u8Value > DIO_ALL) /*Check if entered Value is not available (negative value or more than 255(8 bit))*/
    1b0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b0e:	88 23       	and	r24, r24
    1b10:	19 f4       	brne	.+6      	; 0x1b18 <DIO_u8SetPortValue+0x20>
	{
		Local_u8Error=ERROR; /*Error Status : Error*/
    1b12:	81 e0       	ldi	r24, 0x01	; 1
    1b14:	89 83       	std	Y+1, r24	; 0x01
    1b16:	35 c0       	rjmp	.+106    	; 0x1b82 <DIO_u8SetPortValue+0x8a>
	}
	else
	{
		switch (Copy_u8PortNB)               /*Switch case on PORT Number*/
    1b18:	8a 81       	ldd	r24, Y+2	; 0x02
    1b1a:	28 2f       	mov	r18, r24
    1b1c:	30 e0       	ldi	r19, 0x00	; 0
    1b1e:	3d 83       	std	Y+5, r19	; 0x05
    1b20:	2c 83       	std	Y+4, r18	; 0x04
    1b22:	8c 81       	ldd	r24, Y+4	; 0x04
    1b24:	9d 81       	ldd	r25, Y+5	; 0x05
    1b26:	81 30       	cpi	r24, 0x01	; 1
    1b28:	91 05       	cpc	r25, r1
    1b2a:	d1 f0       	breq	.+52     	; 0x1b60 <DIO_u8SetPortValue+0x68>
    1b2c:	2c 81       	ldd	r18, Y+4	; 0x04
    1b2e:	3d 81       	ldd	r19, Y+5	; 0x05
    1b30:	22 30       	cpi	r18, 0x02	; 2
    1b32:	31 05       	cpc	r19, r1
    1b34:	2c f4       	brge	.+10     	; 0x1b40 <DIO_u8SetPortValue+0x48>
    1b36:	8c 81       	ldd	r24, Y+4	; 0x04
    1b38:	9d 81       	ldd	r25, Y+5	; 0x05
    1b3a:	00 97       	sbiw	r24, 0x00	; 0
    1b3c:	61 f0       	breq	.+24     	; 0x1b56 <DIO_u8SetPortValue+0x5e>
    1b3e:	1f c0       	rjmp	.+62     	; 0x1b7e <DIO_u8SetPortValue+0x86>
    1b40:	2c 81       	ldd	r18, Y+4	; 0x04
    1b42:	3d 81       	ldd	r19, Y+5	; 0x05
    1b44:	22 30       	cpi	r18, 0x02	; 2
    1b46:	31 05       	cpc	r19, r1
    1b48:	81 f0       	breq	.+32     	; 0x1b6a <DIO_u8SetPortValue+0x72>
    1b4a:	8c 81       	ldd	r24, Y+4	; 0x04
    1b4c:	9d 81       	ldd	r25, Y+5	; 0x05
    1b4e:	83 30       	cpi	r24, 0x03	; 3
    1b50:	91 05       	cpc	r25, r1
    1b52:	81 f0       	breq	.+32     	; 0x1b74 <DIO_u8SetPortValue+0x7c>
    1b54:	14 c0       	rjmp	.+40     	; 0x1b7e <DIO_u8SetPortValue+0x86>
		{
			case DIO_PORT_0 :                    /*InCase PORTA*/
				VALUE_PORT0= Copy_u8Value;         /*Set PORTA Value*/
    1b56:	eb e3       	ldi	r30, 0x3B	; 59
    1b58:	f0 e0       	ldi	r31, 0x00	; 0
    1b5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b5c:	80 83       	st	Z, r24
    1b5e:	11 c0       	rjmp	.+34     	; 0x1b82 <DIO_u8SetPortValue+0x8a>
					break;
			case DIO_PORT_1 :                    /*InCase PORTB*/
				VALUE_PORT1= Copy_u8Value;         /*Set PORTB Value*/
    1b60:	e8 e3       	ldi	r30, 0x38	; 56
    1b62:	f0 e0       	ldi	r31, 0x00	; 0
    1b64:	8b 81       	ldd	r24, Y+3	; 0x03
    1b66:	80 83       	st	Z, r24
    1b68:	0c c0       	rjmp	.+24     	; 0x1b82 <DIO_u8SetPortValue+0x8a>
					break;
			case DIO_PORT_2 :                    /*InCase PORTC*/
				VALUE_PORT2= Copy_u8Value;         /*Set PORTC Value*/
    1b6a:	e5 e3       	ldi	r30, 0x35	; 53
    1b6c:	f0 e0       	ldi	r31, 0x00	; 0
    1b6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b70:	80 83       	st	Z, r24
    1b72:	07 c0       	rjmp	.+14     	; 0x1b82 <DIO_u8SetPortValue+0x8a>
					break;
			case DIO_PORT_3 :                    /*InCase PORTD*/
				VALUE_PORT3= Copy_u8Value;         //Set PORTD Value*/
    1b74:	e2 e3       	ldi	r30, 0x32	; 50
    1b76:	f0 e0       	ldi	r31, 0x00	; 0
    1b78:	8b 81       	ldd	r24, Y+3	; 0x03
    1b7a:	80 83       	st	Z, r24
    1b7c:	02 c0       	rjmp	.+4      	; 0x1b82 <DIO_u8SetPortValue+0x8a>
					break;
			default :                           /*Other Case Wrong PORT NO*/
					Local_u8Error=ERROR;            /*Error Flag*/
    1b7e:	81 e0       	ldi	r24, 0x01	; 1
    1b80:	89 83       	std	Y+1, r24	; 0x01
					break;
		}
	}
		/*Return Error State*/
		return Local_u8Error;              /*if ERROR exist it return 1 if NO ERROR return 0*/
    1b82:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b84:	0f 90       	pop	r0
    1b86:	0f 90       	pop	r0
    1b88:	0f 90       	pop	r0
    1b8a:	0f 90       	pop	r0
    1b8c:	0f 90       	pop	r0
    1b8e:	cf 91       	pop	r28
    1b90:	df 91       	pop	r29
    1b92:	08 95       	ret

00001b94 <DIO_u8SetPinValue>:
/*Description: Set PIN Value (HIGH or LOW)
 * Input     : Copy_u8PinNB (PIN Number) , Copy_u8Value (Value)
 * Output    : Return Error Status (Error or NO Error)
 * */
extern uint8_t DIO_u8SetPinValue(uint8_t Copy_u8PinN,uint8_t Copy_u8Value)
{
    1b94:	df 93       	push	r29
    1b96:	cf 93       	push	r28
    1b98:	00 d0       	rcall	.+0      	; 0x1b9a <DIO_u8SetPinValue+0x6>
    1b9a:	0f 92       	push	r0
    1b9c:	cd b7       	in	r28, 0x3d	; 61
    1b9e:	de b7       	in	r29, 0x3e	; 62
    1ba0:	8a 83       	std	Y+2, r24	; 0x02
    1ba2:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t Local_u8Error=NO_ERROR;                 /*Local Error State*/
    1ba4:	19 82       	std	Y+1, r1	; 0x01

		if(Copy_u8PinN>MAX_PIN_NO)      /*Check if Entered PIN NO. is more Than 7*/
    1ba6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ba8:	80 32       	cpi	r24, 0x20	; 32
    1baa:	18 f0       	brcs	.+6      	; 0x1bb2 <DIO_u8SetPinValue+0x1e>
		{
			Local_u8Error=ERROR;           /*Return ERROR*/
    1bac:	81 e0       	ldi	r24, 0x01	; 1
    1bae:	89 83       	std	Y+1, r24	; 0x01
    1bb0:	b4 c0       	rjmp	.+360    	; 0x1d1a <DIO_u8SetPinValue+0x186>
		}
		else if(Copy_u8Value != DIO_LOW && Copy_u8Value != DIO_HIGH)   /*Check if entered PIN Direction is not INPUT or OUTPUT*/
    1bb2:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb4:	88 23       	and	r24, r24
    1bb6:	31 f0       	breq	.+12     	; 0x1bc4 <DIO_u8SetPinValue+0x30>
    1bb8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bba:	81 30       	cpi	r24, 0x01	; 1
    1bbc:	19 f0       	breq	.+6      	; 0x1bc4 <DIO_u8SetPinValue+0x30>
		{
			Local_u8Error=ERROR;             /*Return ERROR*/
    1bbe:	81 e0       	ldi	r24, 0x01	; 1
    1bc0:	89 83       	std	Y+1, r24	; 0x01
    1bc2:	ab c0       	rjmp	.+342    	; 0x1d1a <DIO_u8SetPinValue+0x186>
		}
		else                            /*Entered PIN NO is not more than 7 and Direction is INPUT or OUTPUT*/
		{
			
			if(Copy_u8PinN>=0 && Copy_u8PinN<PIN_PER_PORT)
    1bc4:	8a 81       	ldd	r24, Y+2	; 0x02
    1bc6:	88 30       	cpi	r24, 0x08	; 8
    1bc8:	10 f5       	brcc	.+68     	; 0x1c0e <DIO_u8SetPinValue+0x7a>
			{		/*InCase PORTA*/
				ASSIGN_BIT(VALUE_PORT0,Copy_u8PinN,Copy_u8Value);  /*ASSIGN PIN NO to entered Direction*/
    1bca:	ab e3       	ldi	r26, 0x3B	; 59
    1bcc:	b0 e0       	ldi	r27, 0x00	; 0
    1bce:	eb e3       	ldi	r30, 0x3B	; 59
    1bd0:	f0 e0       	ldi	r31, 0x00	; 0
    1bd2:	80 81       	ld	r24, Z
    1bd4:	48 2f       	mov	r20, r24
    1bd6:	8a 81       	ldd	r24, Y+2	; 0x02
    1bd8:	28 2f       	mov	r18, r24
    1bda:	30 e0       	ldi	r19, 0x00	; 0
    1bdc:	81 e0       	ldi	r24, 0x01	; 1
    1bde:	90 e0       	ldi	r25, 0x00	; 0
    1be0:	02 c0       	rjmp	.+4      	; 0x1be6 <DIO_u8SetPinValue+0x52>
    1be2:	88 0f       	add	r24, r24
    1be4:	99 1f       	adc	r25, r25
    1be6:	2a 95       	dec	r18
    1be8:	e2 f7       	brpl	.-8      	; 0x1be2 <DIO_u8SetPinValue+0x4e>
    1bea:	80 95       	com	r24
    1bec:	48 23       	and	r20, r24
    1bee:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf0:	28 2f       	mov	r18, r24
    1bf2:	30 e0       	ldi	r19, 0x00	; 0
    1bf4:	8a 81       	ldd	r24, Y+2	; 0x02
    1bf6:	88 2f       	mov	r24, r24
    1bf8:	90 e0       	ldi	r25, 0x00	; 0
    1bfa:	b9 01       	movw	r22, r18
    1bfc:	02 c0       	rjmp	.+4      	; 0x1c02 <DIO_u8SetPinValue+0x6e>
    1bfe:	66 0f       	add	r22, r22
    1c00:	77 1f       	adc	r23, r23
    1c02:	8a 95       	dec	r24
    1c04:	e2 f7       	brpl	.-8      	; 0x1bfe <DIO_u8SetPinValue+0x6a>
    1c06:	cb 01       	movw	r24, r22
    1c08:	84 2b       	or	r24, r20
    1c0a:	8c 93       	st	X, r24
    1c0c:	86 c0       	rjmp	.+268    	; 0x1d1a <DIO_u8SetPinValue+0x186>
			}
			else if(Copy_u8PinN>=PIN_PER_PORT && Copy_u8PinN<(DIO_PORT_1+1)*PIN_PER_PORT)
    1c0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c10:	88 30       	cpi	r24, 0x08	; 8
    1c12:	48 f1       	brcs	.+82     	; 0x1c66 <DIO_u8SetPinValue+0xd2>
    1c14:	8a 81       	ldd	r24, Y+2	; 0x02
    1c16:	80 31       	cpi	r24, 0x10	; 16
    1c18:	30 f5       	brcc	.+76     	; 0x1c66 <DIO_u8SetPinValue+0xd2>
			{
												/*InCase PORTB*/
				ASSIGN_BIT(VALUE_PORT1,(Copy_u8PinN-PIN_PER_PORT),Copy_u8Value);       /*ASSIGN PIN NO to entered Direction*/
    1c1a:	a8 e3       	ldi	r26, 0x38	; 56
    1c1c:	b0 e0       	ldi	r27, 0x00	; 0
    1c1e:	e8 e3       	ldi	r30, 0x38	; 56
    1c20:	f0 e0       	ldi	r31, 0x00	; 0
    1c22:	80 81       	ld	r24, Z
    1c24:	48 2f       	mov	r20, r24
    1c26:	8a 81       	ldd	r24, Y+2	; 0x02
    1c28:	88 2f       	mov	r24, r24
    1c2a:	90 e0       	ldi	r25, 0x00	; 0
    1c2c:	9c 01       	movw	r18, r24
    1c2e:	28 50       	subi	r18, 0x08	; 8
    1c30:	30 40       	sbci	r19, 0x00	; 0
    1c32:	81 e0       	ldi	r24, 0x01	; 1
    1c34:	90 e0       	ldi	r25, 0x00	; 0
    1c36:	02 c0       	rjmp	.+4      	; 0x1c3c <DIO_u8SetPinValue+0xa8>
    1c38:	88 0f       	add	r24, r24
    1c3a:	99 1f       	adc	r25, r25
    1c3c:	2a 95       	dec	r18
    1c3e:	e2 f7       	brpl	.-8      	; 0x1c38 <DIO_u8SetPinValue+0xa4>
    1c40:	80 95       	com	r24
    1c42:	48 23       	and	r20, r24
    1c44:	8b 81       	ldd	r24, Y+3	; 0x03
    1c46:	28 2f       	mov	r18, r24
    1c48:	30 e0       	ldi	r19, 0x00	; 0
    1c4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c4c:	88 2f       	mov	r24, r24
    1c4e:	90 e0       	ldi	r25, 0x00	; 0
    1c50:	08 97       	sbiw	r24, 0x08	; 8
    1c52:	b9 01       	movw	r22, r18
    1c54:	02 c0       	rjmp	.+4      	; 0x1c5a <DIO_u8SetPinValue+0xc6>
    1c56:	66 0f       	add	r22, r22
    1c58:	77 1f       	adc	r23, r23
    1c5a:	8a 95       	dec	r24
    1c5c:	e2 f7       	brpl	.-8      	; 0x1c56 <DIO_u8SetPinValue+0xc2>
    1c5e:	cb 01       	movw	r24, r22
    1c60:	84 2b       	or	r24, r20
    1c62:	8c 93       	st	X, r24
    1c64:	5a c0       	rjmp	.+180    	; 0x1d1a <DIO_u8SetPinValue+0x186>
			}
			else if(Copy_u8PinN>=2*PIN_PER_PORT && Copy_u8PinN<(DIO_PORT_2+1)*PIN_PER_PORT)
    1c66:	8a 81       	ldd	r24, Y+2	; 0x02
    1c68:	80 31       	cpi	r24, 0x10	; 16
    1c6a:	48 f1       	brcs	.+82     	; 0x1cbe <DIO_u8SetPinValue+0x12a>
    1c6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c6e:	88 31       	cpi	r24, 0x18	; 24
    1c70:	30 f5       	brcc	.+76     	; 0x1cbe <DIO_u8SetPinValue+0x12a>
			{
											   /*InCase PORTC*/
				ASSIGN_BIT(VALUE_PORT2,(Copy_u8PinN-(2*PIN_PER_PORT)),Copy_u8Value);     /*ASSIGN PIN NO to entered Direction*/
    1c72:	a5 e3       	ldi	r26, 0x35	; 53
    1c74:	b0 e0       	ldi	r27, 0x00	; 0
    1c76:	e5 e3       	ldi	r30, 0x35	; 53
    1c78:	f0 e0       	ldi	r31, 0x00	; 0
    1c7a:	80 81       	ld	r24, Z
    1c7c:	48 2f       	mov	r20, r24
    1c7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c80:	88 2f       	mov	r24, r24
    1c82:	90 e0       	ldi	r25, 0x00	; 0
    1c84:	9c 01       	movw	r18, r24
    1c86:	20 51       	subi	r18, 0x10	; 16
    1c88:	30 40       	sbci	r19, 0x00	; 0
    1c8a:	81 e0       	ldi	r24, 0x01	; 1
    1c8c:	90 e0       	ldi	r25, 0x00	; 0
    1c8e:	02 c0       	rjmp	.+4      	; 0x1c94 <DIO_u8SetPinValue+0x100>
    1c90:	88 0f       	add	r24, r24
    1c92:	99 1f       	adc	r25, r25
    1c94:	2a 95       	dec	r18
    1c96:	e2 f7       	brpl	.-8      	; 0x1c90 <DIO_u8SetPinValue+0xfc>
    1c98:	80 95       	com	r24
    1c9a:	48 23       	and	r20, r24
    1c9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c9e:	28 2f       	mov	r18, r24
    1ca0:	30 e0       	ldi	r19, 0x00	; 0
    1ca2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ca4:	88 2f       	mov	r24, r24
    1ca6:	90 e0       	ldi	r25, 0x00	; 0
    1ca8:	40 97       	sbiw	r24, 0x10	; 16
    1caa:	b9 01       	movw	r22, r18
    1cac:	02 c0       	rjmp	.+4      	; 0x1cb2 <DIO_u8SetPinValue+0x11e>
    1cae:	66 0f       	add	r22, r22
    1cb0:	77 1f       	adc	r23, r23
    1cb2:	8a 95       	dec	r24
    1cb4:	e2 f7       	brpl	.-8      	; 0x1cae <DIO_u8SetPinValue+0x11a>
    1cb6:	cb 01       	movw	r24, r22
    1cb8:	84 2b       	or	r24, r20
    1cba:	8c 93       	st	X, r24
    1cbc:	2e c0       	rjmp	.+92     	; 0x1d1a <DIO_u8SetPinValue+0x186>
			}
			else if(Copy_u8PinN>=3*PIN_PER_PORT && Copy_u8PinN<(DIO_PORT_3+1)*PIN_PER_PORT)
    1cbe:	8a 81       	ldd	r24, Y+2	; 0x02
    1cc0:	88 31       	cpi	r24, 0x18	; 24
    1cc2:	48 f1       	brcs	.+82     	; 0x1d16 <DIO_u8SetPinValue+0x182>
    1cc4:	8a 81       	ldd	r24, Y+2	; 0x02
    1cc6:	80 32       	cpi	r24, 0x20	; 32
    1cc8:	30 f5       	brcc	.+76     	; 0x1d16 <DIO_u8SetPinValue+0x182>
			{
											   /*InCase PORTD*/
				ASSIGN_BIT(VALUE_PORT3,(Copy_u8PinN-(3*PIN_PER_PORT)),Copy_u8Value);       /*ASSIGN PIN NO to entered Direction*/
    1cca:	a2 e3       	ldi	r26, 0x32	; 50
    1ccc:	b0 e0       	ldi	r27, 0x00	; 0
    1cce:	e2 e3       	ldi	r30, 0x32	; 50
    1cd0:	f0 e0       	ldi	r31, 0x00	; 0
    1cd2:	80 81       	ld	r24, Z
    1cd4:	48 2f       	mov	r20, r24
    1cd6:	8a 81       	ldd	r24, Y+2	; 0x02
    1cd8:	88 2f       	mov	r24, r24
    1cda:	90 e0       	ldi	r25, 0x00	; 0
    1cdc:	9c 01       	movw	r18, r24
    1cde:	28 51       	subi	r18, 0x18	; 24
    1ce0:	30 40       	sbci	r19, 0x00	; 0
    1ce2:	81 e0       	ldi	r24, 0x01	; 1
    1ce4:	90 e0       	ldi	r25, 0x00	; 0
    1ce6:	02 c0       	rjmp	.+4      	; 0x1cec <DIO_u8SetPinValue+0x158>
    1ce8:	88 0f       	add	r24, r24
    1cea:	99 1f       	adc	r25, r25
    1cec:	2a 95       	dec	r18
    1cee:	e2 f7       	brpl	.-8      	; 0x1ce8 <DIO_u8SetPinValue+0x154>
    1cf0:	80 95       	com	r24
    1cf2:	48 23       	and	r20, r24
    1cf4:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf6:	28 2f       	mov	r18, r24
    1cf8:	30 e0       	ldi	r19, 0x00	; 0
    1cfa:	8a 81       	ldd	r24, Y+2	; 0x02
    1cfc:	88 2f       	mov	r24, r24
    1cfe:	90 e0       	ldi	r25, 0x00	; 0
    1d00:	48 97       	sbiw	r24, 0x18	; 24
    1d02:	b9 01       	movw	r22, r18
    1d04:	02 c0       	rjmp	.+4      	; 0x1d0a <DIO_u8SetPinValue+0x176>
    1d06:	66 0f       	add	r22, r22
    1d08:	77 1f       	adc	r23, r23
    1d0a:	8a 95       	dec	r24
    1d0c:	e2 f7       	brpl	.-8      	; 0x1d06 <DIO_u8SetPinValue+0x172>
    1d0e:	cb 01       	movw	r24, r22
    1d10:	84 2b       	or	r24, r20
    1d12:	8c 93       	st	X, r24
    1d14:	02 c0       	rjmp	.+4      	; 0x1d1a <DIO_u8SetPinValue+0x186>
			}
			else
			{
				/*Other Case Wrong PORT NO*/
				Local_u8Error=ERROR;                         /*Error Flag*/
    1d16:	81 e0       	ldi	r24, 0x01	; 1
    1d18:	89 83       	std	Y+1, r24	; 0x01
			}			
		}

		return Local_u8Error;   /*if ERROR exist it return 1 if NO ERROR return 0*/
    1d1a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d1c:	0f 90       	pop	r0
    1d1e:	0f 90       	pop	r0
    1d20:	0f 90       	pop	r0
    1d22:	cf 91       	pop	r28
    1d24:	df 91       	pop	r29
    1d26:	08 95       	ret

00001d28 <DIO_u8GetPortValue>:
/*Description: Get PORT Value
 * Input     :  Copy_u8PortNB (PORT Number),*Copy_u8Value (Pointer to send value to it)
 * Output    : Return Error Status (Error or NO Error)
 * */
uint8_t DIO_u8GetPortValue(uint8_t Copy_u8PortNB,uint8_t *Copy_u8Value)
{
    1d28:	df 93       	push	r29
    1d2a:	cf 93       	push	r28
    1d2c:	00 d0       	rcall	.+0      	; 0x1d2e <DIO_u8GetPortValue+0x6>
    1d2e:	00 d0       	rcall	.+0      	; 0x1d30 <DIO_u8GetPortValue+0x8>
    1d30:	00 d0       	rcall	.+0      	; 0x1d32 <DIO_u8GetPortValue+0xa>
    1d32:	cd b7       	in	r28, 0x3d	; 61
    1d34:	de b7       	in	r29, 0x3e	; 62
    1d36:	8a 83       	std	Y+2, r24	; 0x02
    1d38:	7c 83       	std	Y+4, r23	; 0x04
    1d3a:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t Local_u8Error=NO_ERROR;              /*Local Error State : NO ERROR*/
    1d3c:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Value ==NULL_POINTER)  /*Check if Pointer points to Nothing*/
    1d3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d40:	9c 81       	ldd	r25, Y+4	; 0x04
    1d42:	00 97       	sbiw	r24, 0x00	; 0
    1d44:	19 f4       	brne	.+6      	; 0x1d4c <DIO_u8GetPortValue+0x24>
	{
		Local_u8Error=ERROR;             /*if it points to Nothing ERROR State : ERROR*/
    1d46:	81 e0       	ldi	r24, 0x01	; 1
    1d48:	89 83       	std	Y+1, r24	; 0x01
    1d4a:	3d c0       	rjmp	.+122    	; 0x1dc6 <DIO_u8GetPortValue+0x9e>
	}
	else
	{
		switch(Copy_u8PortNB)            /*Switch case on PORT Number*/
    1d4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d4e:	28 2f       	mov	r18, r24
    1d50:	30 e0       	ldi	r19, 0x00	; 0
    1d52:	3e 83       	std	Y+6, r19	; 0x06
    1d54:	2d 83       	std	Y+5, r18	; 0x05
    1d56:	8d 81       	ldd	r24, Y+5	; 0x05
    1d58:	9e 81       	ldd	r25, Y+6	; 0x06
    1d5a:	81 30       	cpi	r24, 0x01	; 1
    1d5c:	91 05       	cpc	r25, r1
    1d5e:	e1 f0       	breq	.+56     	; 0x1d98 <DIO_u8GetPortValue+0x70>
    1d60:	2d 81       	ldd	r18, Y+5	; 0x05
    1d62:	3e 81       	ldd	r19, Y+6	; 0x06
    1d64:	22 30       	cpi	r18, 0x02	; 2
    1d66:	31 05       	cpc	r19, r1
    1d68:	2c f4       	brge	.+10     	; 0x1d74 <DIO_u8GetPortValue+0x4c>
    1d6a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d6c:	9e 81       	ldd	r25, Y+6	; 0x06
    1d6e:	00 97       	sbiw	r24, 0x00	; 0
    1d70:	61 f0       	breq	.+24     	; 0x1d8a <DIO_u8GetPortValue+0x62>
    1d72:	27 c0       	rjmp	.+78     	; 0x1dc2 <DIO_u8GetPortValue+0x9a>
    1d74:	2d 81       	ldd	r18, Y+5	; 0x05
    1d76:	3e 81       	ldd	r19, Y+6	; 0x06
    1d78:	22 30       	cpi	r18, 0x02	; 2
    1d7a:	31 05       	cpc	r19, r1
    1d7c:	a1 f0       	breq	.+40     	; 0x1da6 <DIO_u8GetPortValue+0x7e>
    1d7e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d80:	9e 81       	ldd	r25, Y+6	; 0x06
    1d82:	83 30       	cpi	r24, 0x03	; 3
    1d84:	91 05       	cpc	r25, r1
    1d86:	b1 f0       	breq	.+44     	; 0x1db4 <DIO_u8GetPortValue+0x8c>
    1d88:	1c c0       	rjmp	.+56     	; 0x1dc2 <DIO_u8GetPortValue+0x9a>
		{
			case DIO_PORT_0 :            /*InCase PORTA*/
				(*Copy_u8Value)=READ_PORT0;    /*Make Pointer Point Value of PORTA*/
    1d8a:	e9 e3       	ldi	r30, 0x39	; 57
    1d8c:	f0 e0       	ldi	r31, 0x00	; 0
    1d8e:	80 81       	ld	r24, Z
    1d90:	eb 81       	ldd	r30, Y+3	; 0x03
    1d92:	fc 81       	ldd	r31, Y+4	; 0x04
    1d94:	80 83       	st	Z, r24
    1d96:	17 c0       	rjmp	.+46     	; 0x1dc6 <DIO_u8GetPortValue+0x9e>
				break;
			case DIO_PORT_1 :            /*InCase PORTB*/
				(*Copy_u8Value)=READ_PORT1;    /*Make Pointer Point Value of PORTB*/
    1d98:	e6 e3       	ldi	r30, 0x36	; 54
    1d9a:	f0 e0       	ldi	r31, 0x00	; 0
    1d9c:	80 81       	ld	r24, Z
    1d9e:	eb 81       	ldd	r30, Y+3	; 0x03
    1da0:	fc 81       	ldd	r31, Y+4	; 0x04
    1da2:	80 83       	st	Z, r24
    1da4:	10 c0       	rjmp	.+32     	; 0x1dc6 <DIO_u8GetPortValue+0x9e>
				break;
		    case DIO_PORT_2 :            /*InCase PORTC*/
		    	(*Copy_u8Value)=READ_PORT2;    /*Make Pointer Point Value of PORTC*/
    1da6:	e3 e3       	ldi	r30, 0x33	; 51
    1da8:	f0 e0       	ldi	r31, 0x00	; 0
    1daa:	80 81       	ld	r24, Z
    1dac:	eb 81       	ldd	r30, Y+3	; 0x03
    1dae:	fc 81       	ldd	r31, Y+4	; 0x04
    1db0:	80 83       	st	Z, r24
    1db2:	09 c0       	rjmp	.+18     	; 0x1dc6 <DIO_u8GetPortValue+0x9e>
				break;
			case DIO_PORT_3 :            /*InCase PORTD*/
				(*Copy_u8Value)=READ_PORT3;    /*Make Pointer Point Value of PORTD*/
    1db4:	e0 e3       	ldi	r30, 0x30	; 48
    1db6:	f0 e0       	ldi	r31, 0x00	; 0
    1db8:	80 81       	ld	r24, Z
    1dba:	eb 81       	ldd	r30, Y+3	; 0x03
    1dbc:	fc 81       	ldd	r31, Y+4	; 0x04
    1dbe:	80 83       	st	Z, r24
    1dc0:	02 c0       	rjmp	.+4      	; 0x1dc6 <DIO_u8GetPortValue+0x9e>
				break;
			default :                   /*Other Case Wrong PORT NO*/
				Local_u8Error=ERROR;        /*Error Flag*/
    1dc2:	81 e0       	ldi	r24, 0x01	; 1
    1dc4:	89 83       	std	Y+1, r24	; 0x01
			    break;
		}
		
	}
	return Local_u8Error;   /*if ERROR exist it return 1 if NO ERROR return 0*/
    1dc6:	89 81       	ldd	r24, Y+1	; 0x01
}
    1dc8:	26 96       	adiw	r28, 0x06	; 6
    1dca:	0f b6       	in	r0, 0x3f	; 63
    1dcc:	f8 94       	cli
    1dce:	de bf       	out	0x3e, r29	; 62
    1dd0:	0f be       	out	0x3f, r0	; 63
    1dd2:	cd bf       	out	0x3d, r28	; 61
    1dd4:	cf 91       	pop	r28
    1dd6:	df 91       	pop	r29
    1dd8:	08 95       	ret

00001dda <DIO_u8GetPinValue>:
/*Description: Get PIN Value (HIGH or LOW)
 * Input     : Copy_u8PinN (PIN Number) ,*Copy_u8Value (Pointer to send value to it)
 * Output    : Return Error Status (Error or NO Error)
 * */
uint8_t DIO_u8GetPinValue(uint8_t Copy_u8PinN,uint8_t *Copy_u8Value)
{
    1dda:	df 93       	push	r29
    1ddc:	cf 93       	push	r28
    1dde:	00 d0       	rcall	.+0      	; 0x1de0 <DIO_u8GetPinValue+0x6>
    1de0:	00 d0       	rcall	.+0      	; 0x1de2 <DIO_u8GetPinValue+0x8>
    1de2:	cd b7       	in	r28, 0x3d	; 61
    1de4:	de b7       	in	r29, 0x3e	; 62
    1de6:	8a 83       	std	Y+2, r24	; 0x02
    1de8:	7c 83       	std	Y+4, r23	; 0x04
    1dea:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t Local_u8Error=NO_ERROR;        /*Local Error State : NO ERROR*/
    1dec:	19 82       	std	Y+1, r1	; 0x01

		if(Copy_u8Value ==NULL_POINTER) /*Check if Pointer points to Nothing*/
    1dee:	8b 81       	ldd	r24, Y+3	; 0x03
    1df0:	9c 81       	ldd	r25, Y+4	; 0x04
    1df2:	00 97       	sbiw	r24, 0x00	; 0
    1df4:	19 f4       	brne	.+6      	; 0x1dfc <DIO_u8GetPinValue+0x22>
		{
			Local_u8Error=ERROR;            /*if it points to Nothing ERROR State : ERROR*/
    1df6:	81 e0       	ldi	r24, 0x01	; 1
    1df8:	89 83       	std	Y+1, r24	; 0x01
    1dfa:	70 c0       	rjmp	.+224    	; 0x1edc <DIO_u8GetPinValue+0x102>
		}
		else if(Copy_u8PinN>MAX_PIN_NO)  /*Check if Entered PIN NO. is more Than 7*/
    1dfc:	8a 81       	ldd	r24, Y+2	; 0x02
    1dfe:	80 32       	cpi	r24, 0x20	; 32
    1e00:	18 f0       	brcs	.+6      	; 0x1e08 <DIO_u8GetPinValue+0x2e>
		{
			Local_u8Error=ERROR;            /*Return ERROR*/
    1e02:	81 e0       	ldi	r24, 0x01	; 1
    1e04:	89 83       	std	Y+1, r24	; 0x01
    1e06:	6a c0       	rjmp	.+212    	; 0x1edc <DIO_u8GetPinValue+0x102>
		}
		else                           /*Pointer is Pointing to Value and PIN NO entered is not more than 7*/
		{
			
			if(Copy_u8PinN>=0 && Copy_u8PinN<PIN_PER_PORT)
    1e08:	8a 81       	ldd	r24, Y+2	; 0x02
    1e0a:	88 30       	cpi	r24, 0x08	; 8
    1e0c:	a0 f4       	brcc	.+40     	; 0x1e36 <DIO_u8GetPinValue+0x5c>
			{		/*InCase PORTA*/
				(*Copy_u8Value)=GET_BIT(READ_PORT0,Copy_u8PinN);  /*ASSIGN PIN NO to entered Direction*/
    1e0e:	e9 e3       	ldi	r30, 0x39	; 57
    1e10:	f0 e0       	ldi	r31, 0x00	; 0
    1e12:	80 81       	ld	r24, Z
    1e14:	28 2f       	mov	r18, r24
    1e16:	30 e0       	ldi	r19, 0x00	; 0
    1e18:	8a 81       	ldd	r24, Y+2	; 0x02
    1e1a:	88 2f       	mov	r24, r24
    1e1c:	90 e0       	ldi	r25, 0x00	; 0
    1e1e:	a9 01       	movw	r20, r18
    1e20:	02 c0       	rjmp	.+4      	; 0x1e26 <DIO_u8GetPinValue+0x4c>
    1e22:	55 95       	asr	r21
    1e24:	47 95       	ror	r20
    1e26:	8a 95       	dec	r24
    1e28:	e2 f7       	brpl	.-8      	; 0x1e22 <DIO_u8GetPinValue+0x48>
    1e2a:	ca 01       	movw	r24, r20
    1e2c:	81 70       	andi	r24, 0x01	; 1
    1e2e:	eb 81       	ldd	r30, Y+3	; 0x03
    1e30:	fc 81       	ldd	r31, Y+4	; 0x04
    1e32:	80 83       	st	Z, r24
    1e34:	53 c0       	rjmp	.+166    	; 0x1edc <DIO_u8GetPinValue+0x102>
			}
			else if(Copy_u8PinN>=PIN_PER_PORT && Copy_u8PinN<(DIO_PORT_1+1)*PIN_PER_PORT)
    1e36:	8a 81       	ldd	r24, Y+2	; 0x02
    1e38:	88 30       	cpi	r24, 0x08	; 8
    1e3a:	c0 f0       	brcs	.+48     	; 0x1e6c <DIO_u8GetPinValue+0x92>
    1e3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e3e:	80 31       	cpi	r24, 0x10	; 16
    1e40:	a8 f4       	brcc	.+42     	; 0x1e6c <DIO_u8GetPinValue+0x92>
			{
												/*InCase PORTB*/
				(*Copy_u8Value)=GET_BIT(READ_PORT1,(Copy_u8PinN-(PIN_PER_PORT)));      /*ASSIGN PIN NO to entered Direction*/
    1e42:	e6 e3       	ldi	r30, 0x36	; 54
    1e44:	f0 e0       	ldi	r31, 0x00	; 0
    1e46:	80 81       	ld	r24, Z
    1e48:	28 2f       	mov	r18, r24
    1e4a:	30 e0       	ldi	r19, 0x00	; 0
    1e4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e4e:	88 2f       	mov	r24, r24
    1e50:	90 e0       	ldi	r25, 0x00	; 0
    1e52:	08 97       	sbiw	r24, 0x08	; 8
    1e54:	a9 01       	movw	r20, r18
    1e56:	02 c0       	rjmp	.+4      	; 0x1e5c <DIO_u8GetPinValue+0x82>
    1e58:	55 95       	asr	r21
    1e5a:	47 95       	ror	r20
    1e5c:	8a 95       	dec	r24
    1e5e:	e2 f7       	brpl	.-8      	; 0x1e58 <DIO_u8GetPinValue+0x7e>
    1e60:	ca 01       	movw	r24, r20
    1e62:	81 70       	andi	r24, 0x01	; 1
    1e64:	eb 81       	ldd	r30, Y+3	; 0x03
    1e66:	fc 81       	ldd	r31, Y+4	; 0x04
    1e68:	80 83       	st	Z, r24
    1e6a:	38 c0       	rjmp	.+112    	; 0x1edc <DIO_u8GetPinValue+0x102>
			}
			else if(Copy_u8PinN>=2*PIN_PER_PORT && Copy_u8PinN<(DIO_PORT_2+1)*PIN_PER_PORT)
    1e6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e6e:	80 31       	cpi	r24, 0x10	; 16
    1e70:	c0 f0       	brcs	.+48     	; 0x1ea2 <DIO_u8GetPinValue+0xc8>
    1e72:	8a 81       	ldd	r24, Y+2	; 0x02
    1e74:	88 31       	cpi	r24, 0x18	; 24
    1e76:	a8 f4       	brcc	.+42     	; 0x1ea2 <DIO_u8GetPinValue+0xc8>
			{
											   /*InCase PORTC*/
				(*Copy_u8Value)=GET_BIT(READ_PORT2,(Copy_u8PinN-(2*PIN_PER_PORT)));     /*ASSIGN PIN NO to entered Direction*/
    1e78:	e3 e3       	ldi	r30, 0x33	; 51
    1e7a:	f0 e0       	ldi	r31, 0x00	; 0
    1e7c:	80 81       	ld	r24, Z
    1e7e:	28 2f       	mov	r18, r24
    1e80:	30 e0       	ldi	r19, 0x00	; 0
    1e82:	8a 81       	ldd	r24, Y+2	; 0x02
    1e84:	88 2f       	mov	r24, r24
    1e86:	90 e0       	ldi	r25, 0x00	; 0
    1e88:	40 97       	sbiw	r24, 0x10	; 16
    1e8a:	a9 01       	movw	r20, r18
    1e8c:	02 c0       	rjmp	.+4      	; 0x1e92 <DIO_u8GetPinValue+0xb8>
    1e8e:	55 95       	asr	r21
    1e90:	47 95       	ror	r20
    1e92:	8a 95       	dec	r24
    1e94:	e2 f7       	brpl	.-8      	; 0x1e8e <DIO_u8GetPinValue+0xb4>
    1e96:	ca 01       	movw	r24, r20
    1e98:	81 70       	andi	r24, 0x01	; 1
    1e9a:	eb 81       	ldd	r30, Y+3	; 0x03
    1e9c:	fc 81       	ldd	r31, Y+4	; 0x04
    1e9e:	80 83       	st	Z, r24
    1ea0:	1d c0       	rjmp	.+58     	; 0x1edc <DIO_u8GetPinValue+0x102>
			}
			else if(Copy_u8PinN>=3*PIN_PER_PORT && Copy_u8PinN<(DIO_PORT_3+1)*PIN_PER_PORT)
    1ea2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ea4:	88 31       	cpi	r24, 0x18	; 24
    1ea6:	c0 f0       	brcs	.+48     	; 0x1ed8 <DIO_u8GetPinValue+0xfe>
    1ea8:	8a 81       	ldd	r24, Y+2	; 0x02
    1eaa:	80 32       	cpi	r24, 0x20	; 32
    1eac:	a8 f4       	brcc	.+42     	; 0x1ed8 <DIO_u8GetPinValue+0xfe>
			{
											   /*InCase PORTD*/
				(*Copy_u8Value)=GET_BIT(READ_PORT3,(Copy_u8PinN-(3*PIN_PER_PORT)));     /*ASSIGN PIN NO to entered Direction*/
    1eae:	e0 e3       	ldi	r30, 0x30	; 48
    1eb0:	f0 e0       	ldi	r31, 0x00	; 0
    1eb2:	80 81       	ld	r24, Z
    1eb4:	28 2f       	mov	r18, r24
    1eb6:	30 e0       	ldi	r19, 0x00	; 0
    1eb8:	8a 81       	ldd	r24, Y+2	; 0x02
    1eba:	88 2f       	mov	r24, r24
    1ebc:	90 e0       	ldi	r25, 0x00	; 0
    1ebe:	48 97       	sbiw	r24, 0x18	; 24
    1ec0:	a9 01       	movw	r20, r18
    1ec2:	02 c0       	rjmp	.+4      	; 0x1ec8 <DIO_u8GetPinValue+0xee>
    1ec4:	55 95       	asr	r21
    1ec6:	47 95       	ror	r20
    1ec8:	8a 95       	dec	r24
    1eca:	e2 f7       	brpl	.-8      	; 0x1ec4 <DIO_u8GetPinValue+0xea>
    1ecc:	ca 01       	movw	r24, r20
    1ece:	81 70       	andi	r24, 0x01	; 1
    1ed0:	eb 81       	ldd	r30, Y+3	; 0x03
    1ed2:	fc 81       	ldd	r31, Y+4	; 0x04
    1ed4:	80 83       	st	Z, r24
    1ed6:	02 c0       	rjmp	.+4      	; 0x1edc <DIO_u8GetPinValue+0x102>
			}
			else
			{
				/*Other Case Wrong PORT NO*/
				Local_u8Error=ERROR;                         /*Error Flag*/
    1ed8:	81 e0       	ldi	r24, 0x01	; 1
    1eda:	89 83       	std	Y+1, r24	; 0x01
			}			
		}
		return Local_u8Error;   /*if ERROR exist it return 1 if NO ERROR return 0*/
    1edc:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ede:	0f 90       	pop	r0
    1ee0:	0f 90       	pop	r0
    1ee2:	0f 90       	pop	r0
    1ee4:	0f 90       	pop	r0
    1ee6:	cf 91       	pop	r28
    1ee8:	df 91       	pop	r29
    1eea:	08 95       	ret

00001eec <DIO_u8SetPortInputType>:
/*Description: Set PORT Type in case of INPUT Direction (PULL UP or FLOATING)
 * Input     :  Copy_u8PortNB (PORT Number),Copy_u8InputType(1 for PULL UP and 0 for FLOATING)
 * Output    : Return Error Status (Error or NO Error)
 * */
uint8_t DIO_u8SetPortInputType(uint8_t Copy_u8PortNB,uint8_t Copy_u8InputType)
{
    1eec:	df 93       	push	r29
    1eee:	cf 93       	push	r28
    1ef0:	cd b7       	in	r28, 0x3d	; 61
    1ef2:	de b7       	in	r29, 0x3e	; 62
    1ef4:	29 97       	sbiw	r28, 0x09	; 9
    1ef6:	0f b6       	in	r0, 0x3f	; 63
    1ef8:	f8 94       	cli
    1efa:	de bf       	out	0x3e, r29	; 62
    1efc:	0f be       	out	0x3f, r0	; 63
    1efe:	cd bf       	out	0x3d, r28	; 61
    1f00:	8c 83       	std	Y+4, r24	; 0x04
    1f02:	6d 83       	std	Y+5, r22	; 0x05
	/*Local Error State*/
	uint8_t Local_u8Error=NO_ERROR ,Copy_LocalStatus = NO_ERROR,Copy_LocalValue = DIO_OUTPUT;	/* check if any error happened. 0 fail/1 success*/
    1f04:	1b 82       	std	Y+3, r1	; 0x03
    1f06:	1a 82       	std	Y+2, r1	; 0x02
    1f08:	81 e0       	ldi	r24, 0x01	; 1
    1f0a:	89 83       	std	Y+1, r24	; 0x01
	/* Copy_LocalValue = 255 in case the port number wrong*/

	/* Get the value of the port direction*/
	switch (Copy_u8PortNB)
    1f0c:	8c 81       	ldd	r24, Y+4	; 0x04
    1f0e:	28 2f       	mov	r18, r24
    1f10:	30 e0       	ldi	r19, 0x00	; 0
    1f12:	39 87       	std	Y+9, r19	; 0x09
    1f14:	28 87       	std	Y+8, r18	; 0x08
    1f16:	88 85       	ldd	r24, Y+8	; 0x08
    1f18:	99 85       	ldd	r25, Y+9	; 0x09
    1f1a:	81 30       	cpi	r24, 0x01	; 1
    1f1c:	91 05       	cpc	r25, r1
    1f1e:	d1 f0       	breq	.+52     	; 0x1f54 <DIO_u8SetPortInputType+0x68>
    1f20:	28 85       	ldd	r18, Y+8	; 0x08
    1f22:	39 85       	ldd	r19, Y+9	; 0x09
    1f24:	22 30       	cpi	r18, 0x02	; 2
    1f26:	31 05       	cpc	r19, r1
    1f28:	2c f4       	brge	.+10     	; 0x1f34 <DIO_u8SetPortInputType+0x48>
    1f2a:	88 85       	ldd	r24, Y+8	; 0x08
    1f2c:	99 85       	ldd	r25, Y+9	; 0x09
    1f2e:	00 97       	sbiw	r24, 0x00	; 0
    1f30:	61 f0       	breq	.+24     	; 0x1f4a <DIO_u8SetPortInputType+0x5e>
    1f32:	1f c0       	rjmp	.+62     	; 0x1f72 <DIO_u8SetPortInputType+0x86>
    1f34:	28 85       	ldd	r18, Y+8	; 0x08
    1f36:	39 85       	ldd	r19, Y+9	; 0x09
    1f38:	22 30       	cpi	r18, 0x02	; 2
    1f3a:	31 05       	cpc	r19, r1
    1f3c:	81 f0       	breq	.+32     	; 0x1f5e <DIO_u8SetPortInputType+0x72>
    1f3e:	88 85       	ldd	r24, Y+8	; 0x08
    1f40:	99 85       	ldd	r25, Y+9	; 0x09
    1f42:	83 30       	cpi	r24, 0x03	; 3
    1f44:	91 05       	cpc	r25, r1
    1f46:	81 f0       	breq	.+32     	; 0x1f68 <DIO_u8SetPortInputType+0x7c>
    1f48:	14 c0       	rjmp	.+40     	; 0x1f72 <DIO_u8SetPortInputType+0x86>
	{
	case DIO_PORT_0:
		Copy_LocalValue = DIRECTION_PORT0;
    1f4a:	ea e3       	ldi	r30, 0x3A	; 58
    1f4c:	f0 e0       	ldi	r31, 0x00	; 0
    1f4e:	80 81       	ld	r24, Z
    1f50:	89 83       	std	Y+1, r24	; 0x01
    1f52:	11 c0       	rjmp	.+34     	; 0x1f76 <DIO_u8SetPortInputType+0x8a>
		break;
	case DIO_PORT_1:
		Copy_LocalValue = DIRECTION_PORT1;
    1f54:	e7 e3       	ldi	r30, 0x37	; 55
    1f56:	f0 e0       	ldi	r31, 0x00	; 0
    1f58:	80 81       	ld	r24, Z
    1f5a:	89 83       	std	Y+1, r24	; 0x01
    1f5c:	0c c0       	rjmp	.+24     	; 0x1f76 <DIO_u8SetPortInputType+0x8a>
		break;
	case DIO_PORT_2:
		Copy_LocalValue = DIRECTION_PORT2;
    1f5e:	e4 e3       	ldi	r30, 0x34	; 52
    1f60:	f0 e0       	ldi	r31, 0x00	; 0
    1f62:	80 81       	ld	r24, Z
    1f64:	89 83       	std	Y+1, r24	; 0x01
    1f66:	07 c0       	rjmp	.+14     	; 0x1f76 <DIO_u8SetPortInputType+0x8a>
		break;
	case DIO_PORT_3:
		Copy_LocalValue = DIRECTION_PORT3;
    1f68:	e1 e3       	ldi	r30, 0x31	; 49
    1f6a:	f0 e0       	ldi	r31, 0x00	; 0
    1f6c:	80 81       	ld	r24, Z
    1f6e:	89 83       	std	Y+1, r24	; 0x01
    1f70:	02 c0       	rjmp	.+4      	; 0x1f76 <DIO_u8SetPortInputType+0x8a>
		break;
	default:
		Copy_LocalStatus = ERROR;
    1f72:	81 e0       	ldi	r24, 0x01	; 1
    1f74:	8a 83       	std	Y+2, r24	; 0x02
		break;
	}

	/* check if the port has the same value of Copy_u8InputType*/
	if ((Copy_LocalValue != NO_ERROR))
    1f76:	89 81       	ldd	r24, Y+1	; 0x01
    1f78:	88 23       	and	r24, r24
    1f7a:	21 f0       	breq	.+8      	; 0x1f84 <DIO_u8SetPortInputType+0x98>
	{
		Local_u8Error = ERROR;
    1f7c:	81 e0       	ldi	r24, 0x01	; 1
    1f7e:	8b 83       	std	Y+3, r24	; 0x03
		Copy_LocalStatus = ERROR;
    1f80:	81 e0       	ldi	r24, 0x01	; 1
    1f82:	8a 83       	std	Y+2, r24	; 0x02
	}
	if (Copy_LocalStatus != ERROR)
    1f84:	8a 81       	ldd	r24, Y+2	; 0x02
    1f86:	81 30       	cpi	r24, 0x01	; 1
    1f88:	b1 f1       	breq	.+108    	; 0x1ff6 <DIO_u8SetPortInputType+0x10a>
	{
		if ((Copy_u8InputType >= DIO_INPUT) && (Copy_u8InputType <= DIO_ALL))
		{
			switch (Copy_u8PortNB)                /*Switch case on PORT Number*/
    1f8a:	8c 81       	ldd	r24, Y+4	; 0x04
    1f8c:	28 2f       	mov	r18, r24
    1f8e:	30 e0       	ldi	r19, 0x00	; 0
    1f90:	3f 83       	std	Y+7, r19	; 0x07
    1f92:	2e 83       	std	Y+6, r18	; 0x06
    1f94:	8e 81       	ldd	r24, Y+6	; 0x06
    1f96:	9f 81       	ldd	r25, Y+7	; 0x07
    1f98:	81 30       	cpi	r24, 0x01	; 1
    1f9a:	91 05       	cpc	r25, r1
    1f9c:	d1 f0       	breq	.+52     	; 0x1fd2 <DIO_u8SetPortInputType+0xe6>
    1f9e:	2e 81       	ldd	r18, Y+6	; 0x06
    1fa0:	3f 81       	ldd	r19, Y+7	; 0x07
    1fa2:	22 30       	cpi	r18, 0x02	; 2
    1fa4:	31 05       	cpc	r19, r1
    1fa6:	2c f4       	brge	.+10     	; 0x1fb2 <DIO_u8SetPortInputType+0xc6>
    1fa8:	8e 81       	ldd	r24, Y+6	; 0x06
    1faa:	9f 81       	ldd	r25, Y+7	; 0x07
    1fac:	00 97       	sbiw	r24, 0x00	; 0
    1fae:	61 f0       	breq	.+24     	; 0x1fc8 <DIO_u8SetPortInputType+0xdc>
    1fb0:	1f c0       	rjmp	.+62     	; 0x1ff0 <DIO_u8SetPortInputType+0x104>
    1fb2:	2e 81       	ldd	r18, Y+6	; 0x06
    1fb4:	3f 81       	ldd	r19, Y+7	; 0x07
    1fb6:	22 30       	cpi	r18, 0x02	; 2
    1fb8:	31 05       	cpc	r19, r1
    1fba:	81 f0       	breq	.+32     	; 0x1fdc <DIO_u8SetPortInputType+0xf0>
    1fbc:	8e 81       	ldd	r24, Y+6	; 0x06
    1fbe:	9f 81       	ldd	r25, Y+7	; 0x07
    1fc0:	83 30       	cpi	r24, 0x03	; 3
    1fc2:	91 05       	cpc	r25, r1
    1fc4:	81 f0       	breq	.+32     	; 0x1fe6 <DIO_u8SetPortInputType+0xfa>
    1fc6:	14 c0       	rjmp	.+40     	; 0x1ff0 <DIO_u8SetPortInputType+0x104>
			{
				case DIO_PORT_0 :                 /*InCase PORTA*/
					VALUE_PORT0= Copy_u8InputType;          /*Set PORTA Value*/
    1fc8:	eb e3       	ldi	r30, 0x3B	; 59
    1fca:	f0 e0       	ldi	r31, 0x00	; 0
    1fcc:	8d 81       	ldd	r24, Y+5	; 0x05
    1fce:	80 83       	st	Z, r24
    1fd0:	14 c0       	rjmp	.+40     	; 0x1ffa <DIO_u8SetPortInputType+0x10e>
					break;
				case DIO_PORT_1 :                 /*InCase PORTB*/
					VALUE_PORT1= Copy_u8InputType;          /*Set PORTB Value*/
    1fd2:	e8 e3       	ldi	r30, 0x38	; 56
    1fd4:	f0 e0       	ldi	r31, 0x00	; 0
    1fd6:	8d 81       	ldd	r24, Y+5	; 0x05
    1fd8:	80 83       	st	Z, r24
    1fda:	0f c0       	rjmp	.+30     	; 0x1ffa <DIO_u8SetPortInputType+0x10e>
					break;
				case DIO_PORT_2 :                 /*InCase PORTC*/
					VALUE_PORT2= Copy_u8InputType;          /*Set PORTC Value*/
    1fdc:	e5 e3       	ldi	r30, 0x35	; 53
    1fde:	f0 e0       	ldi	r31, 0x00	; 0
    1fe0:	8d 81       	ldd	r24, Y+5	; 0x05
    1fe2:	80 83       	st	Z, r24
    1fe4:	0a c0       	rjmp	.+20     	; 0x1ffa <DIO_u8SetPortInputType+0x10e>
					break;
				case DIO_PORT_3 :                 /*InCase PORTD*/
					VALUE_PORT3= Copy_u8InputType;          /*Set PORTD Value*/
    1fe6:	e2 e3       	ldi	r30, 0x32	; 50
    1fe8:	f0 e0       	ldi	r31, 0x00	; 0
    1fea:	8d 81       	ldd	r24, Y+5	; 0x05
    1fec:	80 83       	st	Z, r24
    1fee:	05 c0       	rjmp	.+10     	; 0x1ffa <DIO_u8SetPortInputType+0x10e>
					break;
				default :                        /*Other Case Wrong PORT NO*/
				Local_u8Error=ERROR;                 /*Error Flag*/
    1ff0:	81 e0       	ldi	r24, 0x01	; 1
    1ff2:	8b 83       	std	Y+3, r24	; 0x03
    1ff4:	02 c0       	rjmp	.+4      	; 0x1ffa <DIO_u8SetPortInputType+0x10e>
			Local_u8Error=ERROR;
		}
	}
	else
	{
		Local_u8Error=ERROR;
    1ff6:	81 e0       	ldi	r24, 0x01	; 1
    1ff8:	8b 83       	std	Y+3, r24	; 0x03
	}

	/*Return Error State*/
	return Local_u8Error;       /*if ERROR exist it return 1 if NO ERROR return 0*/
    1ffa:	8b 81       	ldd	r24, Y+3	; 0x03

}
    1ffc:	29 96       	adiw	r28, 0x09	; 9
    1ffe:	0f b6       	in	r0, 0x3f	; 63
    2000:	f8 94       	cli
    2002:	de bf       	out	0x3e, r29	; 62
    2004:	0f be       	out	0x3f, r0	; 63
    2006:	cd bf       	out	0x3d, r28	; 61
    2008:	cf 91       	pop	r28
    200a:	df 91       	pop	r29
    200c:	08 95       	ret

0000200e <DIO_u8SetPinInputType>:
/*Description: Set PORT Type in case of INPUT Direction (PULL UP or FLOATING)
 * Input     :  Copy_u8PortNB (PORT Number),Copy_u8PinN(PIN NO) ,Copy_u8InputType(1 for PULL UP and 0 for FLOATING)
 * Output    : Return Error Status (Error or NO Error)
 * */
uint8_t DIO_u8SetPinInputType(uint8_t Copy_u8PinN,uint8_t Copy_u8InputType)
{
    200e:	df 93       	push	r29
    2010:	cf 93       	push	r28
    2012:	00 d0       	rcall	.+0      	; 0x2014 <DIO_u8SetPinInputType+0x6>
    2014:	00 d0       	rcall	.+0      	; 0x2016 <DIO_u8SetPinInputType+0x8>
    2016:	0f 92       	push	r0
    2018:	cd b7       	in	r28, 0x3d	; 61
    201a:	de b7       	in	r29, 0x3e	; 62
    201c:	8c 83       	std	Y+4, r24	; 0x04
    201e:	6d 83       	std	Y+5, r22	; 0x05
	uint8_t Local_u8Error=NO_ERROR,Copy_LocalStatus = NO_ERROR,Copy_LocalValue = DIO_OUTPUT;	/* check if any error happened. 0 fail/1 success*/
    2020:	1b 82       	std	Y+3, r1	; 0x03
    2022:	1a 82       	std	Y+2, r1	; 0x02
    2024:	81 e0       	ldi	r24, 0x01	; 1
    2026:	89 83       	std	Y+1, r24	; 0x01
	/* Copy_LocalValue = 1 in case the port number wrong*/


	if(Copy_u8PinN>=0 && Copy_u8PinN<PIN_PER_PORT)
    2028:	8c 81       	ldd	r24, Y+4	; 0x04
    202a:	88 30       	cpi	r24, 0x08	; 8
    202c:	90 f4       	brcc	.+36     	; 0x2052 <DIO_u8SetPinInputType+0x44>
	{		/*InCase PORTA*/
		Copy_LocalValue = GET_BIT(DIRECTION_PORT0,Copy_u8PinN);  /*ASSIGN PIN NO to read direction*/
    202e:	ea e3       	ldi	r30, 0x3A	; 58
    2030:	f0 e0       	ldi	r31, 0x00	; 0
    2032:	80 81       	ld	r24, Z
    2034:	28 2f       	mov	r18, r24
    2036:	30 e0       	ldi	r19, 0x00	; 0
    2038:	8c 81       	ldd	r24, Y+4	; 0x04
    203a:	88 2f       	mov	r24, r24
    203c:	90 e0       	ldi	r25, 0x00	; 0
    203e:	a9 01       	movw	r20, r18
    2040:	02 c0       	rjmp	.+4      	; 0x2046 <DIO_u8SetPinInputType+0x38>
    2042:	55 95       	asr	r21
    2044:	47 95       	ror	r20
    2046:	8a 95       	dec	r24
    2048:	e2 f7       	brpl	.-8      	; 0x2042 <DIO_u8SetPinInputType+0x34>
    204a:	ca 01       	movw	r24, r20
    204c:	81 70       	andi	r24, 0x01	; 1
    204e:	89 83       	std	Y+1, r24	; 0x01
    2050:	4d c0       	rjmp	.+154    	; 0x20ec <DIO_u8SetPinInputType+0xde>
	}
	else if(Copy_u8PinN>=PIN_PER_PORT && Copy_u8PinN<(DIO_PORT_1+1)*PIN_PER_PORT)
    2052:	8c 81       	ldd	r24, Y+4	; 0x04
    2054:	88 30       	cpi	r24, 0x08	; 8
    2056:	b0 f0       	brcs	.+44     	; 0x2084 <DIO_u8SetPinInputType+0x76>
    2058:	8c 81       	ldd	r24, Y+4	; 0x04
    205a:	80 31       	cpi	r24, 0x10	; 16
    205c:	98 f4       	brcc	.+38     	; 0x2084 <DIO_u8SetPinInputType+0x76>
	{
										/*InCase PORTB*/
		Copy_LocalValue = GET_BIT(DIRECTION_PORT1,(Copy_u8PinN-(PIN_PER_PORT)));      /*ASSIGN PIN NO to read direction*/
    205e:	e7 e3       	ldi	r30, 0x37	; 55
    2060:	f0 e0       	ldi	r31, 0x00	; 0
    2062:	80 81       	ld	r24, Z
    2064:	28 2f       	mov	r18, r24
    2066:	30 e0       	ldi	r19, 0x00	; 0
    2068:	8c 81       	ldd	r24, Y+4	; 0x04
    206a:	88 2f       	mov	r24, r24
    206c:	90 e0       	ldi	r25, 0x00	; 0
    206e:	08 97       	sbiw	r24, 0x08	; 8
    2070:	b9 01       	movw	r22, r18
    2072:	02 c0       	rjmp	.+4      	; 0x2078 <DIO_u8SetPinInputType+0x6a>
    2074:	75 95       	asr	r23
    2076:	67 95       	ror	r22
    2078:	8a 95       	dec	r24
    207a:	e2 f7       	brpl	.-8      	; 0x2074 <DIO_u8SetPinInputType+0x66>
    207c:	cb 01       	movw	r24, r22
    207e:	81 70       	andi	r24, 0x01	; 1
    2080:	89 83       	std	Y+1, r24	; 0x01
    2082:	34 c0       	rjmp	.+104    	; 0x20ec <DIO_u8SetPinInputType+0xde>
	}
	else if(Copy_u8PinN>=2*PIN_PER_PORT && Copy_u8PinN<(DIO_PORT_2+1)*PIN_PER_PORT)
    2084:	8c 81       	ldd	r24, Y+4	; 0x04
    2086:	80 31       	cpi	r24, 0x10	; 16
    2088:	b0 f0       	brcs	.+44     	; 0x20b6 <DIO_u8SetPinInputType+0xa8>
    208a:	8c 81       	ldd	r24, Y+4	; 0x04
    208c:	88 31       	cpi	r24, 0x18	; 24
    208e:	98 f4       	brcc	.+38     	; 0x20b6 <DIO_u8SetPinInputType+0xa8>
	{
									   /*InCase PORTC*/
		Copy_LocalValue = GET_BIT(DIRECTION_PORT2,(Copy_u8PinN-(2*PIN_PER_PORT)));     /*ASSIGN PIN NO to read direction*/
    2090:	e4 e3       	ldi	r30, 0x34	; 52
    2092:	f0 e0       	ldi	r31, 0x00	; 0
    2094:	80 81       	ld	r24, Z
    2096:	28 2f       	mov	r18, r24
    2098:	30 e0       	ldi	r19, 0x00	; 0
    209a:	8c 81       	ldd	r24, Y+4	; 0x04
    209c:	88 2f       	mov	r24, r24
    209e:	90 e0       	ldi	r25, 0x00	; 0
    20a0:	40 97       	sbiw	r24, 0x10	; 16
    20a2:	a9 01       	movw	r20, r18
    20a4:	02 c0       	rjmp	.+4      	; 0x20aa <DIO_u8SetPinInputType+0x9c>
    20a6:	55 95       	asr	r21
    20a8:	47 95       	ror	r20
    20aa:	8a 95       	dec	r24
    20ac:	e2 f7       	brpl	.-8      	; 0x20a6 <DIO_u8SetPinInputType+0x98>
    20ae:	ca 01       	movw	r24, r20
    20b0:	81 70       	andi	r24, 0x01	; 1
    20b2:	89 83       	std	Y+1, r24	; 0x01
    20b4:	1b c0       	rjmp	.+54     	; 0x20ec <DIO_u8SetPinInputType+0xde>
	}
	else if(Copy_u8PinN>=3*PIN_PER_PORT && Copy_u8PinN<(DIO_PORT_3+1)*PIN_PER_PORT)
    20b6:	8c 81       	ldd	r24, Y+4	; 0x04
    20b8:	88 31       	cpi	r24, 0x18	; 24
    20ba:	b0 f0       	brcs	.+44     	; 0x20e8 <DIO_u8SetPinInputType+0xda>
    20bc:	8c 81       	ldd	r24, Y+4	; 0x04
    20be:	80 32       	cpi	r24, 0x20	; 32
    20c0:	98 f4       	brcc	.+38     	; 0x20e8 <DIO_u8SetPinInputType+0xda>
	{
									   /*InCase PORTD*/
		Copy_LocalValue = GET_BIT(DIRECTION_PORT3,(Copy_u8PinN-(3*PIN_PER_PORT)));     /*ASSIGN PIN NO to read direction*/
    20c2:	e1 e3       	ldi	r30, 0x31	; 49
    20c4:	f0 e0       	ldi	r31, 0x00	; 0
    20c6:	80 81       	ld	r24, Z
    20c8:	28 2f       	mov	r18, r24
    20ca:	30 e0       	ldi	r19, 0x00	; 0
    20cc:	8c 81       	ldd	r24, Y+4	; 0x04
    20ce:	88 2f       	mov	r24, r24
    20d0:	90 e0       	ldi	r25, 0x00	; 0
    20d2:	48 97       	sbiw	r24, 0x18	; 24
    20d4:	b9 01       	movw	r22, r18
    20d6:	02 c0       	rjmp	.+4      	; 0x20dc <DIO_u8SetPinInputType+0xce>
    20d8:	75 95       	asr	r23
    20da:	67 95       	ror	r22
    20dc:	8a 95       	dec	r24
    20de:	e2 f7       	brpl	.-8      	; 0x20d8 <DIO_u8SetPinInputType+0xca>
    20e0:	cb 01       	movw	r24, r22
    20e2:	81 70       	andi	r24, 0x01	; 1
    20e4:	89 83       	std	Y+1, r24	; 0x01
    20e6:	02 c0       	rjmp	.+4      	; 0x20ec <DIO_u8SetPinInputType+0xde>
	}
	else
	{
		/*Other Case Wrong PORT NO*/
		Copy_LocalStatus=ERROR;                         /*Error Flag*/
    20e8:	81 e0       	ldi	r24, 0x01	; 1
    20ea:	8a 83       	std	Y+2, r24	; 0x02
	}


	/* check if the port has the same value of Copy_u8InputType*/
	if (Copy_LocalValue != NO_ERROR)
    20ec:	89 81       	ldd	r24, Y+1	; 0x01
    20ee:	88 23       	and	r24, r24
    20f0:	21 f0       	breq	.+8      	; 0x20fa <DIO_u8SetPinInputType+0xec>
	{
		Local_u8Error = ERROR;
    20f2:	81 e0       	ldi	r24, 0x01	; 1
    20f4:	8b 83       	std	Y+3, r24	; 0x03
		Copy_LocalStatus = ERROR;
    20f6:	81 e0       	ldi	r24, 0x01	; 1
    20f8:	8a 83       	std	Y+2, r24	; 0x02
	}    
	/*Local Error State*/
	if (Copy_LocalStatus != ERROR)
    20fa:	8a 81       	ldd	r24, Y+2	; 0x02
    20fc:	81 30       	cpi	r24, 0x01	; 1
    20fe:	09 f4       	brne	.+2      	; 0x2102 <DIO_u8SetPinInputType+0xf4>
    2100:	bb c0       	rjmp	.+374    	; 0x2278 <DIO_u8SetPinInputType+0x26a>
	{

			if(Copy_u8PinN>MAX_PIN_NO)    /*Check if Entered PIN NO. is more Than 7*/
    2102:	8c 81       	ldd	r24, Y+4	; 0x04
    2104:	80 32       	cpi	r24, 0x20	; 32
    2106:	18 f0       	brcs	.+6      	; 0x210e <DIO_u8SetPinInputType+0x100>
			{
				Local_u8Error=ERROR;         /*Return ERROR*/
    2108:	81 e0       	ldi	r24, 0x01	; 1
    210a:	8b 83       	std	Y+3, r24	; 0x03
    210c:	b7 c0       	rjmp	.+366    	; 0x227c <DIO_u8SetPinInputType+0x26e>
			}
			else if(Copy_u8InputType != DIO_LOW && Copy_u8InputType != DIO_HIGH)  /*Check if entered PIN Direction is not INPUT or OUTPUT*/
    210e:	8d 81       	ldd	r24, Y+5	; 0x05
    2110:	88 23       	and	r24, r24
    2112:	31 f0       	breq	.+12     	; 0x2120 <DIO_u8SetPinInputType+0x112>
    2114:	8d 81       	ldd	r24, Y+5	; 0x05
    2116:	81 30       	cpi	r24, 0x01	; 1
    2118:	19 f0       	breq	.+6      	; 0x2120 <DIO_u8SetPinInputType+0x112>
			{
				Local_u8Error=ERROR;      /*Return ERROR*/
    211a:	81 e0       	ldi	r24, 0x01	; 1
    211c:	8b 83       	std	Y+3, r24	; 0x03
    211e:	ae c0       	rjmp	.+348    	; 0x227c <DIO_u8SetPinInputType+0x26e>
			}
			else                     /*Entered PIN NO is not more than 7 and Direction is INPUT or OUTPUT*/
			{
				if(Copy_u8PinN>=0 && Copy_u8PinN<PIN_PER_PORT)
    2120:	8c 81       	ldd	r24, Y+4	; 0x04
    2122:	88 30       	cpi	r24, 0x08	; 8
    2124:	10 f5       	brcc	.+68     	; 0x216a <DIO_u8SetPinInputType+0x15c>
				{		/*InCase PORTA*/
					ASSIGN_BIT(VALUE_PORT0,Copy_u8PinN,Copy_u8InputType); /*ASSIGN PIN NO to read direction*/
    2126:	ab e3       	ldi	r26, 0x3B	; 59
    2128:	b0 e0       	ldi	r27, 0x00	; 0
    212a:	eb e3       	ldi	r30, 0x3B	; 59
    212c:	f0 e0       	ldi	r31, 0x00	; 0
    212e:	80 81       	ld	r24, Z
    2130:	48 2f       	mov	r20, r24
    2132:	8c 81       	ldd	r24, Y+4	; 0x04
    2134:	28 2f       	mov	r18, r24
    2136:	30 e0       	ldi	r19, 0x00	; 0
    2138:	81 e0       	ldi	r24, 0x01	; 1
    213a:	90 e0       	ldi	r25, 0x00	; 0
    213c:	02 c0       	rjmp	.+4      	; 0x2142 <DIO_u8SetPinInputType+0x134>
    213e:	88 0f       	add	r24, r24
    2140:	99 1f       	adc	r25, r25
    2142:	2a 95       	dec	r18
    2144:	e2 f7       	brpl	.-8      	; 0x213e <DIO_u8SetPinInputType+0x130>
    2146:	80 95       	com	r24
    2148:	48 23       	and	r20, r24
    214a:	8d 81       	ldd	r24, Y+5	; 0x05
    214c:	28 2f       	mov	r18, r24
    214e:	30 e0       	ldi	r19, 0x00	; 0
    2150:	8c 81       	ldd	r24, Y+4	; 0x04
    2152:	88 2f       	mov	r24, r24
    2154:	90 e0       	ldi	r25, 0x00	; 0
    2156:	b9 01       	movw	r22, r18
    2158:	02 c0       	rjmp	.+4      	; 0x215e <DIO_u8SetPinInputType+0x150>
    215a:	66 0f       	add	r22, r22
    215c:	77 1f       	adc	r23, r23
    215e:	8a 95       	dec	r24
    2160:	e2 f7       	brpl	.-8      	; 0x215a <DIO_u8SetPinInputType+0x14c>
    2162:	cb 01       	movw	r24, r22
    2164:	84 2b       	or	r24, r20
    2166:	8c 93       	st	X, r24
    2168:	89 c0       	rjmp	.+274    	; 0x227c <DIO_u8SetPinInputType+0x26e>
				}
				else if(Copy_u8PinN>=PIN_PER_PORT && Copy_u8PinN<(DIO_PORT_1+1)*PIN_PER_PORT)
    216a:	8c 81       	ldd	r24, Y+4	; 0x04
    216c:	88 30       	cpi	r24, 0x08	; 8
    216e:	48 f1       	brcs	.+82     	; 0x21c2 <DIO_u8SetPinInputType+0x1b4>
    2170:	8c 81       	ldd	r24, Y+4	; 0x04
    2172:	80 31       	cpi	r24, 0x10	; 16
    2174:	30 f5       	brcc	.+76     	; 0x21c2 <DIO_u8SetPinInputType+0x1b4>
				{
													/*InCase PORTB*/
					ASSIGN_BIT(VALUE_PORT1,(Copy_u8PinN-(PIN_PER_PORT)),Copy_u8InputType);      /*ASSIGN PIN NO to read direction*/
    2176:	a8 e3       	ldi	r26, 0x38	; 56
    2178:	b0 e0       	ldi	r27, 0x00	; 0
    217a:	e8 e3       	ldi	r30, 0x38	; 56
    217c:	f0 e0       	ldi	r31, 0x00	; 0
    217e:	80 81       	ld	r24, Z
    2180:	48 2f       	mov	r20, r24
    2182:	8c 81       	ldd	r24, Y+4	; 0x04
    2184:	88 2f       	mov	r24, r24
    2186:	90 e0       	ldi	r25, 0x00	; 0
    2188:	9c 01       	movw	r18, r24
    218a:	28 50       	subi	r18, 0x08	; 8
    218c:	30 40       	sbci	r19, 0x00	; 0
    218e:	81 e0       	ldi	r24, 0x01	; 1
    2190:	90 e0       	ldi	r25, 0x00	; 0
    2192:	02 c0       	rjmp	.+4      	; 0x2198 <DIO_u8SetPinInputType+0x18a>
    2194:	88 0f       	add	r24, r24
    2196:	99 1f       	adc	r25, r25
    2198:	2a 95       	dec	r18
    219a:	e2 f7       	brpl	.-8      	; 0x2194 <DIO_u8SetPinInputType+0x186>
    219c:	80 95       	com	r24
    219e:	48 23       	and	r20, r24
    21a0:	8d 81       	ldd	r24, Y+5	; 0x05
    21a2:	28 2f       	mov	r18, r24
    21a4:	30 e0       	ldi	r19, 0x00	; 0
    21a6:	8c 81       	ldd	r24, Y+4	; 0x04
    21a8:	88 2f       	mov	r24, r24
    21aa:	90 e0       	ldi	r25, 0x00	; 0
    21ac:	08 97       	sbiw	r24, 0x08	; 8
    21ae:	b9 01       	movw	r22, r18
    21b0:	02 c0       	rjmp	.+4      	; 0x21b6 <DIO_u8SetPinInputType+0x1a8>
    21b2:	66 0f       	add	r22, r22
    21b4:	77 1f       	adc	r23, r23
    21b6:	8a 95       	dec	r24
    21b8:	e2 f7       	brpl	.-8      	; 0x21b2 <DIO_u8SetPinInputType+0x1a4>
    21ba:	cb 01       	movw	r24, r22
    21bc:	84 2b       	or	r24, r20
    21be:	8c 93       	st	X, r24
    21c0:	5d c0       	rjmp	.+186    	; 0x227c <DIO_u8SetPinInputType+0x26e>
				}
				else if(Copy_u8PinN>=2*PIN_PER_PORT && Copy_u8PinN<(DIO_PORT_2+1)*PIN_PER_PORT)
    21c2:	8c 81       	ldd	r24, Y+4	; 0x04
    21c4:	80 31       	cpi	r24, 0x10	; 16
    21c6:	48 f1       	brcs	.+82     	; 0x221a <DIO_u8SetPinInputType+0x20c>
    21c8:	8c 81       	ldd	r24, Y+4	; 0x04
    21ca:	88 31       	cpi	r24, 0x18	; 24
    21cc:	30 f5       	brcc	.+76     	; 0x221a <DIO_u8SetPinInputType+0x20c>
				{
												   /*InCase PORTC*/
					ASSIGN_BIT(VALUE_PORT2,(Copy_u8PinN-(2*PIN_PER_PORT)),Copy_u8InputType);     /*ASSIGN PIN NO to read direction*/
    21ce:	a5 e3       	ldi	r26, 0x35	; 53
    21d0:	b0 e0       	ldi	r27, 0x00	; 0
    21d2:	e5 e3       	ldi	r30, 0x35	; 53
    21d4:	f0 e0       	ldi	r31, 0x00	; 0
    21d6:	80 81       	ld	r24, Z
    21d8:	48 2f       	mov	r20, r24
    21da:	8c 81       	ldd	r24, Y+4	; 0x04
    21dc:	88 2f       	mov	r24, r24
    21de:	90 e0       	ldi	r25, 0x00	; 0
    21e0:	9c 01       	movw	r18, r24
    21e2:	20 51       	subi	r18, 0x10	; 16
    21e4:	30 40       	sbci	r19, 0x00	; 0
    21e6:	81 e0       	ldi	r24, 0x01	; 1
    21e8:	90 e0       	ldi	r25, 0x00	; 0
    21ea:	02 c0       	rjmp	.+4      	; 0x21f0 <DIO_u8SetPinInputType+0x1e2>
    21ec:	88 0f       	add	r24, r24
    21ee:	99 1f       	adc	r25, r25
    21f0:	2a 95       	dec	r18
    21f2:	e2 f7       	brpl	.-8      	; 0x21ec <DIO_u8SetPinInputType+0x1de>
    21f4:	80 95       	com	r24
    21f6:	48 23       	and	r20, r24
    21f8:	8d 81       	ldd	r24, Y+5	; 0x05
    21fa:	28 2f       	mov	r18, r24
    21fc:	30 e0       	ldi	r19, 0x00	; 0
    21fe:	8c 81       	ldd	r24, Y+4	; 0x04
    2200:	88 2f       	mov	r24, r24
    2202:	90 e0       	ldi	r25, 0x00	; 0
    2204:	40 97       	sbiw	r24, 0x10	; 16
    2206:	b9 01       	movw	r22, r18
    2208:	02 c0       	rjmp	.+4      	; 0x220e <DIO_u8SetPinInputType+0x200>
    220a:	66 0f       	add	r22, r22
    220c:	77 1f       	adc	r23, r23
    220e:	8a 95       	dec	r24
    2210:	e2 f7       	brpl	.-8      	; 0x220a <DIO_u8SetPinInputType+0x1fc>
    2212:	cb 01       	movw	r24, r22
    2214:	84 2b       	or	r24, r20
    2216:	8c 93       	st	X, r24
    2218:	31 c0       	rjmp	.+98     	; 0x227c <DIO_u8SetPinInputType+0x26e>
				}
				else if(Copy_u8PinN>=3*PIN_PER_PORT && Copy_u8PinN<(DIO_PORT_3+1)*PIN_PER_PORT)
    221a:	8c 81       	ldd	r24, Y+4	; 0x04
    221c:	88 31       	cpi	r24, 0x18	; 24
    221e:	48 f1       	brcs	.+82     	; 0x2272 <DIO_u8SetPinInputType+0x264>
    2220:	8c 81       	ldd	r24, Y+4	; 0x04
    2222:	80 32       	cpi	r24, 0x20	; 32
    2224:	30 f5       	brcc	.+76     	; 0x2272 <DIO_u8SetPinInputType+0x264>
				{
												   /*InCase PORTD*/
					ASSIGN_BIT(VALUE_PORT3,(Copy_u8PinN-(3*PIN_PER_PORT)),Copy_u8InputType);    /*ASSIGN PIN NO to read direction*/
    2226:	a2 e3       	ldi	r26, 0x32	; 50
    2228:	b0 e0       	ldi	r27, 0x00	; 0
    222a:	e2 e3       	ldi	r30, 0x32	; 50
    222c:	f0 e0       	ldi	r31, 0x00	; 0
    222e:	80 81       	ld	r24, Z
    2230:	48 2f       	mov	r20, r24
    2232:	8c 81       	ldd	r24, Y+4	; 0x04
    2234:	88 2f       	mov	r24, r24
    2236:	90 e0       	ldi	r25, 0x00	; 0
    2238:	9c 01       	movw	r18, r24
    223a:	28 51       	subi	r18, 0x18	; 24
    223c:	30 40       	sbci	r19, 0x00	; 0
    223e:	81 e0       	ldi	r24, 0x01	; 1
    2240:	90 e0       	ldi	r25, 0x00	; 0
    2242:	02 c0       	rjmp	.+4      	; 0x2248 <DIO_u8SetPinInputType+0x23a>
    2244:	88 0f       	add	r24, r24
    2246:	99 1f       	adc	r25, r25
    2248:	2a 95       	dec	r18
    224a:	e2 f7       	brpl	.-8      	; 0x2244 <DIO_u8SetPinInputType+0x236>
    224c:	80 95       	com	r24
    224e:	48 23       	and	r20, r24
    2250:	8d 81       	ldd	r24, Y+5	; 0x05
    2252:	28 2f       	mov	r18, r24
    2254:	30 e0       	ldi	r19, 0x00	; 0
    2256:	8c 81       	ldd	r24, Y+4	; 0x04
    2258:	88 2f       	mov	r24, r24
    225a:	90 e0       	ldi	r25, 0x00	; 0
    225c:	48 97       	sbiw	r24, 0x18	; 24
    225e:	b9 01       	movw	r22, r18
    2260:	02 c0       	rjmp	.+4      	; 0x2266 <DIO_u8SetPinInputType+0x258>
    2262:	66 0f       	add	r22, r22
    2264:	77 1f       	adc	r23, r23
    2266:	8a 95       	dec	r24
    2268:	e2 f7       	brpl	.-8      	; 0x2262 <DIO_u8SetPinInputType+0x254>
    226a:	cb 01       	movw	r24, r22
    226c:	84 2b       	or	r24, r20
    226e:	8c 93       	st	X, r24
    2270:	05 c0       	rjmp	.+10     	; 0x227c <DIO_u8SetPinInputType+0x26e>
				}
				else
				{
					/*Other Case Wrong PORT NO*/
					Copy_LocalStatus=ERROR;                         /*Error Flag*/
    2272:	81 e0       	ldi	r24, 0x01	; 1
    2274:	8a 83       	std	Y+2, r24	; 0x02
    2276:	02 c0       	rjmp	.+4      	; 0x227c <DIO_u8SetPinInputType+0x26e>
				}
			}
	}
	else
	{
		Local_u8Error=ERROR;
    2278:	81 e0       	ldi	r24, 0x01	; 1
    227a:	8b 83       	std	Y+3, r24	; 0x03
	}

			return Local_u8Error;  /*if ERROR exist it return 1 if NO ERROR return 0*/
    227c:	8b 81       	ldd	r24, Y+3	; 0x03
}
    227e:	0f 90       	pop	r0
    2280:	0f 90       	pop	r0
    2282:	0f 90       	pop	r0
    2284:	0f 90       	pop	r0
    2286:	0f 90       	pop	r0
    2288:	cf 91       	pop	r28
    228a:	df 91       	pop	r29
    228c:	08 95       	ret

0000228e <LCD_u8WriteCommand>:
 * Input     : Copy_u8Command(Command to LCD)
 * Output    : NA
 * _____________________________________________________________________________________
 * */
void LCD_u8WriteCommand(uint8_t Copy_u8Command)
{
    228e:	df 93       	push	r29
    2290:	cf 93       	push	r28
    2292:	cd b7       	in	r28, 0x3d	; 61
    2294:	de b7       	in	r29, 0x3e	; 62
    2296:	2f 97       	sbiw	r28, 0x0f	; 15
    2298:	0f b6       	in	r0, 0x3f	; 63
    229a:	f8 94       	cli
    229c:	de bf       	out	0x3e, r29	; 62
    229e:	0f be       	out	0x3f, r0	; 63
    22a0:	cd bf       	out	0x3d, r28	; 61
    22a2:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_u8SetPinValue(LCD_E_PIN,DIO_LOW);    /*E=0    Stop Enable*/
    22a4:	8c e1       	ldi	r24, 0x1C	; 28
    22a6:	60 e0       	ldi	r22, 0x00	; 0
    22a8:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <DIO_u8SetPinValue>

	DIO_u8SetPinValue(LCD_RS_PIN,DIO_LOW);   /*RS=0  0 for Command and 1 for DATA*/
    22ac:	8a e1       	ldi	r24, 0x1A	; 26
    22ae:	60 e0       	ldi	r22, 0x00	; 0
    22b0:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <DIO_u8SetPinValue>

	DIO_u8SetPinValue(LCD_RW_PIN,DIO_LOW);   /*RW=0  0 for Write and 1 for Read*/
    22b4:	8b e1       	ldi	r24, 0x1B	; 27
    22b6:	60 e0       	ldi	r22, 0x00	; 0
    22b8:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <DIO_u8SetPinValue>

	DIO_u8SetPortValue(LCD_DATA_PORT,Copy_u8Command);      /*Command*/
    22bc:	82 e0       	ldi	r24, 0x02	; 2
    22be:	6f 85       	ldd	r22, Y+15	; 0x0f
    22c0:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <DIO_u8SetPortValue>

	DIO_u8SetPinValue(LCD_E_PIN,DIO_HIGH);   /*E=1 Sequence Start Enable*/
    22c4:	8c e1       	ldi	r24, 0x1C	; 28
    22c6:	61 e0       	ldi	r22, 0x01	; 1
    22c8:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <DIO_u8SetPinValue>
    22cc:	80 e0       	ldi	r24, 0x00	; 0
    22ce:	90 e0       	ldi	r25, 0x00	; 0
    22d0:	a0 e0       	ldi	r26, 0x00	; 0
    22d2:	b0 e4       	ldi	r27, 0x40	; 64
    22d4:	8b 87       	std	Y+11, r24	; 0x0b
    22d6:	9c 87       	std	Y+12, r25	; 0x0c
    22d8:	ad 87       	std	Y+13, r26	; 0x0d
    22da:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22dc:	6b 85       	ldd	r22, Y+11	; 0x0b
    22de:	7c 85       	ldd	r23, Y+12	; 0x0c
    22e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    22e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    22e4:	20 e0       	ldi	r18, 0x00	; 0
    22e6:	30 e0       	ldi	r19, 0x00	; 0
    22e8:	4a ef       	ldi	r20, 0xFA	; 250
    22ea:	54 e4       	ldi	r21, 0x44	; 68
    22ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22f0:	dc 01       	movw	r26, r24
    22f2:	cb 01       	movw	r24, r22
    22f4:	8f 83       	std	Y+7, r24	; 0x07
    22f6:	98 87       	std	Y+8, r25	; 0x08
    22f8:	a9 87       	std	Y+9, r26	; 0x09
    22fa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    22fc:	6f 81       	ldd	r22, Y+7	; 0x07
    22fe:	78 85       	ldd	r23, Y+8	; 0x08
    2300:	89 85       	ldd	r24, Y+9	; 0x09
    2302:	9a 85       	ldd	r25, Y+10	; 0x0a
    2304:	20 e0       	ldi	r18, 0x00	; 0
    2306:	30 e0       	ldi	r19, 0x00	; 0
    2308:	40 e8       	ldi	r20, 0x80	; 128
    230a:	5f e3       	ldi	r21, 0x3F	; 63
    230c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2310:	88 23       	and	r24, r24
    2312:	2c f4       	brge	.+10     	; 0x231e <LCD_u8WriteCommand+0x90>
		__ticks = 1;
    2314:	81 e0       	ldi	r24, 0x01	; 1
    2316:	90 e0       	ldi	r25, 0x00	; 0
    2318:	9e 83       	std	Y+6, r25	; 0x06
    231a:	8d 83       	std	Y+5, r24	; 0x05
    231c:	3f c0       	rjmp	.+126    	; 0x239c <LCD_u8WriteCommand+0x10e>
	else if (__tmp > 65535)
    231e:	6f 81       	ldd	r22, Y+7	; 0x07
    2320:	78 85       	ldd	r23, Y+8	; 0x08
    2322:	89 85       	ldd	r24, Y+9	; 0x09
    2324:	9a 85       	ldd	r25, Y+10	; 0x0a
    2326:	20 e0       	ldi	r18, 0x00	; 0
    2328:	3f ef       	ldi	r19, 0xFF	; 255
    232a:	4f e7       	ldi	r20, 0x7F	; 127
    232c:	57 e4       	ldi	r21, 0x47	; 71
    232e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2332:	18 16       	cp	r1, r24
    2334:	4c f5       	brge	.+82     	; 0x2388 <LCD_u8WriteCommand+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2336:	6b 85       	ldd	r22, Y+11	; 0x0b
    2338:	7c 85       	ldd	r23, Y+12	; 0x0c
    233a:	8d 85       	ldd	r24, Y+13	; 0x0d
    233c:	9e 85       	ldd	r25, Y+14	; 0x0e
    233e:	20 e0       	ldi	r18, 0x00	; 0
    2340:	30 e0       	ldi	r19, 0x00	; 0
    2342:	40 e2       	ldi	r20, 0x20	; 32
    2344:	51 e4       	ldi	r21, 0x41	; 65
    2346:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    234a:	dc 01       	movw	r26, r24
    234c:	cb 01       	movw	r24, r22
    234e:	bc 01       	movw	r22, r24
    2350:	cd 01       	movw	r24, r26
    2352:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2356:	dc 01       	movw	r26, r24
    2358:	cb 01       	movw	r24, r22
    235a:	9e 83       	std	Y+6, r25	; 0x06
    235c:	8d 83       	std	Y+5, r24	; 0x05
    235e:	0f c0       	rjmp	.+30     	; 0x237e <LCD_u8WriteCommand+0xf0>
    2360:	88 ec       	ldi	r24, 0xC8	; 200
    2362:	90 e0       	ldi	r25, 0x00	; 0
    2364:	9c 83       	std	Y+4, r25	; 0x04
    2366:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2368:	8b 81       	ldd	r24, Y+3	; 0x03
    236a:	9c 81       	ldd	r25, Y+4	; 0x04
    236c:	01 97       	sbiw	r24, 0x01	; 1
    236e:	f1 f7       	brne	.-4      	; 0x236c <LCD_u8WriteCommand+0xde>
    2370:	9c 83       	std	Y+4, r25	; 0x04
    2372:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2374:	8d 81       	ldd	r24, Y+5	; 0x05
    2376:	9e 81       	ldd	r25, Y+6	; 0x06
    2378:	01 97       	sbiw	r24, 0x01	; 1
    237a:	9e 83       	std	Y+6, r25	; 0x06
    237c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    237e:	8d 81       	ldd	r24, Y+5	; 0x05
    2380:	9e 81       	ldd	r25, Y+6	; 0x06
    2382:	00 97       	sbiw	r24, 0x00	; 0
    2384:	69 f7       	brne	.-38     	; 0x2360 <LCD_u8WriteCommand+0xd2>
    2386:	14 c0       	rjmp	.+40     	; 0x23b0 <LCD_u8WriteCommand+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2388:	6f 81       	ldd	r22, Y+7	; 0x07
    238a:	78 85       	ldd	r23, Y+8	; 0x08
    238c:	89 85       	ldd	r24, Y+9	; 0x09
    238e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2390:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2394:	dc 01       	movw	r26, r24
    2396:	cb 01       	movw	r24, r22
    2398:	9e 83       	std	Y+6, r25	; 0x06
    239a:	8d 83       	std	Y+5, r24	; 0x05
    239c:	8d 81       	ldd	r24, Y+5	; 0x05
    239e:	9e 81       	ldd	r25, Y+6	; 0x06
    23a0:	9a 83       	std	Y+2, r25	; 0x02
    23a2:	89 83       	std	Y+1, r24	; 0x01
    23a4:	89 81       	ldd	r24, Y+1	; 0x01
    23a6:	9a 81       	ldd	r25, Y+2	; 0x02
    23a8:	01 97       	sbiw	r24, 0x01	; 1
    23aa:	f1 f7       	brne	.-4      	; 0x23a8 <LCD_u8WriteCommand+0x11a>
    23ac:	9a 83       	std	Y+2, r25	; 0x02
    23ae:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(2);                                          /*Delay for 2 ms*/

	DIO_u8SetPinValue(LCD_E_PIN,DIO_LOW);    /*E=0   Stop Enable*/
    23b0:	8c e1       	ldi	r24, 0x1C	; 28
    23b2:	60 e0       	ldi	r22, 0x00	; 0
    23b4:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <DIO_u8SetPinValue>

}
    23b8:	2f 96       	adiw	r28, 0x0f	; 15
    23ba:	0f b6       	in	r0, 0x3f	; 63
    23bc:	f8 94       	cli
    23be:	de bf       	out	0x3e, r29	; 62
    23c0:	0f be       	out	0x3f, r0	; 63
    23c2:	cd bf       	out	0x3d, r28	; 61
    23c4:	cf 91       	pop	r28
    23c6:	df 91       	pop	r29
    23c8:	08 95       	ret

000023ca <LCD_u8WriteData>:
 * Input     :Copy_u8Data (Data to send)
 * Output    : NA
 * _________________________________________________________________________________________
 * */
void LCD_u8WriteData(uint8_t Copy_u8Data)
{
    23ca:	df 93       	push	r29
    23cc:	cf 93       	push	r28
    23ce:	cd b7       	in	r28, 0x3d	; 61
    23d0:	de b7       	in	r29, 0x3e	; 62
    23d2:	2f 97       	sbiw	r28, 0x0f	; 15
    23d4:	0f b6       	in	r0, 0x3f	; 63
    23d6:	f8 94       	cli
    23d8:	de bf       	out	0x3e, r29	; 62
    23da:	0f be       	out	0x3f, r0	; 63
    23dc:	cd bf       	out	0x3d, r28	; 61
    23de:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_u8SetPinValue(LCD_E_PIN,DIO_LOW);     /*E=0    Stop Enable*/
    23e0:	8c e1       	ldi	r24, 0x1C	; 28
    23e2:	60 e0       	ldi	r22, 0x00	; 0
    23e4:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <DIO_u8SetPinValue>

	DIO_u8SetPinValue(LCD_RS_PIN,DIO_HIGH);   /*RS=1  0 for Command and 1 for DATA*/
    23e8:	8a e1       	ldi	r24, 0x1A	; 26
    23ea:	61 e0       	ldi	r22, 0x01	; 1
    23ec:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <DIO_u8SetPinValue>

	DIO_u8SetPinValue(LCD_RW_PIN,DIO_LOW);    /*RW=0  0 for Write and 1 for Read*/
    23f0:	8b e1       	ldi	r24, 0x1B	; 27
    23f2:	60 e0       	ldi	r22, 0x00	; 0
    23f4:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <DIO_u8SetPinValue>

	DIO_u8SetPortValue(LCD_DATA_PORT,Copy_u8Data);          /*DATA*/
    23f8:	82 e0       	ldi	r24, 0x02	; 2
    23fa:	6f 85       	ldd	r22, Y+15	; 0x0f
    23fc:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <DIO_u8SetPortValue>

	DIO_u8SetPinValue(LCD_E_PIN,DIO_HIGH);    /*E=1 Sequence Start Enable*/
    2400:	8c e1       	ldi	r24, 0x1C	; 28
    2402:	61 e0       	ldi	r22, 0x01	; 1
    2404:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <DIO_u8SetPinValue>
    2408:	80 e0       	ldi	r24, 0x00	; 0
    240a:	90 e0       	ldi	r25, 0x00	; 0
    240c:	a0 e0       	ldi	r26, 0x00	; 0
    240e:	b0 e4       	ldi	r27, 0x40	; 64
    2410:	8b 87       	std	Y+11, r24	; 0x0b
    2412:	9c 87       	std	Y+12, r25	; 0x0c
    2414:	ad 87       	std	Y+13, r26	; 0x0d
    2416:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2418:	6b 85       	ldd	r22, Y+11	; 0x0b
    241a:	7c 85       	ldd	r23, Y+12	; 0x0c
    241c:	8d 85       	ldd	r24, Y+13	; 0x0d
    241e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2420:	20 e0       	ldi	r18, 0x00	; 0
    2422:	30 e0       	ldi	r19, 0x00	; 0
    2424:	4a ef       	ldi	r20, 0xFA	; 250
    2426:	54 e4       	ldi	r21, 0x44	; 68
    2428:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    242c:	dc 01       	movw	r26, r24
    242e:	cb 01       	movw	r24, r22
    2430:	8f 83       	std	Y+7, r24	; 0x07
    2432:	98 87       	std	Y+8, r25	; 0x08
    2434:	a9 87       	std	Y+9, r26	; 0x09
    2436:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2438:	6f 81       	ldd	r22, Y+7	; 0x07
    243a:	78 85       	ldd	r23, Y+8	; 0x08
    243c:	89 85       	ldd	r24, Y+9	; 0x09
    243e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2440:	20 e0       	ldi	r18, 0x00	; 0
    2442:	30 e0       	ldi	r19, 0x00	; 0
    2444:	40 e8       	ldi	r20, 0x80	; 128
    2446:	5f e3       	ldi	r21, 0x3F	; 63
    2448:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    244c:	88 23       	and	r24, r24
    244e:	2c f4       	brge	.+10     	; 0x245a <LCD_u8WriteData+0x90>
		__ticks = 1;
    2450:	81 e0       	ldi	r24, 0x01	; 1
    2452:	90 e0       	ldi	r25, 0x00	; 0
    2454:	9e 83       	std	Y+6, r25	; 0x06
    2456:	8d 83       	std	Y+5, r24	; 0x05
    2458:	3f c0       	rjmp	.+126    	; 0x24d8 <LCD_u8WriteData+0x10e>
	else if (__tmp > 65535)
    245a:	6f 81       	ldd	r22, Y+7	; 0x07
    245c:	78 85       	ldd	r23, Y+8	; 0x08
    245e:	89 85       	ldd	r24, Y+9	; 0x09
    2460:	9a 85       	ldd	r25, Y+10	; 0x0a
    2462:	20 e0       	ldi	r18, 0x00	; 0
    2464:	3f ef       	ldi	r19, 0xFF	; 255
    2466:	4f e7       	ldi	r20, 0x7F	; 127
    2468:	57 e4       	ldi	r21, 0x47	; 71
    246a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    246e:	18 16       	cp	r1, r24
    2470:	4c f5       	brge	.+82     	; 0x24c4 <LCD_u8WriteData+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2472:	6b 85       	ldd	r22, Y+11	; 0x0b
    2474:	7c 85       	ldd	r23, Y+12	; 0x0c
    2476:	8d 85       	ldd	r24, Y+13	; 0x0d
    2478:	9e 85       	ldd	r25, Y+14	; 0x0e
    247a:	20 e0       	ldi	r18, 0x00	; 0
    247c:	30 e0       	ldi	r19, 0x00	; 0
    247e:	40 e2       	ldi	r20, 0x20	; 32
    2480:	51 e4       	ldi	r21, 0x41	; 65
    2482:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2486:	dc 01       	movw	r26, r24
    2488:	cb 01       	movw	r24, r22
    248a:	bc 01       	movw	r22, r24
    248c:	cd 01       	movw	r24, r26
    248e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2492:	dc 01       	movw	r26, r24
    2494:	cb 01       	movw	r24, r22
    2496:	9e 83       	std	Y+6, r25	; 0x06
    2498:	8d 83       	std	Y+5, r24	; 0x05
    249a:	0f c0       	rjmp	.+30     	; 0x24ba <LCD_u8WriteData+0xf0>
    249c:	88 ec       	ldi	r24, 0xC8	; 200
    249e:	90 e0       	ldi	r25, 0x00	; 0
    24a0:	9c 83       	std	Y+4, r25	; 0x04
    24a2:	8b 83       	std	Y+3, r24	; 0x03
    24a4:	8b 81       	ldd	r24, Y+3	; 0x03
    24a6:	9c 81       	ldd	r25, Y+4	; 0x04
    24a8:	01 97       	sbiw	r24, 0x01	; 1
    24aa:	f1 f7       	brne	.-4      	; 0x24a8 <LCD_u8WriteData+0xde>
    24ac:	9c 83       	std	Y+4, r25	; 0x04
    24ae:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24b0:	8d 81       	ldd	r24, Y+5	; 0x05
    24b2:	9e 81       	ldd	r25, Y+6	; 0x06
    24b4:	01 97       	sbiw	r24, 0x01	; 1
    24b6:	9e 83       	std	Y+6, r25	; 0x06
    24b8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24ba:	8d 81       	ldd	r24, Y+5	; 0x05
    24bc:	9e 81       	ldd	r25, Y+6	; 0x06
    24be:	00 97       	sbiw	r24, 0x00	; 0
    24c0:	69 f7       	brne	.-38     	; 0x249c <LCD_u8WriteData+0xd2>
    24c2:	14 c0       	rjmp	.+40     	; 0x24ec <LCD_u8WriteData+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24c4:	6f 81       	ldd	r22, Y+7	; 0x07
    24c6:	78 85       	ldd	r23, Y+8	; 0x08
    24c8:	89 85       	ldd	r24, Y+9	; 0x09
    24ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    24cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24d0:	dc 01       	movw	r26, r24
    24d2:	cb 01       	movw	r24, r22
    24d4:	9e 83       	std	Y+6, r25	; 0x06
    24d6:	8d 83       	std	Y+5, r24	; 0x05
    24d8:	8d 81       	ldd	r24, Y+5	; 0x05
    24da:	9e 81       	ldd	r25, Y+6	; 0x06
    24dc:	9a 83       	std	Y+2, r25	; 0x02
    24de:	89 83       	std	Y+1, r24	; 0x01
    24e0:	89 81       	ldd	r24, Y+1	; 0x01
    24e2:	9a 81       	ldd	r25, Y+2	; 0x02
    24e4:	01 97       	sbiw	r24, 0x01	; 1
    24e6:	f1 f7       	brne	.-4      	; 0x24e4 <LCD_u8WriteData+0x11a>
    24e8:	9a 83       	std	Y+2, r25	; 0x02
    24ea:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(2);                                           /*Delay for 2 ms*/

	DIO_u8SetPinValue(LCD_E_PIN,DIO_LOW);     /*E=0   Stop Enable*/
    24ec:	8c e1       	ldi	r24, 0x1C	; 28
    24ee:	60 e0       	ldi	r22, 0x00	; 0
    24f0:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <DIO_u8SetPinValue>
}
    24f4:	2f 96       	adiw	r28, 0x0f	; 15
    24f6:	0f b6       	in	r0, 0x3f	; 63
    24f8:	f8 94       	cli
    24fa:	de bf       	out	0x3e, r29	; 62
    24fc:	0f be       	out	0x3f, r0	; 63
    24fe:	cd bf       	out	0x3d, r28	; 61
    2500:	cf 91       	pop	r28
    2502:	df 91       	pop	r29
    2504:	08 95       	ret

00002506 <LCD_voidInit>:
 * Input     :NA
 * Output    : NA
 *_________________________________________________________________________________________
 * */
void LCD_voidInit(void)
{
    2506:	df 93       	push	r29
    2508:	cf 93       	push	r28
    250a:	cd b7       	in	r28, 0x3d	; 61
    250c:	de b7       	in	r29, 0x3e	; 62
    250e:	e8 97       	sbiw	r28, 0x38	; 56
    2510:	0f b6       	in	r0, 0x3f	; 63
    2512:	f8 94       	cli
    2514:	de bf       	out	0x3e, r29	; 62
    2516:	0f be       	out	0x3f, r0	; 63
    2518:	cd bf       	out	0x3d, r28	; 61

	/*______________PIN Initialization_____________________________*/
	DIO_u8Init_PIN(LCD_RS_PIN,DIO_OUTPUT);
    251a:	8a e1       	ldi	r24, 0x1A	; 26
    251c:	61 e0       	ldi	r22, 0x01	; 1
    251e:	0e 94 b2 0c 	call	0x1964	; 0x1964 <DIO_u8Init_PIN>
	DIO_u8Init_PIN(LCD_RW_PIN,DIO_OUTPUT);
    2522:	8b e1       	ldi	r24, 0x1B	; 27
    2524:	61 e0       	ldi	r22, 0x01	; 1
    2526:	0e 94 b2 0c 	call	0x1964	; 0x1964 <DIO_u8Init_PIN>
	DIO_u8Init_PIN(LCD_E_PIN,DIO_OUTPUT);
    252a:	8c e1       	ldi	r24, 0x1C	; 28
    252c:	61 e0       	ldi	r22, 0x01	; 1
    252e:	0e 94 b2 0c 	call	0x1964	; 0x1964 <DIO_u8Init_PIN>

	DIO_u8Init_PORT(LCD_DATA_PORT,255);
    2532:	82 e0       	ldi	r24, 0x02	; 2
    2534:	6f ef       	ldi	r22, 0xFF	; 255
    2536:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <DIO_u8Init_PORT>
    253a:	80 e0       	ldi	r24, 0x00	; 0
    253c:	90 e0       	ldi	r25, 0x00	; 0
    253e:	a0 ef       	ldi	r26, 0xF0	; 240
    2540:	b1 e4       	ldi	r27, 0x41	; 65
    2542:	8d ab       	std	Y+53, r24	; 0x35
    2544:	9e ab       	std	Y+54, r25	; 0x36
    2546:	af ab       	std	Y+55, r26	; 0x37
    2548:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    254a:	6d a9       	ldd	r22, Y+53	; 0x35
    254c:	7e a9       	ldd	r23, Y+54	; 0x36
    254e:	8f a9       	ldd	r24, Y+55	; 0x37
    2550:	98 ad       	ldd	r25, Y+56	; 0x38
    2552:	20 e0       	ldi	r18, 0x00	; 0
    2554:	30 e0       	ldi	r19, 0x00	; 0
    2556:	4a ef       	ldi	r20, 0xFA	; 250
    2558:	54 e4       	ldi	r21, 0x44	; 68
    255a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    255e:	dc 01       	movw	r26, r24
    2560:	cb 01       	movw	r24, r22
    2562:	89 ab       	std	Y+49, r24	; 0x31
    2564:	9a ab       	std	Y+50, r25	; 0x32
    2566:	ab ab       	std	Y+51, r26	; 0x33
    2568:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    256a:	69 a9       	ldd	r22, Y+49	; 0x31
    256c:	7a a9       	ldd	r23, Y+50	; 0x32
    256e:	8b a9       	ldd	r24, Y+51	; 0x33
    2570:	9c a9       	ldd	r25, Y+52	; 0x34
    2572:	20 e0       	ldi	r18, 0x00	; 0
    2574:	30 e0       	ldi	r19, 0x00	; 0
    2576:	40 e8       	ldi	r20, 0x80	; 128
    2578:	5f e3       	ldi	r21, 0x3F	; 63
    257a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    257e:	88 23       	and	r24, r24
    2580:	2c f4       	brge	.+10     	; 0x258c <LCD_voidInit+0x86>
		__ticks = 1;
    2582:	81 e0       	ldi	r24, 0x01	; 1
    2584:	90 e0       	ldi	r25, 0x00	; 0
    2586:	98 ab       	std	Y+48, r25	; 0x30
    2588:	8f a7       	std	Y+47, r24	; 0x2f
    258a:	3f c0       	rjmp	.+126    	; 0x260a <LCD_voidInit+0x104>
	else if (__tmp > 65535)
    258c:	69 a9       	ldd	r22, Y+49	; 0x31
    258e:	7a a9       	ldd	r23, Y+50	; 0x32
    2590:	8b a9       	ldd	r24, Y+51	; 0x33
    2592:	9c a9       	ldd	r25, Y+52	; 0x34
    2594:	20 e0       	ldi	r18, 0x00	; 0
    2596:	3f ef       	ldi	r19, 0xFF	; 255
    2598:	4f e7       	ldi	r20, 0x7F	; 127
    259a:	57 e4       	ldi	r21, 0x47	; 71
    259c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25a0:	18 16       	cp	r1, r24
    25a2:	4c f5       	brge	.+82     	; 0x25f6 <LCD_voidInit+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25a4:	6d a9       	ldd	r22, Y+53	; 0x35
    25a6:	7e a9       	ldd	r23, Y+54	; 0x36
    25a8:	8f a9       	ldd	r24, Y+55	; 0x37
    25aa:	98 ad       	ldd	r25, Y+56	; 0x38
    25ac:	20 e0       	ldi	r18, 0x00	; 0
    25ae:	30 e0       	ldi	r19, 0x00	; 0
    25b0:	40 e2       	ldi	r20, 0x20	; 32
    25b2:	51 e4       	ldi	r21, 0x41	; 65
    25b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25b8:	dc 01       	movw	r26, r24
    25ba:	cb 01       	movw	r24, r22
    25bc:	bc 01       	movw	r22, r24
    25be:	cd 01       	movw	r24, r26
    25c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25c4:	dc 01       	movw	r26, r24
    25c6:	cb 01       	movw	r24, r22
    25c8:	98 ab       	std	Y+48, r25	; 0x30
    25ca:	8f a7       	std	Y+47, r24	; 0x2f
    25cc:	0f c0       	rjmp	.+30     	; 0x25ec <LCD_voidInit+0xe6>
    25ce:	88 ec       	ldi	r24, 0xC8	; 200
    25d0:	90 e0       	ldi	r25, 0x00	; 0
    25d2:	9e a7       	std	Y+46, r25	; 0x2e
    25d4:	8d a7       	std	Y+45, r24	; 0x2d
    25d6:	8d a5       	ldd	r24, Y+45	; 0x2d
    25d8:	9e a5       	ldd	r25, Y+46	; 0x2e
    25da:	01 97       	sbiw	r24, 0x01	; 1
    25dc:	f1 f7       	brne	.-4      	; 0x25da <LCD_voidInit+0xd4>
    25de:	9e a7       	std	Y+46, r25	; 0x2e
    25e0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25e2:	8f a5       	ldd	r24, Y+47	; 0x2f
    25e4:	98 a9       	ldd	r25, Y+48	; 0x30
    25e6:	01 97       	sbiw	r24, 0x01	; 1
    25e8:	98 ab       	std	Y+48, r25	; 0x30
    25ea:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25ec:	8f a5       	ldd	r24, Y+47	; 0x2f
    25ee:	98 a9       	ldd	r25, Y+48	; 0x30
    25f0:	00 97       	sbiw	r24, 0x00	; 0
    25f2:	69 f7       	brne	.-38     	; 0x25ce <LCD_voidInit+0xc8>
    25f4:	14 c0       	rjmp	.+40     	; 0x261e <LCD_voidInit+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25f6:	69 a9       	ldd	r22, Y+49	; 0x31
    25f8:	7a a9       	ldd	r23, Y+50	; 0x32
    25fa:	8b a9       	ldd	r24, Y+51	; 0x33
    25fc:	9c a9       	ldd	r25, Y+52	; 0x34
    25fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2602:	dc 01       	movw	r26, r24
    2604:	cb 01       	movw	r24, r22
    2606:	98 ab       	std	Y+48, r25	; 0x30
    2608:	8f a7       	std	Y+47, r24	; 0x2f
    260a:	8f a5       	ldd	r24, Y+47	; 0x2f
    260c:	98 a9       	ldd	r25, Y+48	; 0x30
    260e:	9c a7       	std	Y+44, r25	; 0x2c
    2610:	8b a7       	std	Y+43, r24	; 0x2b
    2612:	8b a5       	ldd	r24, Y+43	; 0x2b
    2614:	9c a5       	ldd	r25, Y+44	; 0x2c
    2616:	01 97       	sbiw	r24, 0x01	; 1
    2618:	f1 f7       	brne	.-4      	; 0x2616 <LCD_voidInit+0x110>
    261a:	9c a7       	std	Y+44, r25	; 0x2c
    261c:	8b a7       	std	Y+43, r24	; 0x2b
/*______________________________________________________________________________________________________________________*/

	_delay_ms(30);                  /*Delay 30 ms*/

	LCD_u8WriteCommand(0b00111000); /*0b0011NF00 Function Set Command N(number of lines 0 1line 1 2lines) F(Font Size 0 5x8 and 1 5x11) 0 0 (2 bits don't care)*/
    261e:	88 e3       	ldi	r24, 0x38	; 56
    2620:	0e 94 47 11 	call	0x228e	; 0x228e <LCD_u8WriteCommand>
    2624:	80 e0       	ldi	r24, 0x00	; 0
    2626:	90 e0       	ldi	r25, 0x00	; 0
    2628:	a0 e8       	ldi	r26, 0x80	; 128
    262a:	bf e3       	ldi	r27, 0x3F	; 63
    262c:	8f a3       	std	Y+39, r24	; 0x27
    262e:	98 a7       	std	Y+40, r25	; 0x28
    2630:	a9 a7       	std	Y+41, r26	; 0x29
    2632:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2634:	6f a1       	ldd	r22, Y+39	; 0x27
    2636:	78 a5       	ldd	r23, Y+40	; 0x28
    2638:	89 a5       	ldd	r24, Y+41	; 0x29
    263a:	9a a5       	ldd	r25, Y+42	; 0x2a
    263c:	20 e0       	ldi	r18, 0x00	; 0
    263e:	30 e0       	ldi	r19, 0x00	; 0
    2640:	4a ef       	ldi	r20, 0xFA	; 250
    2642:	54 e4       	ldi	r21, 0x44	; 68
    2644:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2648:	dc 01       	movw	r26, r24
    264a:	cb 01       	movw	r24, r22
    264c:	8b a3       	std	Y+35, r24	; 0x23
    264e:	9c a3       	std	Y+36, r25	; 0x24
    2650:	ad a3       	std	Y+37, r26	; 0x25
    2652:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2654:	6b a1       	ldd	r22, Y+35	; 0x23
    2656:	7c a1       	ldd	r23, Y+36	; 0x24
    2658:	8d a1       	ldd	r24, Y+37	; 0x25
    265a:	9e a1       	ldd	r25, Y+38	; 0x26
    265c:	20 e0       	ldi	r18, 0x00	; 0
    265e:	30 e0       	ldi	r19, 0x00	; 0
    2660:	40 e8       	ldi	r20, 0x80	; 128
    2662:	5f e3       	ldi	r21, 0x3F	; 63
    2664:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2668:	88 23       	and	r24, r24
    266a:	2c f4       	brge	.+10     	; 0x2676 <LCD_voidInit+0x170>
		__ticks = 1;
    266c:	81 e0       	ldi	r24, 0x01	; 1
    266e:	90 e0       	ldi	r25, 0x00	; 0
    2670:	9a a3       	std	Y+34, r25	; 0x22
    2672:	89 a3       	std	Y+33, r24	; 0x21
    2674:	3f c0       	rjmp	.+126    	; 0x26f4 <LCD_voidInit+0x1ee>
	else if (__tmp > 65535)
    2676:	6b a1       	ldd	r22, Y+35	; 0x23
    2678:	7c a1       	ldd	r23, Y+36	; 0x24
    267a:	8d a1       	ldd	r24, Y+37	; 0x25
    267c:	9e a1       	ldd	r25, Y+38	; 0x26
    267e:	20 e0       	ldi	r18, 0x00	; 0
    2680:	3f ef       	ldi	r19, 0xFF	; 255
    2682:	4f e7       	ldi	r20, 0x7F	; 127
    2684:	57 e4       	ldi	r21, 0x47	; 71
    2686:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    268a:	18 16       	cp	r1, r24
    268c:	4c f5       	brge	.+82     	; 0x26e0 <LCD_voidInit+0x1da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    268e:	6f a1       	ldd	r22, Y+39	; 0x27
    2690:	78 a5       	ldd	r23, Y+40	; 0x28
    2692:	89 a5       	ldd	r24, Y+41	; 0x29
    2694:	9a a5       	ldd	r25, Y+42	; 0x2a
    2696:	20 e0       	ldi	r18, 0x00	; 0
    2698:	30 e0       	ldi	r19, 0x00	; 0
    269a:	40 e2       	ldi	r20, 0x20	; 32
    269c:	51 e4       	ldi	r21, 0x41	; 65
    269e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26a2:	dc 01       	movw	r26, r24
    26a4:	cb 01       	movw	r24, r22
    26a6:	bc 01       	movw	r22, r24
    26a8:	cd 01       	movw	r24, r26
    26aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26ae:	dc 01       	movw	r26, r24
    26b0:	cb 01       	movw	r24, r22
    26b2:	9a a3       	std	Y+34, r25	; 0x22
    26b4:	89 a3       	std	Y+33, r24	; 0x21
    26b6:	0f c0       	rjmp	.+30     	; 0x26d6 <LCD_voidInit+0x1d0>
    26b8:	88 ec       	ldi	r24, 0xC8	; 200
    26ba:	90 e0       	ldi	r25, 0x00	; 0
    26bc:	98 a3       	std	Y+32, r25	; 0x20
    26be:	8f 8f       	std	Y+31, r24	; 0x1f
    26c0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    26c2:	98 a1       	ldd	r25, Y+32	; 0x20
    26c4:	01 97       	sbiw	r24, 0x01	; 1
    26c6:	f1 f7       	brne	.-4      	; 0x26c4 <LCD_voidInit+0x1be>
    26c8:	98 a3       	std	Y+32, r25	; 0x20
    26ca:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26cc:	89 a1       	ldd	r24, Y+33	; 0x21
    26ce:	9a a1       	ldd	r25, Y+34	; 0x22
    26d0:	01 97       	sbiw	r24, 0x01	; 1
    26d2:	9a a3       	std	Y+34, r25	; 0x22
    26d4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26d6:	89 a1       	ldd	r24, Y+33	; 0x21
    26d8:	9a a1       	ldd	r25, Y+34	; 0x22
    26da:	00 97       	sbiw	r24, 0x00	; 0
    26dc:	69 f7       	brne	.-38     	; 0x26b8 <LCD_voidInit+0x1b2>
    26de:	14 c0       	rjmp	.+40     	; 0x2708 <LCD_voidInit+0x202>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26e0:	6b a1       	ldd	r22, Y+35	; 0x23
    26e2:	7c a1       	ldd	r23, Y+36	; 0x24
    26e4:	8d a1       	ldd	r24, Y+37	; 0x25
    26e6:	9e a1       	ldd	r25, Y+38	; 0x26
    26e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26ec:	dc 01       	movw	r26, r24
    26ee:	cb 01       	movw	r24, r22
    26f0:	9a a3       	std	Y+34, r25	; 0x22
    26f2:	89 a3       	std	Y+33, r24	; 0x21
    26f4:	89 a1       	ldd	r24, Y+33	; 0x21
    26f6:	9a a1       	ldd	r25, Y+34	; 0x22
    26f8:	9e 8f       	std	Y+30, r25	; 0x1e
    26fa:	8d 8f       	std	Y+29, r24	; 0x1d
    26fc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    26fe:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2700:	01 97       	sbiw	r24, 0x01	; 1
    2702:	f1 f7       	brne	.-4      	; 0x2700 <LCD_voidInit+0x1fa>
    2704:	9e 8f       	std	Y+30, r25	; 0x1e
    2706:	8d 8f       	std	Y+29, r24	; 0x1d

	_delay_ms(1);                   /*Delay 1 ms*/

	LCD_u8WriteCommand(0b00001100); /*0b00001DCB D(display on/off) C (cursor on/off) B (cursor Blink 0 no blink 1 blink )*/
    2708:	8c e0       	ldi	r24, 0x0C	; 12
    270a:	0e 94 47 11 	call	0x228e	; 0x228e <LCD_u8WriteCommand>
    270e:	80 e0       	ldi	r24, 0x00	; 0
    2710:	90 e0       	ldi	r25, 0x00	; 0
    2712:	a0 e8       	ldi	r26, 0x80	; 128
    2714:	bf e3       	ldi	r27, 0x3F	; 63
    2716:	89 8f       	std	Y+25, r24	; 0x19
    2718:	9a 8f       	std	Y+26, r25	; 0x1a
    271a:	ab 8f       	std	Y+27, r26	; 0x1b
    271c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    271e:	69 8d       	ldd	r22, Y+25	; 0x19
    2720:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2722:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2724:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2726:	20 e0       	ldi	r18, 0x00	; 0
    2728:	30 e0       	ldi	r19, 0x00	; 0
    272a:	4a ef       	ldi	r20, 0xFA	; 250
    272c:	54 e4       	ldi	r21, 0x44	; 68
    272e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2732:	dc 01       	movw	r26, r24
    2734:	cb 01       	movw	r24, r22
    2736:	8d 8b       	std	Y+21, r24	; 0x15
    2738:	9e 8b       	std	Y+22, r25	; 0x16
    273a:	af 8b       	std	Y+23, r26	; 0x17
    273c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    273e:	6d 89       	ldd	r22, Y+21	; 0x15
    2740:	7e 89       	ldd	r23, Y+22	; 0x16
    2742:	8f 89       	ldd	r24, Y+23	; 0x17
    2744:	98 8d       	ldd	r25, Y+24	; 0x18
    2746:	20 e0       	ldi	r18, 0x00	; 0
    2748:	30 e0       	ldi	r19, 0x00	; 0
    274a:	40 e8       	ldi	r20, 0x80	; 128
    274c:	5f e3       	ldi	r21, 0x3F	; 63
    274e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2752:	88 23       	and	r24, r24
    2754:	2c f4       	brge	.+10     	; 0x2760 <LCD_voidInit+0x25a>
		__ticks = 1;
    2756:	81 e0       	ldi	r24, 0x01	; 1
    2758:	90 e0       	ldi	r25, 0x00	; 0
    275a:	9c 8b       	std	Y+20, r25	; 0x14
    275c:	8b 8b       	std	Y+19, r24	; 0x13
    275e:	3f c0       	rjmp	.+126    	; 0x27de <LCD_voidInit+0x2d8>
	else if (__tmp > 65535)
    2760:	6d 89       	ldd	r22, Y+21	; 0x15
    2762:	7e 89       	ldd	r23, Y+22	; 0x16
    2764:	8f 89       	ldd	r24, Y+23	; 0x17
    2766:	98 8d       	ldd	r25, Y+24	; 0x18
    2768:	20 e0       	ldi	r18, 0x00	; 0
    276a:	3f ef       	ldi	r19, 0xFF	; 255
    276c:	4f e7       	ldi	r20, 0x7F	; 127
    276e:	57 e4       	ldi	r21, 0x47	; 71
    2770:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2774:	18 16       	cp	r1, r24
    2776:	4c f5       	brge	.+82     	; 0x27ca <LCD_voidInit+0x2c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2778:	69 8d       	ldd	r22, Y+25	; 0x19
    277a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    277c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    277e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2780:	20 e0       	ldi	r18, 0x00	; 0
    2782:	30 e0       	ldi	r19, 0x00	; 0
    2784:	40 e2       	ldi	r20, 0x20	; 32
    2786:	51 e4       	ldi	r21, 0x41	; 65
    2788:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    278c:	dc 01       	movw	r26, r24
    278e:	cb 01       	movw	r24, r22
    2790:	bc 01       	movw	r22, r24
    2792:	cd 01       	movw	r24, r26
    2794:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2798:	dc 01       	movw	r26, r24
    279a:	cb 01       	movw	r24, r22
    279c:	9c 8b       	std	Y+20, r25	; 0x14
    279e:	8b 8b       	std	Y+19, r24	; 0x13
    27a0:	0f c0       	rjmp	.+30     	; 0x27c0 <LCD_voidInit+0x2ba>
    27a2:	88 ec       	ldi	r24, 0xC8	; 200
    27a4:	90 e0       	ldi	r25, 0x00	; 0
    27a6:	9a 8b       	std	Y+18, r25	; 0x12
    27a8:	89 8b       	std	Y+17, r24	; 0x11
    27aa:	89 89       	ldd	r24, Y+17	; 0x11
    27ac:	9a 89       	ldd	r25, Y+18	; 0x12
    27ae:	01 97       	sbiw	r24, 0x01	; 1
    27b0:	f1 f7       	brne	.-4      	; 0x27ae <LCD_voidInit+0x2a8>
    27b2:	9a 8b       	std	Y+18, r25	; 0x12
    27b4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27b6:	8b 89       	ldd	r24, Y+19	; 0x13
    27b8:	9c 89       	ldd	r25, Y+20	; 0x14
    27ba:	01 97       	sbiw	r24, 0x01	; 1
    27bc:	9c 8b       	std	Y+20, r25	; 0x14
    27be:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27c0:	8b 89       	ldd	r24, Y+19	; 0x13
    27c2:	9c 89       	ldd	r25, Y+20	; 0x14
    27c4:	00 97       	sbiw	r24, 0x00	; 0
    27c6:	69 f7       	brne	.-38     	; 0x27a2 <LCD_voidInit+0x29c>
    27c8:	14 c0       	rjmp	.+40     	; 0x27f2 <LCD_voidInit+0x2ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27ca:	6d 89       	ldd	r22, Y+21	; 0x15
    27cc:	7e 89       	ldd	r23, Y+22	; 0x16
    27ce:	8f 89       	ldd	r24, Y+23	; 0x17
    27d0:	98 8d       	ldd	r25, Y+24	; 0x18
    27d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27d6:	dc 01       	movw	r26, r24
    27d8:	cb 01       	movw	r24, r22
    27da:	9c 8b       	std	Y+20, r25	; 0x14
    27dc:	8b 8b       	std	Y+19, r24	; 0x13
    27de:	8b 89       	ldd	r24, Y+19	; 0x13
    27e0:	9c 89       	ldd	r25, Y+20	; 0x14
    27e2:	98 8b       	std	Y+16, r25	; 0x10
    27e4:	8f 87       	std	Y+15, r24	; 0x0f
    27e6:	8f 85       	ldd	r24, Y+15	; 0x0f
    27e8:	98 89       	ldd	r25, Y+16	; 0x10
    27ea:	01 97       	sbiw	r24, 0x01	; 1
    27ec:	f1 f7       	brne	.-4      	; 0x27ea <LCD_voidInit+0x2e4>
    27ee:	98 8b       	std	Y+16, r25	; 0x10
    27f0:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1);                   /*Delay 1 ms*/

	LCD_u8WriteCommand(0b00000001); /*LCD clr*/
    27f2:	81 e0       	ldi	r24, 0x01	; 1
    27f4:	0e 94 47 11 	call	0x228e	; 0x228e <LCD_u8WriteCommand>
    27f8:	80 e0       	ldi	r24, 0x00	; 0
    27fa:	90 e0       	ldi	r25, 0x00	; 0
    27fc:	a0 e0       	ldi	r26, 0x00	; 0
    27fe:	b0 e4       	ldi	r27, 0x40	; 64
    2800:	8b 87       	std	Y+11, r24	; 0x0b
    2802:	9c 87       	std	Y+12, r25	; 0x0c
    2804:	ad 87       	std	Y+13, r26	; 0x0d
    2806:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2808:	6b 85       	ldd	r22, Y+11	; 0x0b
    280a:	7c 85       	ldd	r23, Y+12	; 0x0c
    280c:	8d 85       	ldd	r24, Y+13	; 0x0d
    280e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2810:	20 e0       	ldi	r18, 0x00	; 0
    2812:	30 e0       	ldi	r19, 0x00	; 0
    2814:	4a ef       	ldi	r20, 0xFA	; 250
    2816:	54 e4       	ldi	r21, 0x44	; 68
    2818:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    281c:	dc 01       	movw	r26, r24
    281e:	cb 01       	movw	r24, r22
    2820:	8f 83       	std	Y+7, r24	; 0x07
    2822:	98 87       	std	Y+8, r25	; 0x08
    2824:	a9 87       	std	Y+9, r26	; 0x09
    2826:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2828:	6f 81       	ldd	r22, Y+7	; 0x07
    282a:	78 85       	ldd	r23, Y+8	; 0x08
    282c:	89 85       	ldd	r24, Y+9	; 0x09
    282e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2830:	20 e0       	ldi	r18, 0x00	; 0
    2832:	30 e0       	ldi	r19, 0x00	; 0
    2834:	40 e8       	ldi	r20, 0x80	; 128
    2836:	5f e3       	ldi	r21, 0x3F	; 63
    2838:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    283c:	88 23       	and	r24, r24
    283e:	2c f4       	brge	.+10     	; 0x284a <LCD_voidInit+0x344>
		__ticks = 1;
    2840:	81 e0       	ldi	r24, 0x01	; 1
    2842:	90 e0       	ldi	r25, 0x00	; 0
    2844:	9e 83       	std	Y+6, r25	; 0x06
    2846:	8d 83       	std	Y+5, r24	; 0x05
    2848:	3f c0       	rjmp	.+126    	; 0x28c8 <LCD_voidInit+0x3c2>
	else if (__tmp > 65535)
    284a:	6f 81       	ldd	r22, Y+7	; 0x07
    284c:	78 85       	ldd	r23, Y+8	; 0x08
    284e:	89 85       	ldd	r24, Y+9	; 0x09
    2850:	9a 85       	ldd	r25, Y+10	; 0x0a
    2852:	20 e0       	ldi	r18, 0x00	; 0
    2854:	3f ef       	ldi	r19, 0xFF	; 255
    2856:	4f e7       	ldi	r20, 0x7F	; 127
    2858:	57 e4       	ldi	r21, 0x47	; 71
    285a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    285e:	18 16       	cp	r1, r24
    2860:	4c f5       	brge	.+82     	; 0x28b4 <LCD_voidInit+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2862:	6b 85       	ldd	r22, Y+11	; 0x0b
    2864:	7c 85       	ldd	r23, Y+12	; 0x0c
    2866:	8d 85       	ldd	r24, Y+13	; 0x0d
    2868:	9e 85       	ldd	r25, Y+14	; 0x0e
    286a:	20 e0       	ldi	r18, 0x00	; 0
    286c:	30 e0       	ldi	r19, 0x00	; 0
    286e:	40 e2       	ldi	r20, 0x20	; 32
    2870:	51 e4       	ldi	r21, 0x41	; 65
    2872:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2876:	dc 01       	movw	r26, r24
    2878:	cb 01       	movw	r24, r22
    287a:	bc 01       	movw	r22, r24
    287c:	cd 01       	movw	r24, r26
    287e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2882:	dc 01       	movw	r26, r24
    2884:	cb 01       	movw	r24, r22
    2886:	9e 83       	std	Y+6, r25	; 0x06
    2888:	8d 83       	std	Y+5, r24	; 0x05
    288a:	0f c0       	rjmp	.+30     	; 0x28aa <LCD_voidInit+0x3a4>
    288c:	88 ec       	ldi	r24, 0xC8	; 200
    288e:	90 e0       	ldi	r25, 0x00	; 0
    2890:	9c 83       	std	Y+4, r25	; 0x04
    2892:	8b 83       	std	Y+3, r24	; 0x03
    2894:	8b 81       	ldd	r24, Y+3	; 0x03
    2896:	9c 81       	ldd	r25, Y+4	; 0x04
    2898:	01 97       	sbiw	r24, 0x01	; 1
    289a:	f1 f7       	brne	.-4      	; 0x2898 <LCD_voidInit+0x392>
    289c:	9c 83       	std	Y+4, r25	; 0x04
    289e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28a0:	8d 81       	ldd	r24, Y+5	; 0x05
    28a2:	9e 81       	ldd	r25, Y+6	; 0x06
    28a4:	01 97       	sbiw	r24, 0x01	; 1
    28a6:	9e 83       	std	Y+6, r25	; 0x06
    28a8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28aa:	8d 81       	ldd	r24, Y+5	; 0x05
    28ac:	9e 81       	ldd	r25, Y+6	; 0x06
    28ae:	00 97       	sbiw	r24, 0x00	; 0
    28b0:	69 f7       	brne	.-38     	; 0x288c <LCD_voidInit+0x386>
    28b2:	14 c0       	rjmp	.+40     	; 0x28dc <LCD_voidInit+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28b4:	6f 81       	ldd	r22, Y+7	; 0x07
    28b6:	78 85       	ldd	r23, Y+8	; 0x08
    28b8:	89 85       	ldd	r24, Y+9	; 0x09
    28ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    28bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28c0:	dc 01       	movw	r26, r24
    28c2:	cb 01       	movw	r24, r22
    28c4:	9e 83       	std	Y+6, r25	; 0x06
    28c6:	8d 83       	std	Y+5, r24	; 0x05
    28c8:	8d 81       	ldd	r24, Y+5	; 0x05
    28ca:	9e 81       	ldd	r25, Y+6	; 0x06
    28cc:	9a 83       	std	Y+2, r25	; 0x02
    28ce:	89 83       	std	Y+1, r24	; 0x01
    28d0:	89 81       	ldd	r24, Y+1	; 0x01
    28d2:	9a 81       	ldd	r25, Y+2	; 0x02
    28d4:	01 97       	sbiw	r24, 0x01	; 1
    28d6:	f1 f7       	brne	.-4      	; 0x28d4 <LCD_voidInit+0x3ce>
    28d8:	9a 83       	std	Y+2, r25	; 0x02
    28da:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(2);                   /*Delay 2 ms*/


}
    28dc:	e8 96       	adiw	r28, 0x38	; 56
    28de:	0f b6       	in	r0, 0x3f	; 63
    28e0:	f8 94       	cli
    28e2:	de bf       	out	0x3e, r29	; 62
    28e4:	0f be       	out	0x3f, r0	; 63
    28e6:	cd bf       	out	0x3d, r28	; 61
    28e8:	cf 91       	pop	r28
    28ea:	df 91       	pop	r29
    28ec:	08 95       	ret

000028ee <LCD_u8WriteString>:
 * Input     :*Copy_u8String (Pointer to the String),Copy_SizeArray(Size of String Array)
 * Output    : NA
 *___________________________________________________________________________________________
 * */
void LCD_u8WriteString(uint8_t *Copy_u8String)
{
    28ee:	df 93       	push	r29
    28f0:	cf 93       	push	r28
    28f2:	00 d0       	rcall	.+0      	; 0x28f4 <LCD_u8WriteString+0x6>
    28f4:	0f 92       	push	r0
    28f6:	cd b7       	in	r28, 0x3d	; 61
    28f8:	de b7       	in	r29, 0x3e	; 62
    28fa:	9b 83       	std	Y+3, r25	; 0x03
    28fc:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t Local_LoopCtr=0;   /*Variable for Loop from 0 to Size of String*/
    28fe:	19 82       	std	Y+1, r1	; 0x01
    2900:	0e c0       	rjmp	.+28     	; 0x291e <LCD_u8WriteString+0x30>
		LCD_u8WriteData(Copy_u8String[Local_LoopCtr]); //Write Data For each Single Char to form String
	}*/

	while(Copy_u8String[Local_LoopCtr] != NULL)
	{
		LCD_u8WriteData(Copy_u8String[Local_LoopCtr]);
    2902:	89 81       	ldd	r24, Y+1	; 0x01
    2904:	28 2f       	mov	r18, r24
    2906:	30 e0       	ldi	r19, 0x00	; 0
    2908:	8a 81       	ldd	r24, Y+2	; 0x02
    290a:	9b 81       	ldd	r25, Y+3	; 0x03
    290c:	fc 01       	movw	r30, r24
    290e:	e2 0f       	add	r30, r18
    2910:	f3 1f       	adc	r31, r19
    2912:	80 81       	ld	r24, Z
    2914:	0e 94 e5 11 	call	0x23ca	; 0x23ca <LCD_u8WriteData>
		Local_LoopCtr++;
    2918:	89 81       	ldd	r24, Y+1	; 0x01
    291a:	8f 5f       	subi	r24, 0xFF	; 255
    291c:	89 83       	std	Y+1, r24	; 0x01
/*	for(Local_LoopCtr=0;Local_LoopCtr<Copy_SizeArray;Local_LoopCtr++)
	{
		LCD_u8WriteData(Copy_u8String[Local_LoopCtr]); //Write Data For each Single Char to form String
	}*/

	while(Copy_u8String[Local_LoopCtr] != NULL)
    291e:	89 81       	ldd	r24, Y+1	; 0x01
    2920:	28 2f       	mov	r18, r24
    2922:	30 e0       	ldi	r19, 0x00	; 0
    2924:	8a 81       	ldd	r24, Y+2	; 0x02
    2926:	9b 81       	ldd	r25, Y+3	; 0x03
    2928:	fc 01       	movw	r30, r24
    292a:	e2 0f       	add	r30, r18
    292c:	f3 1f       	adc	r31, r19
    292e:	80 81       	ld	r24, Z
    2930:	88 23       	and	r24, r24
    2932:	39 f7       	brne	.-50     	; 0x2902 <LCD_u8WriteString+0x14>
	{
		LCD_u8WriteData(Copy_u8String[Local_LoopCtr]);
		Local_LoopCtr++;
	}
}
    2934:	0f 90       	pop	r0
    2936:	0f 90       	pop	r0
    2938:	0f 90       	pop	r0
    293a:	cf 91       	pop	r28
    293c:	df 91       	pop	r29
    293e:	08 95       	ret

00002940 <LCD_voidGoToXY>:
 * Input     :Copy_u8PosY(Column No.), Copy_u8PosX(Row No.)
 * Output    : NA
 *___________________________________________________________________________________________
 * */
void LCD_voidGoToXY(uint8_t Copy_u8PosY,uint8_t Copy_u8PosX)
{
    2940:	df 93       	push	r29
    2942:	cf 93       	push	r28
    2944:	00 d0       	rcall	.+0      	; 0x2946 <LCD_voidGoToXY+0x6>
    2946:	0f 92       	push	r0
    2948:	cd b7       	in	r28, 0x3d	; 61
    294a:	de b7       	in	r29, 0x3e	; 62
    294c:	8a 83       	std	Y+2, r24	; 0x02
    294e:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t Local_u8Adress;     /*variable to go to address of wanted ROW and Column*/

	if(Copy_u8PosY==0)     /*if Column No =1*/
    2950:	8a 81       	ldd	r24, Y+2	; 0x02
    2952:	88 23       	and	r24, r24
    2954:	21 f4       	brne	.+8      	; 0x295e <LCD_voidGoToXY+0x1e>
	{
		Local_u8Adress= 128 + Copy_u8PosX; /*Command starts with 10000000 and add to it address*/
    2956:	8b 81       	ldd	r24, Y+3	; 0x03
    2958:	80 58       	subi	r24, 0x80	; 128
    295a:	89 83       	std	Y+1, r24	; 0x01
    295c:	06 c0       	rjmp	.+12     	; 0x296a <LCD_voidGoToXY+0x2a>
	}
	else if(Copy_u8PosY==1)   /*if Column No=2*/
    295e:	8a 81       	ldd	r24, Y+2	; 0x02
    2960:	81 30       	cpi	r24, 0x01	; 1
    2962:	19 f4       	brne	.+6      	; 0x296a <LCD_voidGoToXY+0x2a>
	{
		Local_u8Adress=128+  0x40  +Copy_u8PosX; /*Command Starts with 10000000 and add 0x40 and add address*/
    2964:	8b 81       	ldd	r24, Y+3	; 0x03
    2966:	80 54       	subi	r24, 0x40	; 64
    2968:	89 83       	std	Y+1, r24	; 0x01
	}
/*or
 * if(Copy_u8PosY<2 && Copy_u8PosX<16)
 * adress=128+Copy_u8PosX+Copy_u8PosY*0x40
 */
	LCD_u8WriteCommand(Local_u8Adress);  /*Write Command*/
    296a:	89 81       	ldd	r24, Y+1	; 0x01
    296c:	0e 94 47 11 	call	0x228e	; 0x228e <LCD_u8WriteCommand>
}
    2970:	0f 90       	pop	r0
    2972:	0f 90       	pop	r0
    2974:	0f 90       	pop	r0
    2976:	cf 91       	pop	r28
    2978:	df 91       	pop	r29
    297a:	08 95       	ret

0000297c <LCD_voidEnable>:
 * Input     :NA
 * Output    : NA
 *___________________________________________________________________________________________
 * */
void LCD_voidEnable(void)
{
    297c:	df 93       	push	r29
    297e:	cf 93       	push	r28
    2980:	cd b7       	in	r28, 0x3d	; 61
    2982:	de b7       	in	r29, 0x3e	; 62
	LCD_u8WriteCommand(0b00001100); /*0b00001DCB D(display on/off) C (cursor on/off) B (cursor Blink 0 no blink 1 blink )*/
    2984:	8c e0       	ldi	r24, 0x0C	; 12
    2986:	0e 94 47 11 	call	0x228e	; 0x228e <LCD_u8WriteCommand>
}
    298a:	cf 91       	pop	r28
    298c:	df 91       	pop	r29
    298e:	08 95       	ret

00002990 <LCD_voidDisable>:
 * Input     :NA
 * Output    : NA
 *___________________________________________________________________________________________
 * */
void LCD_voidDisable(void)
{
    2990:	df 93       	push	r29
    2992:	cf 93       	push	r28
    2994:	cd b7       	in	r28, 0x3d	; 61
    2996:	de b7       	in	r29, 0x3e	; 62
	LCD_u8WriteCommand(0b00001000); /*0b00001DCB D(display on/off) C (cursor on/off) B (cursor Blink 0 no blink 1 blink )*/
    2998:	88 e0       	ldi	r24, 0x08	; 8
    299a:	0e 94 47 11 	call	0x228e	; 0x228e <LCD_u8WriteCommand>
}
    299e:	cf 91       	pop	r28
    29a0:	df 91       	pop	r29
    29a2:	08 95       	ret

000029a4 <LCD_voidCursorDisable>:
 * Input     :NA
 * Output    : NA
 *___________________________________________________________________________________________
 **/
void LCD_voidCursorDisable(void)
{
    29a4:	df 93       	push	r29
    29a6:	cf 93       	push	r28
    29a8:	cd b7       	in	r28, 0x3d	; 61
    29aa:	de b7       	in	r29, 0x3e	; 62
	LCD_u8WriteCommand(0b00001100); /*0b00001DCB D(display on/off) C (cursor on/off) B (cursor Blink 0 no blink 1 blink )*/
    29ac:	8c e0       	ldi	r24, 0x0C	; 12
    29ae:	0e 94 47 11 	call	0x228e	; 0x228e <LCD_u8WriteCommand>
}
    29b2:	cf 91       	pop	r28
    29b4:	df 91       	pop	r29
    29b6:	08 95       	ret

000029b8 <LCD_voidCursorEnable>:
 * Input     :NA
 * Output    : NA
 *___________________________________________________________________________________________
 **/
void LCD_voidCursorEnable(void)
{
    29b8:	df 93       	push	r29
    29ba:	cf 93       	push	r28
    29bc:	cd b7       	in	r28, 0x3d	; 61
    29be:	de b7       	in	r29, 0x3e	; 62
	LCD_u8WriteCommand(0b00001110); /*0b00001DCB D(display on/off) C (cursor on/off) B (cursor Blink 0 no blink 1 blink )*/
    29c0:	8e e0       	ldi	r24, 0x0E	; 14
    29c2:	0e 94 47 11 	call	0x228e	; 0x228e <LCD_u8WriteCommand>
}
    29c6:	cf 91       	pop	r28
    29c8:	df 91       	pop	r29
    29ca:	08 95       	ret

000029cc <LCD_voidCursorBlinkEnable>:
 * Input     :NA
 * Output    : NA
 *___________________________________________________________________________________________
 * */
void LCD_voidCursorBlinkEnable(void)
{
    29cc:	df 93       	push	r29
    29ce:	cf 93       	push	r28
    29d0:	cd b7       	in	r28, 0x3d	; 61
    29d2:	de b7       	in	r29, 0x3e	; 62
	LCD_u8WriteCommand(0b00001111); /*0b00001DCB D(display on/off) C (cursor on/off) B (cursor Blink 0 no blink 1 blink )*/
    29d4:	8f e0       	ldi	r24, 0x0F	; 15
    29d6:	0e 94 47 11 	call	0x228e	; 0x228e <LCD_u8WriteCommand>
}
    29da:	cf 91       	pop	r28
    29dc:	df 91       	pop	r29
    29de:	08 95       	ret

000029e0 <LCD_voidCursorBlinkDisable>:
 * Input     :NA
 * Output    : NA
 *___________________________________________________________________________________________
 * */
void LCD_voidCursorBlinkDisable(void)
{
    29e0:	df 93       	push	r29
    29e2:	cf 93       	push	r28
    29e4:	cd b7       	in	r28, 0x3d	; 61
    29e6:	de b7       	in	r29, 0x3e	; 62
	LCD_u8WriteCommand(0b00001110); /*0b00001DCB D(display on/off) C (cursor on/off) B (cursor Blink 0 no blink 1 blink )*/
    29e8:	8e e0       	ldi	r24, 0x0E	; 14
    29ea:	0e 94 47 11 	call	0x228e	; 0x228e <LCD_u8WriteCommand>
}
    29ee:	cf 91       	pop	r28
    29f0:	df 91       	pop	r29
    29f2:	08 95       	ret

000029f4 <LCD_voidWriteSpecialChar>:
 * Input     :Copy_u8NumberofData(Number of Special Characters), *Copy_u8Ptr(Pointer to send array of shape written in binary),Copy_u8PosY(column No.),Copy_u8PosX(Row No.)
 * Output    : NA
 *___________________________________________________________________________________________
 * */
void LCD_voidWriteSpecialChar(uint8_t Copy_u8NumberofData,uint8_t *Copy_u8Ptr,uint8_t Copy_u8PosY,uint8_t Copy_u8PosX)
{
    29f4:	df 93       	push	r29
    29f6:	cf 93       	push	r28
    29f8:	00 d0       	rcall	.+0      	; 0x29fa <LCD_voidWriteSpecialChar+0x6>
    29fa:	00 d0       	rcall	.+0      	; 0x29fc <LCD_voidWriteSpecialChar+0x8>
    29fc:	00 d0       	rcall	.+0      	; 0x29fe <LCD_voidWriteSpecialChar+0xa>
    29fe:	cd b7       	in	r28, 0x3d	; 61
    2a00:	de b7       	in	r29, 0x3e	; 62
    2a02:	8a 83       	std	Y+2, r24	; 0x02
    2a04:	7c 83       	std	Y+4, r23	; 0x04
    2a06:	6b 83       	std	Y+3, r22	; 0x03
    2a08:	4d 83       	std	Y+5, r20	; 0x05
    2a0a:	2e 83       	std	Y+6, r18	; 0x06
	LCD_u8WriteCommand(0b01000000);      /*Move AC from DDRAM to CGRAM*/
    2a0c:	80 e4       	ldi	r24, 0x40	; 64
    2a0e:	0e 94 47 11 	call	0x228e	; 0x228e <LCD_u8WriteCommand>
	uint8_t Local_u8Loop=0;
    2a12:	19 82       	std	Y+1, r1	; 0x01

	for(Local_u8Loop=0;Local_u8Loop<Copy_u8NumberofData*8;Local_u8Loop++) /*Loop from 0 to No of Special Characters *8(bit for each Character)*/
    2a14:	19 82       	std	Y+1, r1	; 0x01
    2a16:	0e c0       	rjmp	.+28     	; 0x2a34 <LCD_voidWriteSpecialChar+0x40>
		{
			LCD_u8WriteData(Copy_u8Ptr[Local_u8Loop]); /*Write Data to CGRAM*/
    2a18:	89 81       	ldd	r24, Y+1	; 0x01
    2a1a:	28 2f       	mov	r18, r24
    2a1c:	30 e0       	ldi	r19, 0x00	; 0
    2a1e:	8b 81       	ldd	r24, Y+3	; 0x03
    2a20:	9c 81       	ldd	r25, Y+4	; 0x04
    2a22:	fc 01       	movw	r30, r24
    2a24:	e2 0f       	add	r30, r18
    2a26:	f3 1f       	adc	r31, r19
    2a28:	80 81       	ld	r24, Z
    2a2a:	0e 94 e5 11 	call	0x23ca	; 0x23ca <LCD_u8WriteData>
void LCD_voidWriteSpecialChar(uint8_t Copy_u8NumberofData,uint8_t *Copy_u8Ptr,uint8_t Copy_u8PosY,uint8_t Copy_u8PosX)
{
	LCD_u8WriteCommand(0b01000000);      /*Move AC from DDRAM to CGRAM*/
	uint8_t Local_u8Loop=0;

	for(Local_u8Loop=0;Local_u8Loop<Copy_u8NumberofData*8;Local_u8Loop++) /*Loop from 0 to No of Special Characters *8(bit for each Character)*/
    2a2e:	89 81       	ldd	r24, Y+1	; 0x01
    2a30:	8f 5f       	subi	r24, 0xFF	; 255
    2a32:	89 83       	std	Y+1, r24	; 0x01
    2a34:	89 81       	ldd	r24, Y+1	; 0x01
    2a36:	28 2f       	mov	r18, r24
    2a38:	30 e0       	ldi	r19, 0x00	; 0
    2a3a:	8a 81       	ldd	r24, Y+2	; 0x02
    2a3c:	88 2f       	mov	r24, r24
    2a3e:	90 e0       	ldi	r25, 0x00	; 0
    2a40:	88 0f       	add	r24, r24
    2a42:	99 1f       	adc	r25, r25
    2a44:	88 0f       	add	r24, r24
    2a46:	99 1f       	adc	r25, r25
    2a48:	88 0f       	add	r24, r24
    2a4a:	99 1f       	adc	r25, r25
    2a4c:	28 17       	cp	r18, r24
    2a4e:	39 07       	cpc	r19, r25
    2a50:	1c f3       	brlt	.-58     	; 0x2a18 <LCD_voidWriteSpecialChar+0x24>
		{
			LCD_u8WriteData(Copy_u8Ptr[Local_u8Loop]); /*Write Data to CGRAM*/
		}
	LCD_voidGoToXY(Copy_u8PosY,Copy_u8PosX); /*Move AC back from CGRAM to DDRAM*/
    2a52:	8d 81       	ldd	r24, Y+5	; 0x05
    2a54:	6e 81       	ldd	r22, Y+6	; 0x06
    2a56:	0e 94 a0 14 	call	0x2940	; 0x2940 <LCD_voidGoToXY>

}
    2a5a:	26 96       	adiw	r28, 0x06	; 6
    2a5c:	0f b6       	in	r0, 0x3f	; 63
    2a5e:	f8 94       	cli
    2a60:	de bf       	out	0x3e, r29	; 62
    2a62:	0f be       	out	0x3f, r0	; 63
    2a64:	cd bf       	out	0x3d, r28	; 61
    2a66:	cf 91       	pop	r28
    2a68:	df 91       	pop	r29
    2a6a:	08 95       	ret

00002a6c <LCD_voidWriteNumber>:
 * Input     :Copy_u8IntValue (Integer Value)
 * Output    : NA
 *___________________________________________________________________________________________
 * */
void LCD_voidWriteNumber(uint32_t Copy_u16IntValue)
{
    2a6c:	df 93       	push	r29
    2a6e:	cf 93       	push	r28
    2a70:	cd b7       	in	r28, 0x3d	; 61
    2a72:	de b7       	in	r29, 0x3e	; 62
    2a74:	63 97       	sbiw	r28, 0x13	; 19
    2a76:	0f b6       	in	r0, 0x3f	; 63
    2a78:	f8 94       	cli
    2a7a:	de bf       	out	0x3e, r29	; 62
    2a7c:	0f be       	out	0x3f, r0	; 63
    2a7e:	cd bf       	out	0x3d, r28	; 61
    2a80:	68 8b       	std	Y+16, r22	; 0x10
    2a82:	79 8b       	std	Y+17, r23	; 0x11
    2a84:	8a 8b       	std	Y+18, r24	; 0x12
    2a86:	9b 8b       	std	Y+19, r25	; 0x13
	uint8_t Local_u8CharArr[10];            /*MAX No. of Integer Digits*/
	uint8_t Local_u8Count=1;               /*Variable to Count Digits*/
    2a88:	81 e0       	ldi	r24, 0x01	; 1
    2a8a:	8d 83       	std	Y+5, r24	; 0x05
	uint8_t Local_u8Count2;
	uint8_t Local_u8Loop=0;
    2a8c:	1b 82       	std	Y+3, r1	; 0x03
/*	itoa(Copy_u16IntValue , Local_u8CharArr , 10); Convert from Integer to String*/
	uint16_t Local_u16IntValue; /*Copy of integer Value as the original Value is not effected*/
	Local_u16IntValue=Copy_u16IntValue;
    2a8e:	88 89       	ldd	r24, Y+16	; 0x10
    2a90:	99 89       	ldd	r25, Y+17	; 0x11
    2a92:	9a 83       	std	Y+2, r25	; 0x02
    2a94:	89 83       	std	Y+1, r24	; 0x01
    2a96:	0d c0       	rjmp	.+26     	; 0x2ab2 <LCD_voidWriteNumber+0x46>
	while(Local_u16IntValue/10 != 0) /*while there is reminder*/
		{
			Local_u8Count++; /*increase No. of Digits by 1*/
    2a98:	8d 81       	ldd	r24, Y+5	; 0x05
    2a9a:	8f 5f       	subi	r24, 0xFF	; 255
    2a9c:	8d 83       	std	Y+5, r24	; 0x05
			Local_u16IntValue =	Local_u16IntValue/10; /*Divide it by 10 to decrease Number by digit that is already counted*/
    2a9e:	89 81       	ldd	r24, Y+1	; 0x01
    2aa0:	9a 81       	ldd	r25, Y+2	; 0x02
    2aa2:	2a e0       	ldi	r18, 0x0A	; 10
    2aa4:	30 e0       	ldi	r19, 0x00	; 0
    2aa6:	b9 01       	movw	r22, r18
    2aa8:	0e 94 c6 18 	call	0x318c	; 0x318c <__udivmodhi4>
    2aac:	cb 01       	movw	r24, r22
    2aae:	9a 83       	std	Y+2, r25	; 0x02
    2ab0:	89 83       	std	Y+1, r24	; 0x01
	uint8_t Local_u8Count2;
	uint8_t Local_u8Loop=0;
/*	itoa(Copy_u16IntValue , Local_u8CharArr , 10); Convert from Integer to String*/
	uint16_t Local_u16IntValue; /*Copy of integer Value as the original Value is not effected*/
	Local_u16IntValue=Copy_u16IntValue;
	while(Local_u16IntValue/10 != 0) /*while there is reminder*/
    2ab2:	89 81       	ldd	r24, Y+1	; 0x01
    2ab4:	9a 81       	ldd	r25, Y+2	; 0x02
    2ab6:	8a 30       	cpi	r24, 0x0A	; 10
    2ab8:	91 05       	cpc	r25, r1
    2aba:	70 f7       	brcc	.-36     	; 0x2a98 <LCD_voidWriteNumber+0x2c>
		{
			Local_u8Count++; /*increase No. of Digits by 1*/
			Local_u16IntValue =	Local_u16IntValue/10; /*Divide it by 10 to decrease Number by digit that is already counted*/
		}
	Local_u16IntValue=Copy_u16IntValue;
    2abc:	88 89       	ldd	r24, Y+16	; 0x10
    2abe:	99 89       	ldd	r25, Y+17	; 0x11
    2ac0:	9a 83       	std	Y+2, r25	; 0x02
    2ac2:	89 83       	std	Y+1, r24	; 0x01
	 Local_u8Count2=Local_u8Count;
    2ac4:	8d 81       	ldd	r24, Y+5	; 0x05
    2ac6:	8c 83       	std	Y+4, r24	; 0x04
    2ac8:	1f c0       	rjmp	.+62     	; 0x2b08 <LCD_voidWriteNumber+0x9c>
	while(Local_u8Count!=0)
	{
		Local_u8CharArr[Local_u8Count-1]=Local_u16IntValue%10;
    2aca:	8d 81       	ldd	r24, Y+5	; 0x05
    2acc:	88 2f       	mov	r24, r24
    2ace:	90 e0       	ldi	r25, 0x00	; 0
    2ad0:	fc 01       	movw	r30, r24
    2ad2:	31 97       	sbiw	r30, 0x01	; 1
    2ad4:	89 81       	ldd	r24, Y+1	; 0x01
    2ad6:	9a 81       	ldd	r25, Y+2	; 0x02
    2ad8:	2a e0       	ldi	r18, 0x0A	; 10
    2ada:	30 e0       	ldi	r19, 0x00	; 0
    2adc:	b9 01       	movw	r22, r18
    2ade:	0e 94 c6 18 	call	0x318c	; 0x318c <__udivmodhi4>
    2ae2:	28 2f       	mov	r18, r24
    2ae4:	ce 01       	movw	r24, r28
    2ae6:	06 96       	adiw	r24, 0x06	; 6
    2ae8:	e8 0f       	add	r30, r24
    2aea:	f9 1f       	adc	r31, r25
    2aec:	20 83       	st	Z, r18
		Local_u16IntValue /=10;
    2aee:	89 81       	ldd	r24, Y+1	; 0x01
    2af0:	9a 81       	ldd	r25, Y+2	; 0x02
    2af2:	2a e0       	ldi	r18, 0x0A	; 10
    2af4:	30 e0       	ldi	r19, 0x00	; 0
    2af6:	b9 01       	movw	r22, r18
    2af8:	0e 94 c6 18 	call	0x318c	; 0x318c <__udivmodhi4>
    2afc:	cb 01       	movw	r24, r22
    2afe:	9a 83       	std	Y+2, r25	; 0x02
    2b00:	89 83       	std	Y+1, r24	; 0x01
		Local_u8Count--;
    2b02:	8d 81       	ldd	r24, Y+5	; 0x05
    2b04:	81 50       	subi	r24, 0x01	; 1
    2b06:	8d 83       	std	Y+5, r24	; 0x05
			Local_u8Count++; /*increase No. of Digits by 1*/
			Local_u16IntValue =	Local_u16IntValue/10; /*Divide it by 10 to decrease Number by digit that is already counted*/
		}
	Local_u16IntValue=Copy_u16IntValue;
	 Local_u8Count2=Local_u8Count;
	while(Local_u8Count!=0)
    2b08:	8d 81       	ldd	r24, Y+5	; 0x05
    2b0a:	88 23       	and	r24, r24
    2b0c:	f1 f6       	brne	.-68     	; 0x2aca <LCD_voidWriteNumber+0x5e>
	{
		Local_u8CharArr[Local_u8Count-1]=Local_u16IntValue%10;
		Local_u16IntValue /=10;
		Local_u8Count--;
	}
	for(Local_u8Loop=0;Local_u8Loop<Local_u8Count2;Local_u8Loop++)
    2b0e:	1b 82       	std	Y+3, r1	; 0x03
    2b10:	0f c0       	rjmp	.+30     	; 0x2b30 <LCD_voidWriteNumber+0xc4>
	{
		LCD_u8WriteData(Local_u8CharArr[Local_u8Loop]+48);
    2b12:	8b 81       	ldd	r24, Y+3	; 0x03
    2b14:	28 2f       	mov	r18, r24
    2b16:	30 e0       	ldi	r19, 0x00	; 0
    2b18:	ce 01       	movw	r24, r28
    2b1a:	06 96       	adiw	r24, 0x06	; 6
    2b1c:	fc 01       	movw	r30, r24
    2b1e:	e2 0f       	add	r30, r18
    2b20:	f3 1f       	adc	r31, r19
    2b22:	80 81       	ld	r24, Z
    2b24:	80 5d       	subi	r24, 0xD0	; 208
    2b26:	0e 94 e5 11 	call	0x23ca	; 0x23ca <LCD_u8WriteData>
	{
		Local_u8CharArr[Local_u8Count-1]=Local_u16IntValue%10;
		Local_u16IntValue /=10;
		Local_u8Count--;
	}
	for(Local_u8Loop=0;Local_u8Loop<Local_u8Count2;Local_u8Loop++)
    2b2a:	8b 81       	ldd	r24, Y+3	; 0x03
    2b2c:	8f 5f       	subi	r24, 0xFF	; 255
    2b2e:	8b 83       	std	Y+3, r24	; 0x03
    2b30:	9b 81       	ldd	r25, Y+3	; 0x03
    2b32:	8c 81       	ldd	r24, Y+4	; 0x04
    2b34:	98 17       	cp	r25, r24
    2b36:	68 f3       	brcs	.-38     	; 0x2b12 <LCD_voidWriteNumber+0xa6>
	{
		LCD_u8WriteData(Local_u8CharArr[Local_u8Loop]+48);
	}

/*	LCD_u8WriteString(Local_u8CharArr,Local_u8Count); //Use it as a normal String*/
}
    2b38:	63 96       	adiw	r28, 0x13	; 19
    2b3a:	0f b6       	in	r0, 0x3f	; 63
    2b3c:	f8 94       	cli
    2b3e:	de bf       	out	0x3e, r29	; 62
    2b40:	0f be       	out	0x3f, r0	; 63
    2b42:	cd bf       	out	0x3d, r28	; 61
    2b44:	cf 91       	pop	r28
    2b46:	df 91       	pop	r29
    2b48:	08 95       	ret

00002b4a <SPI_Init>:
/*- APIs IMPLEMENTATION -----------------------------------*/
/* Description : SPI Initialization                                              */
/* Input       : Str_SPIConfiguration_t* "Pointer to Struct of SPI Configration" */
/* Output      : Error Code		                                                 */
SPI_Error_t SPI_Init (Str_SpiCfg_t * Pstr_Config)
{
    2b4a:	df 93       	push	r29
    2b4c:	cf 93       	push	r28
    2b4e:	cd b7       	in	r28, 0x3d	; 61
    2b50:	de b7       	in	r29, 0x3e	; 62
    2b52:	28 97       	sbiw	r28, 0x08	; 8
    2b54:	0f b6       	in	r0, 0x3f	; 63
    2b56:	f8 94       	cli
    2b58:	de bf       	out	0x3e, r29	; 62
    2b5a:	0f be       	out	0x3f, r0	; 63
    2b5c:	cd bf       	out	0x3d, r28	; 61
    2b5e:	9c 83       	std	Y+4, r25	; 0x04
    2b60:	8b 83       	std	Y+3, r24	; 0x03
	SPI_Error_t U16_Status = SPI_ERROR_INIT_OK;		/*Initialize Error Code*/
    2b62:	8e e8       	ldi	r24, 0x8E	; 142
    2b64:	93 e0       	ldi	r25, 0x03	; 3
    2b66:	9a 83       	std	Y+2, r25	; 0x02
    2b68:	89 83       	std	Y+1, r24	; 0x01
	if(NULL_POINTER != Pstr_Config)			/*Check If the pinter passed is Null*/
    2b6a:	8b 81       	ldd	r24, Y+3	; 0x03
    2b6c:	9c 81       	ldd	r25, Y+4	; 0x04
    2b6e:	00 97       	sbiw	r24, 0x00	; 0
    2b70:	09 f4       	brne	.+2      	; 0x2b74 <SPI_Init+0x2a>
    2b72:	bf c1       	rjmp	.+894    	; 0x2ef2 <SPI_Init+0x3a8>
	{
		/*Checking the Interrupt Mode and assigning it or changing error status*/
		if ((uint8_t)INTERRUPT == Pstr_Config->Interrupt_Mode)  /*Check for Interrupt Mode*/
    2b74:	eb 81       	ldd	r30, Y+3	; 0x03
    2b76:	fc 81       	ldd	r31, Y+4	; 0x04
    2b78:	82 81       	ldd	r24, Z+2	; 0x02
    2b7a:	81 30       	cpi	r24, 0x01	; 1
    2b7c:	91 f4       	brne	.+36     	; 0x2ba2 <SPI_Init+0x58>
		{
			Gu8_Interrupt_Mode=INTERRUPT;
    2b7e:	81 e0       	ldi	r24, 0x01	; 1
    2b80:	80 93 82 00 	sts	0x0082, r24
			SETBIT(SREG,GLOBAL_INTERRUPT);
    2b84:	af e5       	ldi	r26, 0x5F	; 95
    2b86:	b0 e0       	ldi	r27, 0x00	; 0
    2b88:	ef e5       	ldi	r30, 0x5F	; 95
    2b8a:	f0 e0       	ldi	r31, 0x00	; 0
    2b8c:	80 81       	ld	r24, Z
    2b8e:	80 68       	ori	r24, 0x80	; 128
    2b90:	8c 93       	st	X, r24
			SETBIT(SPCR,SPIE);
    2b92:	ad e2       	ldi	r26, 0x2D	; 45
    2b94:	b0 e0       	ldi	r27, 0x00	; 0
    2b96:	ed e2       	ldi	r30, 0x2D	; 45
    2b98:	f0 e0       	ldi	r31, 0x00	; 0
    2b9a:	80 81       	ld	r24, Z
    2b9c:	80 68       	ori	r24, 0x80	; 128
    2b9e:	8c 93       	st	X, r24
    2ba0:	13 c0       	rjmp	.+38     	; 0x2bc8 <SPI_Init+0x7e>
			
		}
		else
		{
			if ((uint8_t)POLLING == Pstr_Config->Interrupt_Mode)
    2ba2:	eb 81       	ldd	r30, Y+3	; 0x03
    2ba4:	fc 81       	ldd	r31, Y+4	; 0x04
    2ba6:	82 81       	ldd	r24, Z+2	; 0x02
    2ba8:	88 23       	and	r24, r24
    2baa:	51 f4       	brne	.+20     	; 0x2bc0 <SPI_Init+0x76>
			{
				Gu8_Interrupt_Mode=POLLING;
    2bac:	10 92 82 00 	sts	0x0082, r1
				CLEARBIT(SPCR,SPIE);
    2bb0:	ad e2       	ldi	r26, 0x2D	; 45
    2bb2:	b0 e0       	ldi	r27, 0x00	; 0
    2bb4:	ed e2       	ldi	r30, 0x2D	; 45
    2bb6:	f0 e0       	ldi	r31, 0x00	; 0
    2bb8:	80 81       	ld	r24, Z
    2bba:	8f 77       	andi	r24, 0x7F	; 127
    2bbc:	8c 93       	st	X, r24
    2bbe:	04 c0       	rjmp	.+8      	; 0x2bc8 <SPI_Init+0x7e>
			}
			else
			{
				U16_Status = SPI_ERROR_INIT_INTERRUPT;
    2bc0:	80 e9       	ldi	r24, 0x90	; 144
    2bc2:	93 e0       	ldi	r25, 0x03	; 3
    2bc4:	9a 83       	std	Y+2, r25	; 0x02
    2bc6:	89 83       	std	Y+1, r24	; 0x01
			}
		}
		/* Check If Error status OK to continue*/
		if (SPI_ERROR_INIT_OK == U16_Status)
    2bc8:	89 81       	ldd	r24, Y+1	; 0x01
    2bca:	9a 81       	ldd	r25, Y+2	; 0x02
    2bcc:	23 e0       	ldi	r18, 0x03	; 3
    2bce:	8e 38       	cpi	r24, 0x8E	; 142
    2bd0:	92 07       	cpc	r25, r18
    2bd2:	09 f0       	breq	.+2      	; 0x2bd6 <SPI_Init+0x8c>
    2bd4:	92 c1       	rjmp	.+804    	; 0x2efa <SPI_Init+0x3b0>
		{
			/*Checking the Order if least significant bit first and assigning registers it or changing error status*/
			if((uint8_t)LEASTFIRST == Pstr_Config->Order)
    2bd6:	eb 81       	ldd	r30, Y+3	; 0x03
    2bd8:	fc 81       	ldd	r31, Y+4	; 0x04
    2bda:	84 81       	ldd	r24, Z+4	; 0x04
    2bdc:	88 23       	and	r24, r24
    2bde:	41 f4       	brne	.+16     	; 0x2bf0 <SPI_Init+0xa6>
			{
				SETBIT(SPCR,DORD);
    2be0:	ad e2       	ldi	r26, 0x2D	; 45
    2be2:	b0 e0       	ldi	r27, 0x00	; 0
    2be4:	ed e2       	ldi	r30, 0x2D	; 45
    2be6:	f0 e0       	ldi	r31, 0x00	; 0
    2be8:	80 81       	ld	r24, Z
    2bea:	80 62       	ori	r24, 0x20	; 32
    2bec:	8c 93       	st	X, r24
    2bee:	11 c0       	rjmp	.+34     	; 0x2c12 <SPI_Init+0xc8>
			}
			else
			{
				if ((uint8_t)MOSTTFIRST == Pstr_Config->Order)
    2bf0:	eb 81       	ldd	r30, Y+3	; 0x03
    2bf2:	fc 81       	ldd	r31, Y+4	; 0x04
    2bf4:	84 81       	ldd	r24, Z+4	; 0x04
    2bf6:	88 23       	and	r24, r24
    2bf8:	41 f4       	brne	.+16     	; 0x2c0a <SPI_Init+0xc0>
				{
					CLEARBIT(SPCR,DORD);	
    2bfa:	ad e2       	ldi	r26, 0x2D	; 45
    2bfc:	b0 e0       	ldi	r27, 0x00	; 0
    2bfe:	ed e2       	ldi	r30, 0x2D	; 45
    2c00:	f0 e0       	ldi	r31, 0x00	; 0
    2c02:	80 81       	ld	r24, Z
    2c04:	8f 7d       	andi	r24, 0xDF	; 223
    2c06:	8c 93       	st	X, r24
    2c08:	04 c0       	rjmp	.+8      	; 0x2c12 <SPI_Init+0xc8>
				}
				else
				{
					U16_Status = SPI_ERROR_INIT_Order;
    2c0a:	81 e9       	ldi	r24, 0x91	; 145
    2c0c:	93 e0       	ldi	r25, 0x03	; 3
    2c0e:	9a 83       	std	Y+2, r25	; 0x02
    2c10:	89 83       	std	Y+1, r24	; 0x01
					
				}
			}
			/*Checking for Error status*/
			if ((uint16_t)SPI_ERROR_INIT_OK == U16_Status)
    2c12:	89 81       	ldd	r24, Y+1	; 0x01
    2c14:	9a 81       	ldd	r25, Y+2	; 0x02
    2c16:	33 e0       	ldi	r19, 0x03	; 3
    2c18:	8e 38       	cpi	r24, 0x8E	; 142
    2c1a:	93 07       	cpc	r25, r19
    2c1c:	09 f0       	breq	.+2      	; 0x2c20 <SPI_Init+0xd6>
    2c1e:	6d c1       	rjmp	.+730    	; 0x2efa <SPI_Init+0x3b0>
			{
				/*Checking the Master Mode, assigning registers and Initialize GPIO Pins or changing error status*/
				if((uint8_t)MASTER == Pstr_Config->Master_Mode)
    2c20:	eb 81       	ldd	r30, Y+3	; 0x03
    2c22:	fc 81       	ldd	r31, Y+4	; 0x04
    2c24:	83 81       	ldd	r24, Z+3	; 0x03
    2c26:	88 23       	and	r24, r24
    2c28:	09 f0       	breq	.+2      	; 0x2c2c <SPI_Init+0xe2>
    2c2a:	ac c0       	rjmp	.+344    	; 0x2d84 <SPI_Init+0x23a>
				{
					
					DIO_u8Init_PIN(SS,DIO_OUTPUT);
    2c2c:	8c e0       	ldi	r24, 0x0C	; 12
    2c2e:	61 e0       	ldi	r22, 0x01	; 1
    2c30:	0e 94 b2 0c 	call	0x1964	; 0x1964 <DIO_u8Init_PIN>
					DIO_u8Init_PIN(MOSI,DIO_OUTPUT);
    2c34:	8d e0       	ldi	r24, 0x0D	; 13
    2c36:	61 e0       	ldi	r22, 0x01	; 1
    2c38:	0e 94 b2 0c 	call	0x1964	; 0x1964 <DIO_u8Init_PIN>
					DIO_u8Init_PIN(MISO,DIO_INPUT);
    2c3c:	8e e0       	ldi	r24, 0x0E	; 14
    2c3e:	60 e0       	ldi	r22, 0x00	; 0
    2c40:	0e 94 b2 0c 	call	0x1964	; 0x1964 <DIO_u8Init_PIN>
					DIO_u8Init_PIN(SCK,DIO_OUTPUT);
    2c44:	8f e0       	ldi	r24, 0x0F	; 15
    2c46:	61 e0       	ldi	r22, 0x01	; 1
    2c48:	0e 94 b2 0c 	call	0x1964	; 0x1964 <DIO_u8Init_PIN>
					SETBIT(SPCR,MSTR);
    2c4c:	ad e2       	ldi	r26, 0x2D	; 45
    2c4e:	b0 e0       	ldi	r27, 0x00	; 0
    2c50:	ed e2       	ldi	r30, 0x2D	; 45
    2c52:	f0 e0       	ldi	r31, 0x00	; 0
    2c54:	80 81       	ld	r24, Z
    2c56:	80 61       	ori	r24, 0x10	; 16
    2c58:	8c 93       	st	X, r24
					if ((uint8_t)SINGLE_SPEED == Pstr_Config->Speed_Mode)
    2c5a:	eb 81       	ldd	r30, Y+3	; 0x03
    2c5c:	fc 81       	ldd	r31, Y+4	; 0x04
    2c5e:	81 81       	ldd	r24, Z+1	; 0x01
    2c60:	88 23       	and	r24, r24
    2c62:	41 f4       	brne	.+16     	; 0x2c74 <SPI_Init+0x12a>
					{
						CLEARBIT(SPSR,SPI2X);
    2c64:	ae e2       	ldi	r26, 0x2E	; 46
    2c66:	b0 e0       	ldi	r27, 0x00	; 0
    2c68:	ee e2       	ldi	r30, 0x2E	; 46
    2c6a:	f0 e0       	ldi	r31, 0x00	; 0
    2c6c:	80 81       	ld	r24, Z
    2c6e:	8e 7f       	andi	r24, 0xFE	; 254
    2c70:	8c 93       	st	X, r24
    2c72:	11 c0       	rjmp	.+34     	; 0x2c96 <SPI_Init+0x14c>
					}
					else
					{
						/*Checking the Speed Mode entered and assigning it or changing error status*/
						if ((uint8_t)DOUBLE_SPEED == Pstr_Config->Speed_Mode)
    2c74:	eb 81       	ldd	r30, Y+3	; 0x03
    2c76:	fc 81       	ldd	r31, Y+4	; 0x04
    2c78:	81 81       	ldd	r24, Z+1	; 0x01
    2c7a:	81 30       	cpi	r24, 0x01	; 1
    2c7c:	41 f4       	brne	.+16     	; 0x2c8e <SPI_Init+0x144>
						{
							SETBIT(SPSR,SPI2X);
    2c7e:	ae e2       	ldi	r26, 0x2E	; 46
    2c80:	b0 e0       	ldi	r27, 0x00	; 0
    2c82:	ee e2       	ldi	r30, 0x2E	; 46
    2c84:	f0 e0       	ldi	r31, 0x00	; 0
    2c86:	80 81       	ld	r24, Z
    2c88:	81 60       	ori	r24, 0x01	; 1
    2c8a:	8c 93       	st	X, r24
    2c8c:	04 c0       	rjmp	.+8      	; 0x2c96 <SPI_Init+0x14c>
						}
						else
						{
							U16_Status = SPI_ERROR_INIT_SPEED;
    2c8e:	84 e9       	ldi	r24, 0x94	; 148
    2c90:	93 e0       	ldi	r25, 0x03	; 3
    2c92:	9a 83       	std	Y+2, r25	; 0x02
    2c94:	89 83       	std	Y+1, r24	; 0x01
						}
					}
					/*Checking the error status and the prescaller and assigning registers or changing error status*/
					if((uint16_t)SPI_ERROR_INIT_OK == U16_Status)
    2c96:	89 81       	ldd	r24, Y+1	; 0x01
    2c98:	9a 81       	ldd	r25, Y+2	; 0x02
    2c9a:	23 e0       	ldi	r18, 0x03	; 3
    2c9c:	8e 38       	cpi	r24, 0x8E	; 142
    2c9e:	92 07       	cpc	r25, r18
    2ca0:	09 f0       	breq	.+2      	; 0x2ca4 <SPI_Init+0x15a>
    2ca2:	2b c1       	rjmp	.+598    	; 0x2efa <SPI_Init+0x3b0>
					{
						CLEARBIT(SPCR,SPR0);
    2ca4:	ad e2       	ldi	r26, 0x2D	; 45
    2ca6:	b0 e0       	ldi	r27, 0x00	; 0
    2ca8:	ed e2       	ldi	r30, 0x2D	; 45
    2caa:	f0 e0       	ldi	r31, 0x00	; 0
    2cac:	80 81       	ld	r24, Z
    2cae:	8e 7f       	andi	r24, 0xFE	; 254
    2cb0:	8c 93       	st	X, r24
						CLEARBIT(SPCR,SPR1);
    2cb2:	ad e2       	ldi	r26, 0x2D	; 45
    2cb4:	b0 e0       	ldi	r27, 0x00	; 0
    2cb6:	ed e2       	ldi	r30, 0x2D	; 45
    2cb8:	f0 e0       	ldi	r31, 0x00	; 0
    2cba:	80 81       	ld	r24, Z
    2cbc:	8d 7f       	andi	r24, 0xFD	; 253
    2cbe:	8c 93       	st	X, r24
						switch( Pstr_Config->Prescaller )
    2cc0:	eb 81       	ldd	r30, Y+3	; 0x03
    2cc2:	fc 81       	ldd	r31, Y+4	; 0x04
    2cc4:	80 81       	ld	r24, Z
    2cc6:	28 2f       	mov	r18, r24
    2cc8:	30 e0       	ldi	r19, 0x00	; 0
    2cca:	38 87       	std	Y+8, r19	; 0x08
    2ccc:	2f 83       	std	Y+7, r18	; 0x07
    2cce:	8f 81       	ldd	r24, Y+7	; 0x07
    2cd0:	98 85       	ldd	r25, Y+8	; 0x08
    2cd2:	81 30       	cpi	r24, 0x01	; 1
    2cd4:	91 05       	cpc	r25, r1
    2cd6:	21 f1       	breq	.+72     	; 0x2d20 <SPI_Init+0x1d6>
    2cd8:	2f 81       	ldd	r18, Y+7	; 0x07
    2cda:	38 85       	ldd	r19, Y+8	; 0x08
    2cdc:	22 30       	cpi	r18, 0x02	; 2
    2cde:	31 05       	cpc	r19, r1
    2ce0:	2c f4       	brge	.+10     	; 0x2cec <SPI_Init+0x1a2>
    2ce2:	8f 81       	ldd	r24, Y+7	; 0x07
    2ce4:	98 85       	ldd	r25, Y+8	; 0x08
    2ce6:	00 97       	sbiw	r24, 0x00	; 0
    2ce8:	61 f0       	breq	.+24     	; 0x2d02 <SPI_Init+0x1b8>
    2cea:	47 c0       	rjmp	.+142    	; 0x2d7a <SPI_Init+0x230>
    2cec:	2f 81       	ldd	r18, Y+7	; 0x07
    2cee:	38 85       	ldd	r19, Y+8	; 0x08
    2cf0:	22 30       	cpi	r18, 0x02	; 2
    2cf2:	31 05       	cpc	r19, r1
    2cf4:	21 f1       	breq	.+72     	; 0x2d3e <SPI_Init+0x1f4>
    2cf6:	8f 81       	ldd	r24, Y+7	; 0x07
    2cf8:	98 85       	ldd	r25, Y+8	; 0x08
    2cfa:	83 30       	cpi	r24, 0x03	; 3
    2cfc:	91 05       	cpc	r25, r1
    2cfe:	71 f1       	breq	.+92     	; 0x2d5c <SPI_Init+0x212>
    2d00:	3c c0       	rjmp	.+120    	; 0x2d7a <SPI_Init+0x230>
						{
							case PSC_4   :  
							CLEARBIT(SPCR,SPR0);
    2d02:	ad e2       	ldi	r26, 0x2D	; 45
    2d04:	b0 e0       	ldi	r27, 0x00	; 0
    2d06:	ed e2       	ldi	r30, 0x2D	; 45
    2d08:	f0 e0       	ldi	r31, 0x00	; 0
    2d0a:	80 81       	ld	r24, Z
    2d0c:	8e 7f       	andi	r24, 0xFE	; 254
    2d0e:	8c 93       	st	X, r24
							CLEARBIT(SPCR,SPR1);
    2d10:	ad e2       	ldi	r26, 0x2D	; 45
    2d12:	b0 e0       	ldi	r27, 0x00	; 0
    2d14:	ed e2       	ldi	r30, 0x2D	; 45
    2d16:	f0 e0       	ldi	r31, 0x00	; 0
    2d18:	80 81       	ld	r24, Z
    2d1a:	8d 7f       	andi	r24, 0xFD	; 253
    2d1c:	8c 93       	st	X, r24
    2d1e:	ed c0       	rjmp	.+474    	; 0x2efa <SPI_Init+0x3b0>
							break;
							case PSC_16  :  
							SETBIT(SPCR,SPR0);
    2d20:	ad e2       	ldi	r26, 0x2D	; 45
    2d22:	b0 e0       	ldi	r27, 0x00	; 0
    2d24:	ed e2       	ldi	r30, 0x2D	; 45
    2d26:	f0 e0       	ldi	r31, 0x00	; 0
    2d28:	80 81       	ld	r24, Z
    2d2a:	81 60       	ori	r24, 0x01	; 1
    2d2c:	8c 93       	st	X, r24
							CLEARBIT(SPCR,SPR1);
    2d2e:	ad e2       	ldi	r26, 0x2D	; 45
    2d30:	b0 e0       	ldi	r27, 0x00	; 0
    2d32:	ed e2       	ldi	r30, 0x2D	; 45
    2d34:	f0 e0       	ldi	r31, 0x00	; 0
    2d36:	80 81       	ld	r24, Z
    2d38:	8d 7f       	andi	r24, 0xFD	; 253
    2d3a:	8c 93       	st	X, r24
    2d3c:	de c0       	rjmp	.+444    	; 0x2efa <SPI_Init+0x3b0>
							break;
							case PSC_64  :  
							CLEARBIT(SPCR,SPR0);
    2d3e:	ad e2       	ldi	r26, 0x2D	; 45
    2d40:	b0 e0       	ldi	r27, 0x00	; 0
    2d42:	ed e2       	ldi	r30, 0x2D	; 45
    2d44:	f0 e0       	ldi	r31, 0x00	; 0
    2d46:	80 81       	ld	r24, Z
    2d48:	8e 7f       	andi	r24, 0xFE	; 254
    2d4a:	8c 93       	st	X, r24
							SETBIT(SPCR,SPR1);
    2d4c:	ad e2       	ldi	r26, 0x2D	; 45
    2d4e:	b0 e0       	ldi	r27, 0x00	; 0
    2d50:	ed e2       	ldi	r30, 0x2D	; 45
    2d52:	f0 e0       	ldi	r31, 0x00	; 0
    2d54:	80 81       	ld	r24, Z
    2d56:	82 60       	ori	r24, 0x02	; 2
    2d58:	8c 93       	st	X, r24
    2d5a:	cf c0       	rjmp	.+414    	; 0x2efa <SPI_Init+0x3b0>
							break;
							case PSC_128 :  
							SETBIT(SPCR,SPR0);
    2d5c:	ad e2       	ldi	r26, 0x2D	; 45
    2d5e:	b0 e0       	ldi	r27, 0x00	; 0
    2d60:	ed e2       	ldi	r30, 0x2D	; 45
    2d62:	f0 e0       	ldi	r31, 0x00	; 0
    2d64:	80 81       	ld	r24, Z
    2d66:	81 60       	ori	r24, 0x01	; 1
    2d68:	8c 93       	st	X, r24
							SETBIT(SPCR,SPR1);
    2d6a:	ad e2       	ldi	r26, 0x2D	; 45
    2d6c:	b0 e0       	ldi	r27, 0x00	; 0
    2d6e:	ed e2       	ldi	r30, 0x2D	; 45
    2d70:	f0 e0       	ldi	r31, 0x00	; 0
    2d72:	80 81       	ld	r24, Z
    2d74:	82 60       	ori	r24, 0x02	; 2
    2d76:	8c 93       	st	X, r24
    2d78:	c0 c0       	rjmp	.+384    	; 0x2efa <SPI_Init+0x3b0>
							break;
							default: U16_Status = SPI_ERROR_INIT_PRESCALLER;
    2d7a:	85 e9       	ldi	r24, 0x95	; 149
    2d7c:	93 e0       	ldi	r25, 0x03	; 3
    2d7e:	9a 83       	std	Y+2, r25	; 0x02
    2d80:	89 83       	std	Y+1, r24	; 0x01
    2d82:	bb c0       	rjmp	.+374    	; 0x2efa <SPI_Init+0x3b0>
					}
				}
				else
				{
					/*Checking the Slave Mode, assigning registers and Initialize GPIO Pins or changing error status*/
					if((uint8_t)SLAVE == Pstr_Config->Master_Mode)
    2d84:	eb 81       	ldd	r30, Y+3	; 0x03
    2d86:	fc 81       	ldd	r31, Y+4	; 0x04
    2d88:	83 81       	ldd	r24, Z+3	; 0x03
    2d8a:	81 30       	cpi	r24, 0x01	; 1
    2d8c:	09 f0       	breq	.+2      	; 0x2d90 <SPI_Init+0x246>
    2d8e:	ac c0       	rjmp	.+344    	; 0x2ee8 <SPI_Init+0x39e>
					{
						DIO_u8Init_PIN(SS,DIO_INPUT);
    2d90:	8c e0       	ldi	r24, 0x0C	; 12
    2d92:	60 e0       	ldi	r22, 0x00	; 0
    2d94:	0e 94 b2 0c 	call	0x1964	; 0x1964 <DIO_u8Init_PIN>
						DIO_u8Init_PIN(MOSI,DIO_INPUT);
    2d98:	8d e0       	ldi	r24, 0x0D	; 13
    2d9a:	60 e0       	ldi	r22, 0x00	; 0
    2d9c:	0e 94 b2 0c 	call	0x1964	; 0x1964 <DIO_u8Init_PIN>
						DIO_u8Init_PIN(MISO,DIO_OUTPUT);
    2da0:	8e e0       	ldi	r24, 0x0E	; 14
    2da2:	61 e0       	ldi	r22, 0x01	; 1
    2da4:	0e 94 b2 0c 	call	0x1964	; 0x1964 <DIO_u8Init_PIN>
						DIO_u8Init_PIN(SCK,DIO_INPUT);
    2da8:	8f e0       	ldi	r24, 0x0F	; 15
    2daa:	60 e0       	ldi	r22, 0x00	; 0
    2dac:	0e 94 b2 0c 	call	0x1964	; 0x1964 <DIO_u8Init_PIN>
						CLEARBIT(SPCR,MSTR);
    2db0:	ad e2       	ldi	r26, 0x2D	; 45
    2db2:	b0 e0       	ldi	r27, 0x00	; 0
    2db4:	ed e2       	ldi	r30, 0x2D	; 45
    2db6:	f0 e0       	ldi	r31, 0x00	; 0
    2db8:	80 81       	ld	r24, Z
    2dba:	8f 7e       	andi	r24, 0xEF	; 239
    2dbc:	8c 93       	st	X, r24
						/*Checking the Speed Mode entered and assigning it or changing error status*/
						if ((uint8_t)SINGLE_SPEED == Pstr_Config->Speed_Mode)
    2dbe:	eb 81       	ldd	r30, Y+3	; 0x03
    2dc0:	fc 81       	ldd	r31, Y+4	; 0x04
    2dc2:	81 81       	ldd	r24, Z+1	; 0x01
    2dc4:	88 23       	and	r24, r24
    2dc6:	41 f4       	brne	.+16     	; 0x2dd8 <SPI_Init+0x28e>
						{
							CLEARBIT(SPSR,SPI2X);
    2dc8:	ae e2       	ldi	r26, 0x2E	; 46
    2dca:	b0 e0       	ldi	r27, 0x00	; 0
    2dcc:	ee e2       	ldi	r30, 0x2E	; 46
    2dce:	f0 e0       	ldi	r31, 0x00	; 0
    2dd0:	80 81       	ld	r24, Z
    2dd2:	8e 7f       	andi	r24, 0xFE	; 254
    2dd4:	8c 93       	st	X, r24
    2dd6:	11 c0       	rjmp	.+34     	; 0x2dfa <SPI_Init+0x2b0>
						}
						else
						{
							if ((uint8_t)DOUBLE_SPEED == Pstr_Config->Speed_Mode)
    2dd8:	eb 81       	ldd	r30, Y+3	; 0x03
    2dda:	fc 81       	ldd	r31, Y+4	; 0x04
    2ddc:	81 81       	ldd	r24, Z+1	; 0x01
    2dde:	81 30       	cpi	r24, 0x01	; 1
    2de0:	41 f4       	brne	.+16     	; 0x2df2 <SPI_Init+0x2a8>
							{
								SETBIT(SPSR,SPI2X);
    2de2:	ae e2       	ldi	r26, 0x2E	; 46
    2de4:	b0 e0       	ldi	r27, 0x00	; 0
    2de6:	ee e2       	ldi	r30, 0x2E	; 46
    2de8:	f0 e0       	ldi	r31, 0x00	; 0
    2dea:	80 81       	ld	r24, Z
    2dec:	81 60       	ori	r24, 0x01	; 1
    2dee:	8c 93       	st	X, r24
    2df0:	04 c0       	rjmp	.+8      	; 0x2dfa <SPI_Init+0x2b0>
							}
							else
							{
								U16_Status = SPI_ERROR_INIT_SPEED;
    2df2:	84 e9       	ldi	r24, 0x94	; 148
    2df4:	93 e0       	ldi	r25, 0x03	; 3
    2df6:	9a 83       	std	Y+2, r25	; 0x02
    2df8:	89 83       	std	Y+1, r24	; 0x01
							}
						}
						/*Checking the error status and the prescaller and assigning registers or changing error status*/
						if((uint16_t)SPI_ERROR_INIT_OK == U16_Status)
    2dfa:	89 81       	ldd	r24, Y+1	; 0x01
    2dfc:	9a 81       	ldd	r25, Y+2	; 0x02
    2dfe:	23 e0       	ldi	r18, 0x03	; 3
    2e00:	8e 38       	cpi	r24, 0x8E	; 142
    2e02:	92 07       	cpc	r25, r18
    2e04:	09 f0       	breq	.+2      	; 0x2e08 <SPI_Init+0x2be>
    2e06:	79 c0       	rjmp	.+242    	; 0x2efa <SPI_Init+0x3b0>
						{
							CLEARBIT(SPCR,SPR0);
    2e08:	ad e2       	ldi	r26, 0x2D	; 45
    2e0a:	b0 e0       	ldi	r27, 0x00	; 0
    2e0c:	ed e2       	ldi	r30, 0x2D	; 45
    2e0e:	f0 e0       	ldi	r31, 0x00	; 0
    2e10:	80 81       	ld	r24, Z
    2e12:	8e 7f       	andi	r24, 0xFE	; 254
    2e14:	8c 93       	st	X, r24
							CLEARBIT(SPCR,SPR1);
    2e16:	ad e2       	ldi	r26, 0x2D	; 45
    2e18:	b0 e0       	ldi	r27, 0x00	; 0
    2e1a:	ed e2       	ldi	r30, 0x2D	; 45
    2e1c:	f0 e0       	ldi	r31, 0x00	; 0
    2e1e:	80 81       	ld	r24, Z
    2e20:	8d 7f       	andi	r24, 0xFD	; 253
    2e22:	8c 93       	st	X, r24
							switch( Pstr_Config->Prescaller )
    2e24:	eb 81       	ldd	r30, Y+3	; 0x03
    2e26:	fc 81       	ldd	r31, Y+4	; 0x04
    2e28:	80 81       	ld	r24, Z
    2e2a:	28 2f       	mov	r18, r24
    2e2c:	30 e0       	ldi	r19, 0x00	; 0
    2e2e:	3e 83       	std	Y+6, r19	; 0x06
    2e30:	2d 83       	std	Y+5, r18	; 0x05
    2e32:	8d 81       	ldd	r24, Y+5	; 0x05
    2e34:	9e 81       	ldd	r25, Y+6	; 0x06
    2e36:	81 30       	cpi	r24, 0x01	; 1
    2e38:	91 05       	cpc	r25, r1
    2e3a:	21 f1       	breq	.+72     	; 0x2e84 <SPI_Init+0x33a>
    2e3c:	2d 81       	ldd	r18, Y+5	; 0x05
    2e3e:	3e 81       	ldd	r19, Y+6	; 0x06
    2e40:	22 30       	cpi	r18, 0x02	; 2
    2e42:	31 05       	cpc	r19, r1
    2e44:	2c f4       	brge	.+10     	; 0x2e50 <SPI_Init+0x306>
    2e46:	8d 81       	ldd	r24, Y+5	; 0x05
    2e48:	9e 81       	ldd	r25, Y+6	; 0x06
    2e4a:	00 97       	sbiw	r24, 0x00	; 0
    2e4c:	61 f0       	breq	.+24     	; 0x2e66 <SPI_Init+0x31c>
    2e4e:	47 c0       	rjmp	.+142    	; 0x2ede <SPI_Init+0x394>
    2e50:	2d 81       	ldd	r18, Y+5	; 0x05
    2e52:	3e 81       	ldd	r19, Y+6	; 0x06
    2e54:	22 30       	cpi	r18, 0x02	; 2
    2e56:	31 05       	cpc	r19, r1
    2e58:	21 f1       	breq	.+72     	; 0x2ea2 <SPI_Init+0x358>
    2e5a:	8d 81       	ldd	r24, Y+5	; 0x05
    2e5c:	9e 81       	ldd	r25, Y+6	; 0x06
    2e5e:	83 30       	cpi	r24, 0x03	; 3
    2e60:	91 05       	cpc	r25, r1
    2e62:	71 f1       	breq	.+92     	; 0x2ec0 <SPI_Init+0x376>
    2e64:	3c c0       	rjmp	.+120    	; 0x2ede <SPI_Init+0x394>
							{
								case PSC_4   :
								CLEARBIT(SPCR,SPR0);
    2e66:	ad e2       	ldi	r26, 0x2D	; 45
    2e68:	b0 e0       	ldi	r27, 0x00	; 0
    2e6a:	ed e2       	ldi	r30, 0x2D	; 45
    2e6c:	f0 e0       	ldi	r31, 0x00	; 0
    2e6e:	80 81       	ld	r24, Z
    2e70:	8e 7f       	andi	r24, 0xFE	; 254
    2e72:	8c 93       	st	X, r24
								CLEARBIT(SPCR,SPR1);
    2e74:	ad e2       	ldi	r26, 0x2D	; 45
    2e76:	b0 e0       	ldi	r27, 0x00	; 0
    2e78:	ed e2       	ldi	r30, 0x2D	; 45
    2e7a:	f0 e0       	ldi	r31, 0x00	; 0
    2e7c:	80 81       	ld	r24, Z
    2e7e:	8d 7f       	andi	r24, 0xFD	; 253
    2e80:	8c 93       	st	X, r24
    2e82:	3b c0       	rjmp	.+118    	; 0x2efa <SPI_Init+0x3b0>
								break;
								case PSC_16  :
								SETBIT(SPCR,SPR0);
    2e84:	ad e2       	ldi	r26, 0x2D	; 45
    2e86:	b0 e0       	ldi	r27, 0x00	; 0
    2e88:	ed e2       	ldi	r30, 0x2D	; 45
    2e8a:	f0 e0       	ldi	r31, 0x00	; 0
    2e8c:	80 81       	ld	r24, Z
    2e8e:	81 60       	ori	r24, 0x01	; 1
    2e90:	8c 93       	st	X, r24
								CLEARBIT(SPCR,SPR1);
    2e92:	ad e2       	ldi	r26, 0x2D	; 45
    2e94:	b0 e0       	ldi	r27, 0x00	; 0
    2e96:	ed e2       	ldi	r30, 0x2D	; 45
    2e98:	f0 e0       	ldi	r31, 0x00	; 0
    2e9a:	80 81       	ld	r24, Z
    2e9c:	8d 7f       	andi	r24, 0xFD	; 253
    2e9e:	8c 93       	st	X, r24
    2ea0:	2c c0       	rjmp	.+88     	; 0x2efa <SPI_Init+0x3b0>
								break;
								case PSC_64  :
								CLEARBIT(SPCR,SPR0);
    2ea2:	ad e2       	ldi	r26, 0x2D	; 45
    2ea4:	b0 e0       	ldi	r27, 0x00	; 0
    2ea6:	ed e2       	ldi	r30, 0x2D	; 45
    2ea8:	f0 e0       	ldi	r31, 0x00	; 0
    2eaa:	80 81       	ld	r24, Z
    2eac:	8e 7f       	andi	r24, 0xFE	; 254
    2eae:	8c 93       	st	X, r24
								SETBIT(SPCR,SPR1);
    2eb0:	ad e2       	ldi	r26, 0x2D	; 45
    2eb2:	b0 e0       	ldi	r27, 0x00	; 0
    2eb4:	ed e2       	ldi	r30, 0x2D	; 45
    2eb6:	f0 e0       	ldi	r31, 0x00	; 0
    2eb8:	80 81       	ld	r24, Z
    2eba:	82 60       	ori	r24, 0x02	; 2
    2ebc:	8c 93       	st	X, r24
    2ebe:	1d c0       	rjmp	.+58     	; 0x2efa <SPI_Init+0x3b0>
								break;
								case PSC_128 :
								SETBIT(SPCR,SPR0);
    2ec0:	ad e2       	ldi	r26, 0x2D	; 45
    2ec2:	b0 e0       	ldi	r27, 0x00	; 0
    2ec4:	ed e2       	ldi	r30, 0x2D	; 45
    2ec6:	f0 e0       	ldi	r31, 0x00	; 0
    2ec8:	80 81       	ld	r24, Z
    2eca:	81 60       	ori	r24, 0x01	; 1
    2ecc:	8c 93       	st	X, r24
								SETBIT(SPCR,SPR1);
    2ece:	ad e2       	ldi	r26, 0x2D	; 45
    2ed0:	b0 e0       	ldi	r27, 0x00	; 0
    2ed2:	ed e2       	ldi	r30, 0x2D	; 45
    2ed4:	f0 e0       	ldi	r31, 0x00	; 0
    2ed6:	80 81       	ld	r24, Z
    2ed8:	82 60       	ori	r24, 0x02	; 2
    2eda:	8c 93       	st	X, r24
    2edc:	0e c0       	rjmp	.+28     	; 0x2efa <SPI_Init+0x3b0>
								break;
								default: U16_Status = SPI_ERROR_INIT_PRESCALLER;
    2ede:	85 e9       	ldi	r24, 0x95	; 149
    2ee0:	93 e0       	ldi	r25, 0x03	; 3
    2ee2:	9a 83       	std	Y+2, r25	; 0x02
    2ee4:	89 83       	std	Y+1, r24	; 0x01
    2ee6:	09 c0       	rjmp	.+18     	; 0x2efa <SPI_Init+0x3b0>
							/*Do Nothing*/
						}
					}
					else
					{
						U16_Status = SPI_ERROR_INIT_MASTERMODE;
    2ee8:	82 e9       	ldi	r24, 0x92	; 146
    2eea:	93 e0       	ldi	r25, 0x03	; 3
    2eec:	9a 83       	std	Y+2, r25	; 0x02
    2eee:	89 83       	std	Y+1, r24	; 0x01
    2ef0:	04 c0       	rjmp	.+8      	; 0x2efa <SPI_Init+0x3b0>
			}
		}
	}
	else
	{
		U16_Status = SPI_ERROR_INIT_NULLPOINTER;
    2ef2:	8f e8       	ldi	r24, 0x8F	; 143
    2ef4:	93 e0       	ldi	r25, 0x03	; 3
    2ef6:	9a 83       	std	Y+2, r25	; 0x02
    2ef8:	89 83       	std	Y+1, r24	; 0x01
	}
	if ((uint16_t)SPI_ERROR_INIT_OK == U16_Status)
    2efa:	89 81       	ldd	r24, Y+1	; 0x01
    2efc:	9a 81       	ldd	r25, Y+2	; 0x02
    2efe:	23 e0       	ldi	r18, 0x03	; 3
    2f00:	8e 38       	cpi	r24, 0x8E	; 142
    2f02:	92 07       	cpc	r25, r18
    2f04:	59 f4       	brne	.+22     	; 0x2f1c <SPI_Init+0x3d2>
	{
		Gu8_Init_Flag = INITIATED;
    2f06:	81 e0       	ldi	r24, 0x01	; 1
    2f08:	80 93 83 00 	sts	0x0083, r24
		SETBIT(SPCR,SPE); /*Enable SPI*/
    2f0c:	ad e2       	ldi	r26, 0x2D	; 45
    2f0e:	b0 e0       	ldi	r27, 0x00	; 0
    2f10:	ed e2       	ldi	r30, 0x2D	; 45
    2f12:	f0 e0       	ldi	r31, 0x00	; 0
    2f14:	80 81       	ld	r24, Z
    2f16:	80 64       	ori	r24, 0x40	; 64
    2f18:	8c 93       	st	X, r24
    2f1a:	02 c0       	rjmp	.+4      	; 0x2f20 <SPI_Init+0x3d6>
	}
	else
	{
		Gu8_Init_Flag = NOTINITIATED;
    2f1c:	10 92 83 00 	sts	0x0083, r1
	}
	return U16_Status;
    2f20:	89 81       	ldd	r24, Y+1	; 0x01
    2f22:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2f24:	28 96       	adiw	r28, 0x08	; 8
    2f26:	0f b6       	in	r0, 0x3f	; 63
    2f28:	f8 94       	cli
    2f2a:	de bf       	out	0x3e, r29	; 62
    2f2c:	0f be       	out	0x3f, r0	; 63
    2f2e:	cd bf       	out	0x3d, r28	; 61
    2f30:	cf 91       	pop	r28
    2f32:	df 91       	pop	r29
    2f34:	08 95       	ret

00002f36 <SPI_Sendbyte>:

SPI_Error_t SPI_Sendbyte(const uint8_t Data)
{
    2f36:	df 93       	push	r29
    2f38:	cf 93       	push	r28
    2f3a:	00 d0       	rcall	.+0      	; 0x2f3c <SPI_Sendbyte+0x6>
    2f3c:	0f 92       	push	r0
    2f3e:	cd b7       	in	r28, 0x3d	; 61
    2f40:	de b7       	in	r29, 0x3e	; 62
    2f42:	8b 83       	std	Y+3, r24	; 0x03
		SPI_Error_t U16_Status = SPI_ERROR_RECEIVEBYTE_OK;
    2f44:	82 ea       	ldi	r24, 0xA2	; 162
    2f46:	93 e0       	ldi	r25, 0x03	; 3
    2f48:	9a 83       	std	Y+2, r25	; 0x02
    2f4a:	89 83       	std	Y+1, r24	; 0x01
		if((uint8_t)INITIATED == Gu8_Init_Flag)
    2f4c:	80 91 83 00 	lds	r24, 0x0083
    2f50:	81 30       	cpi	r24, 0x01	; 1
    2f52:	59 f5       	brne	.+86     	; 0x2faa <SPI_Sendbyte+0x74>
		{
			if (POLLING ==Gu8_Interrupt_Mode)
    2f54:	80 91 82 00 	lds	r24, 0x0082
    2f58:	88 23       	and	r24, r24
    2f5a:	f1 f4       	brne	.+60     	; 0x2f98 <SPI_Sendbyte+0x62>
			{
				CLEARBIT(SPCR,SPIE);
    2f5c:	ad e2       	ldi	r26, 0x2D	; 45
    2f5e:	b0 e0       	ldi	r27, 0x00	; 0
    2f60:	ed e2       	ldi	r30, 0x2D	; 45
    2f62:	f0 e0       	ldi	r31, 0x00	; 0
    2f64:	80 81       	ld	r24, Z
    2f66:	8f 77       	andi	r24, 0x7F	; 127
    2f68:	8c 93       	st	X, r24
				SPDR = Data;
    2f6a:	ef e2       	ldi	r30, 0x2F	; 47
    2f6c:	f0 e0       	ldi	r31, 0x00	; 0
    2f6e:	8b 81       	ldd	r24, Y+3	; 0x03
    2f70:	80 83       	st	Z, r24
				while (READBIT(SPSR,SPIF) == 0);
    2f72:	ee e2       	ldi	r30, 0x2E	; 46
    2f74:	f0 e0       	ldi	r31, 0x00	; 0
    2f76:	80 81       	ld	r24, Z
    2f78:	88 1f       	adc	r24, r24
    2f7a:	88 27       	eor	r24, r24
    2f7c:	88 1f       	adc	r24, r24
    2f7e:	88 2f       	mov	r24, r24
    2f80:	90 e0       	ldi	r25, 0x00	; 0
    2f82:	90 70       	andi	r25, 0x00	; 0
    2f84:	00 97       	sbiw	r24, 0x00	; 0
    2f86:	a9 f3       	breq	.-22     	; 0x2f72 <SPI_Sendbyte+0x3c>
				SETBIT(SPSR,SPIF);
    2f88:	ae e2       	ldi	r26, 0x2E	; 46
    2f8a:	b0 e0       	ldi	r27, 0x00	; 0
    2f8c:	ee e2       	ldi	r30, 0x2E	; 46
    2f8e:	f0 e0       	ldi	r31, 0x00	; 0
    2f90:	80 81       	ld	r24, Z
    2f92:	80 68       	ori	r24, 0x80	; 128
    2f94:	8c 93       	st	X, r24
    2f96:	0d c0       	rjmp	.+26     	; 0x2fb2 <SPI_Sendbyte+0x7c>
				
			}
			else
			{
				/*INTERRUPT*/
				Gu8_Mode_Flag = SENDING;
    2f98:	10 92 86 00 	sts	0x0086, r1
				Gu8_ISR_Flag = 0;
    2f9c:	10 92 6c 00 	sts	0x006C, r1
				//Gu8_Data = Data;
				SPDR = Data;
    2fa0:	ef e2       	ldi	r30, 0x2F	; 47
    2fa2:	f0 e0       	ldi	r31, 0x00	; 0
    2fa4:	8b 81       	ldd	r24, Y+3	; 0x03
    2fa6:	80 83       	st	Z, r24
    2fa8:	04 c0       	rjmp	.+8      	; 0x2fb2 <SPI_Sendbyte+0x7c>
			}
		}
		else
		{
			U16_Status= SPI_ERROR_SENDBYTE_NOTINIT;
    2faa:	89 e9       	ldi	r24, 0x99	; 153
    2fac:	93 e0       	ldi	r25, 0x03	; 3
    2fae:	9a 83       	std	Y+2, r25	; 0x02
    2fb0:	89 83       	std	Y+1, r24	; 0x01
		}
		return U16_Status;
    2fb2:	89 81       	ldd	r24, Y+1	; 0x01
    2fb4:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2fb6:	0f 90       	pop	r0
    2fb8:	0f 90       	pop	r0
    2fba:	0f 90       	pop	r0
    2fbc:	cf 91       	pop	r28
    2fbe:	df 91       	pop	r29
    2fc0:	08 95       	ret

00002fc2 <SPI_Receivebyte>:
SPI_Error_t SPI_Receivebyte(uint8_t* Data)
{
    2fc2:	df 93       	push	r29
    2fc4:	cf 93       	push	r28
    2fc6:	00 d0       	rcall	.+0      	; 0x2fc8 <SPI_Receivebyte+0x6>
    2fc8:	00 d0       	rcall	.+0      	; 0x2fca <SPI_Receivebyte+0x8>
    2fca:	cd b7       	in	r28, 0x3d	; 61
    2fcc:	de b7       	in	r29, 0x3e	; 62
    2fce:	9c 83       	std	Y+4, r25	; 0x04
    2fd0:	8b 83       	std	Y+3, r24	; 0x03
	SPI_Error_t U16_Status = SPI_ERROR_RECEIVEBYTE_OK;
    2fd2:	82 ea       	ldi	r24, 0xA2	; 162
    2fd4:	93 e0       	ldi	r25, 0x03	; 3
    2fd6:	9a 83       	std	Y+2, r25	; 0x02
    2fd8:	89 83       	std	Y+1, r24	; 0x01
	if((uint8_t)INITIATED == Gu8_Init_Flag)
    2fda:	80 91 83 00 	lds	r24, 0x0083
    2fde:	81 30       	cpi	r24, 0x01	; 1
    2fe0:	91 f5       	brne	.+100    	; 0x3046 <SPI_Receivebyte+0x84>
	{
		if (NULL_POINTER!=Data)
    2fe2:	8b 81       	ldd	r24, Y+3	; 0x03
    2fe4:	9c 81       	ldd	r25, Y+4	; 0x04
    2fe6:	00 97       	sbiw	r24, 0x00	; 0
    2fe8:	49 f1       	breq	.+82     	; 0x303c <SPI_Receivebyte+0x7a>
		{
			if ((uint8_t)POLLING ==Gu8_Interrupt_Mode)
    2fea:	80 91 82 00 	lds	r24, 0x0082
    2fee:	88 23       	and	r24, r24
    2ff0:	c9 f4       	brne	.+50     	; 0x3024 <SPI_Receivebyte+0x62>
			{
				while (READBIT(SPSR,SPIF) == 0);
    2ff2:	ee e2       	ldi	r30, 0x2E	; 46
    2ff4:	f0 e0       	ldi	r31, 0x00	; 0
    2ff6:	80 81       	ld	r24, Z
    2ff8:	88 1f       	adc	r24, r24
    2ffa:	88 27       	eor	r24, r24
    2ffc:	88 1f       	adc	r24, r24
    2ffe:	88 2f       	mov	r24, r24
    3000:	90 e0       	ldi	r25, 0x00	; 0
    3002:	90 70       	andi	r25, 0x00	; 0
    3004:	00 97       	sbiw	r24, 0x00	; 0
    3006:	a9 f3       	breq	.-22     	; 0x2ff2 <SPI_Receivebyte+0x30>
				*Data = SPDR;
    3008:	ef e2       	ldi	r30, 0x2F	; 47
    300a:	f0 e0       	ldi	r31, 0x00	; 0
    300c:	80 81       	ld	r24, Z
    300e:	eb 81       	ldd	r30, Y+3	; 0x03
    3010:	fc 81       	ldd	r31, Y+4	; 0x04
    3012:	80 83       	st	Z, r24
				SETBIT(SPSR,SPIF);
    3014:	ae e2       	ldi	r26, 0x2E	; 46
    3016:	b0 e0       	ldi	r27, 0x00	; 0
    3018:	ee e2       	ldi	r30, 0x2E	; 46
    301a:	f0 e0       	ldi	r31, 0x00	; 0
    301c:	80 81       	ld	r24, Z
    301e:	80 68       	ori	r24, 0x80	; 128
    3020:	8c 93       	st	X, r24
    3022:	15 c0       	rjmp	.+42     	; 0x304e <SPI_Receivebyte+0x8c>
				
			}
			else
			{
				//SETBIT(SREG,GLOBAL_INTERRUPT);
				Gu8_Mode_Flag = RECEIVING;
    3024:	81 e0       	ldi	r24, 0x01	; 1
    3026:	80 93 86 00 	sts	0x0086, r24
				//Gpu8_Data = Data;
				*Gpu8_Data = SPDR;
    302a:	a0 91 84 00 	lds	r26, 0x0084
    302e:	b0 91 85 00 	lds	r27, 0x0085
    3032:	ef e2       	ldi	r30, 0x2F	; 47
    3034:	f0 e0       	ldi	r31, 0x00	; 0
    3036:	80 81       	ld	r24, Z
    3038:	8c 93       	st	X, r24
    303a:	09 c0       	rjmp	.+18     	; 0x304e <SPI_Receivebyte+0x8c>
			}
		}
		else
		{
			U16_Status = SPI_ERROR_RECEIVEBYTE_NULLPOINTER;
    303c:	84 ea       	ldi	r24, 0xA4	; 164
    303e:	93 e0       	ldi	r25, 0x03	; 3
    3040:	9a 83       	std	Y+2, r25	; 0x02
    3042:	89 83       	std	Y+1, r24	; 0x01
    3044:	04 c0       	rjmp	.+8      	; 0x304e <SPI_Receivebyte+0x8c>
		}
	}
	else
	{
		U16_Status= SPI_ERROR_RECEIVEBYTE_NOTINIT;
    3046:	83 ea       	ldi	r24, 0xA3	; 163
    3048:	93 e0       	ldi	r25, 0x03	; 3
    304a:	9a 83       	std	Y+2, r25	; 0x02
    304c:	89 83       	std	Y+1, r24	; 0x01
	}
	return U16_Status;
    304e:	89 81       	ldd	r24, Y+1	; 0x01
    3050:	9a 81       	ldd	r25, Y+2	; 0x02
}
    3052:	0f 90       	pop	r0
    3054:	0f 90       	pop	r0
    3056:	0f 90       	pop	r0
    3058:	0f 90       	pop	r0
    305a:	cf 91       	pop	r28
    305c:	df 91       	pop	r29
    305e:	08 95       	ret

00003060 <__vector_12>:
/* Interrupt Execution */
void __vector_12(void)
{
    3060:	df 93       	push	r29
    3062:	cf 93       	push	r28
    3064:	cd b7       	in	r28, 0x3d	; 61
    3066:	de b7       	in	r29, 0x3e	; 62
	Gu8_ISR_Flag = 1;
    3068:	81 e0       	ldi	r24, 0x01	; 1
    306a:	80 93 6c 00 	sts	0x006C, r24
			DIO_u8Init_PIN(24,DIO_OUTPUT);
			DIO_u8SetPinValue(24,DIO_HIGH);
		}
	}*/
	
}
    306e:	cf 91       	pop	r28
    3070:	df 91       	pop	r29
    3072:	08 95       	ret

00003074 <main>:
/*________________________________________________________________*/
/******************************************************************/
/*                        MAIN                                    */
/******************************************************************/
int main(void)
{
    3074:	df 93       	push	r29
    3076:	cf 93       	push	r28
    3078:	cd b7       	in	r28, 0x3d	; 61
    307a:	de b7       	in	r29, 0x3e	; 62
    307c:	2e 97       	sbiw	r28, 0x0e	; 14
    307e:	0f b6       	in	r0, 0x3f	; 63
    3080:	f8 94       	cli
    3082:	de bf       	out	0x3e, r29	; 62
    3084:	0f be       	out	0x3f, r0	; 63
    3086:	cd bf       	out	0x3d, r28	; 61
	uint8_t Local_uint8_Button1;
	uint8_t Local_uint8_Value=0;
    3088:	1d 82       	std	Y+5, r1	; 0x05
	uint8_t Local_uint8_Value2=0;
    308a:	1b 82       	std	Y+3, r1	; 0x03
	uint8_t Local_uint8_Value3[4] = {0};
    308c:	1e 82       	std	Y+6, r1	; 0x06
    308e:	1f 82       	std	Y+7, r1	; 0x07
    3090:	18 86       	std	Y+8, r1	; 0x08
    3092:	19 86       	std	Y+9, r1	; 0x09
	uint8_t loop=0,start=0;
    3094:	1a 82       	std	Y+2, r1	; 0x02
    3096:	19 82       	std	Y+1, r1	; 0x01

	/*__________DRIVERS INIT __________________________________*/

	DIO_u8Init_PIN(DIO_PIN_NO_20,0);
    3098:	84 e1       	ldi	r24, 0x14	; 20
    309a:	60 e0       	ldi	r22, 0x00	; 0
    309c:	0e 94 b2 0c 	call	0x1964	; 0x1964 <DIO_u8Init_PIN>

	DIO_u8SetPinInputType(DIO_PIN_NO_20,1);
    30a0:	84 e1       	ldi	r24, 0x14	; 20
    30a2:	61 e0       	ldi	r22, 0x01	; 1
    30a4:	0e 94 07 10 	call	0x200e	; 0x200e <DIO_u8SetPinInputType>

	Str_SpiCfg_t Str_cfg;
	Str_cfg.Prescaller = (uint8_t)PSC_64;
    30a8:	82 e0       	ldi	r24, 0x02	; 2
    30aa:	8a 87       	std	Y+10, r24	; 0x0a
	Str_cfg.Speed_Mode = (uint8_t)SINGLE_SPEED;
    30ac:	1b 86       	std	Y+11, r1	; 0x0b
	Str_cfg.Interrupt_Mode=POLLING;
    30ae:	1c 86       	std	Y+12, r1	; 0x0c
	Str_cfg.Master_Mode=SLAVE;
    30b0:	81 e0       	ldi	r24, 0x01	; 1
    30b2:	8d 87       	std	Y+13, r24	; 0x0d
	Str_cfg.Order=LEASTFIRST;
    30b4:	1e 86       	std	Y+14, r1	; 0x0e
   SPI_Init(&Str_cfg);
    30b6:	ce 01       	movw	r24, r28
    30b8:	0a 96       	adiw	r24, 0x0a	; 10
    30ba:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <SPI_Init>



	UART_init(&ObjUart);
    30be:	8d e6       	ldi	r24, 0x6D	; 109
    30c0:	90 e0       	ldi	r25, 0x00	; 0
    30c2:	0e 94 a3 05 	call	0xb46	; 0xb46 <UART_init>

	/*___________________________________________________________*/
	while(1)
	{

		SPI_Receivebyte(&Local_uint8_Value);
    30c6:	ce 01       	movw	r24, r28
    30c8:	05 96       	adiw	r24, 0x05	; 5
    30ca:	0e 94 e1 17 	call	0x2fc2	; 0x2fc2 <SPI_Receivebyte>
//
//
////		if(Local_uint8_Button1 == DIO_LOW)
////		{
//
			Local_uint8_Value2 = Local_uint8_Value/2;
    30ce:	8d 81       	ldd	r24, Y+5	; 0x05
    30d0:	86 95       	lsr	r24
    30d2:	8b 83       	std	Y+3, r24	; 0x03
    30d4:	1a c0       	rjmp	.+52     	; 0x310a <main+0x96>

			while(Local_uint8_Value2 / 10 != 0)
			{
				Local_uint8_Value3[loop] = (Local_uint8_Value2 % 10)+48;
    30d6:	8a 81       	ldd	r24, Y+2	; 0x02
    30d8:	48 2f       	mov	r20, r24
    30da:	50 e0       	ldi	r21, 0x00	; 0
    30dc:	8b 81       	ldd	r24, Y+3	; 0x03
    30de:	9a e0       	ldi	r25, 0x0A	; 10
    30e0:	69 2f       	mov	r22, r25
    30e2:	0e 94 ba 18 	call	0x3174	; 0x3174 <__udivmodqi4>
    30e6:	89 2f       	mov	r24, r25
    30e8:	28 2f       	mov	r18, r24
    30ea:	20 5d       	subi	r18, 0xD0	; 208
    30ec:	ce 01       	movw	r24, r28
    30ee:	06 96       	adiw	r24, 0x06	; 6
    30f0:	fc 01       	movw	r30, r24
    30f2:	e4 0f       	add	r30, r20
    30f4:	f5 1f       	adc	r31, r21
    30f6:	20 83       	st	Z, r18
				Local_uint8_Value2 /= 10;
    30f8:	8b 81       	ldd	r24, Y+3	; 0x03
    30fa:	9a e0       	ldi	r25, 0x0A	; 10
    30fc:	69 2f       	mov	r22, r25
    30fe:	0e 94 ba 18 	call	0x3174	; 0x3174 <__udivmodqi4>
    3102:	8b 83       	std	Y+3, r24	; 0x03
				loop++;
    3104:	8a 81       	ldd	r24, Y+2	; 0x02
    3106:	8f 5f       	subi	r24, 0xFF	; 255
    3108:	8a 83       	std	Y+2, r24	; 0x02
////		if(Local_uint8_Button1 == DIO_LOW)
////		{
//
			Local_uint8_Value2 = Local_uint8_Value/2;

			while(Local_uint8_Value2 / 10 != 0)
    310a:	8b 81       	ldd	r24, Y+3	; 0x03
    310c:	8a 30       	cpi	r24, 0x0A	; 10
    310e:	18 f7       	brcc	.-58     	; 0x30d6 <main+0x62>
			{
				Local_uint8_Value3[loop] = (Local_uint8_Value2 % 10)+48;
				Local_uint8_Value2 /= 10;
				loop++;
			}
			Local_uint8_Value3[loop] =( Local_uint8_Value2 % 10)+48;
    3110:	8a 81       	ldd	r24, Y+2	; 0x02
    3112:	48 2f       	mov	r20, r24
    3114:	50 e0       	ldi	r21, 0x00	; 0
    3116:	8b 81       	ldd	r24, Y+3	; 0x03
    3118:	9a e0       	ldi	r25, 0x0A	; 10
    311a:	69 2f       	mov	r22, r25
    311c:	0e 94 ba 18 	call	0x3174	; 0x3174 <__udivmodqi4>
    3120:	89 2f       	mov	r24, r25
    3122:	28 2f       	mov	r18, r24
    3124:	20 5d       	subi	r18, 0xD0	; 208
    3126:	ce 01       	movw	r24, r28
    3128:	06 96       	adiw	r24, 0x06	; 6
    312a:	fc 01       	movw	r30, r24
    312c:	e4 0f       	add	r30, r20
    312e:	f5 1f       	adc	r31, r21
    3130:	20 83       	st	Z, r18

			for(start=loop;start>0;start--)
    3132:	8a 81       	ldd	r24, Y+2	; 0x02
    3134:	89 83       	std	Y+1, r24	; 0x01
    3136:	0e c0       	rjmp	.+28     	; 0x3154 <main+0xe0>
			{
				UART_sendByte(Local_uint8_Value3[start]);
    3138:	89 81       	ldd	r24, Y+1	; 0x01
    313a:	28 2f       	mov	r18, r24
    313c:	30 e0       	ldi	r19, 0x00	; 0
    313e:	ce 01       	movw	r24, r28
    3140:	06 96       	adiw	r24, 0x06	; 6
    3142:	fc 01       	movw	r30, r24
    3144:	e2 0f       	add	r30, r18
    3146:	f3 1f       	adc	r31, r19
    3148:	80 81       	ld	r24, Z
    314a:	0e 94 59 07 	call	0xeb2	; 0xeb2 <UART_sendByte>
				Local_uint8_Value2 /= 10;
				loop++;
			}
			Local_uint8_Value3[loop] =( Local_uint8_Value2 % 10)+48;

			for(start=loop;start>0;start--)
    314e:	89 81       	ldd	r24, Y+1	; 0x01
    3150:	81 50       	subi	r24, 0x01	; 1
    3152:	89 83       	std	Y+1, r24	; 0x01
    3154:	89 81       	ldd	r24, Y+1	; 0x01
    3156:	88 23       	and	r24, r24
    3158:	79 f7       	brne	.-34     	; 0x3138 <main+0xc4>
			{
				UART_sendByte(Local_uint8_Value3[start]);
			}

			UART_sendByte(Local_uint8_Value3[start]);
    315a:	89 81       	ldd	r24, Y+1	; 0x01
    315c:	28 2f       	mov	r18, r24
    315e:	30 e0       	ldi	r19, 0x00	; 0
    3160:	ce 01       	movw	r24, r28
    3162:	06 96       	adiw	r24, 0x06	; 6
    3164:	fc 01       	movw	r30, r24
    3166:	e2 0f       	add	r30, r18
    3168:	f3 1f       	adc	r31, r19
    316a:	80 81       	ld	r24, Z
    316c:	0e 94 59 07 	call	0xeb2	; 0xeb2 <UART_sendByte>

			loop=0;
    3170:	1a 82       	std	Y+2, r1	; 0x02
    3172:	a9 cf       	rjmp	.-174    	; 0x30c6 <main+0x52>

00003174 <__udivmodqi4>:
    3174:	99 1b       	sub	r25, r25
    3176:	79 e0       	ldi	r23, 0x09	; 9
    3178:	04 c0       	rjmp	.+8      	; 0x3182 <__udivmodqi4_ep>

0000317a <__udivmodqi4_loop>:
    317a:	99 1f       	adc	r25, r25
    317c:	96 17       	cp	r25, r22
    317e:	08 f0       	brcs	.+2      	; 0x3182 <__udivmodqi4_ep>
    3180:	96 1b       	sub	r25, r22

00003182 <__udivmodqi4_ep>:
    3182:	88 1f       	adc	r24, r24
    3184:	7a 95       	dec	r23
    3186:	c9 f7       	brne	.-14     	; 0x317a <__udivmodqi4_loop>
    3188:	80 95       	com	r24
    318a:	08 95       	ret

0000318c <__udivmodhi4>:
    318c:	aa 1b       	sub	r26, r26
    318e:	bb 1b       	sub	r27, r27
    3190:	51 e1       	ldi	r21, 0x11	; 17
    3192:	07 c0       	rjmp	.+14     	; 0x31a2 <__udivmodhi4_ep>

00003194 <__udivmodhi4_loop>:
    3194:	aa 1f       	adc	r26, r26
    3196:	bb 1f       	adc	r27, r27
    3198:	a6 17       	cp	r26, r22
    319a:	b7 07       	cpc	r27, r23
    319c:	10 f0       	brcs	.+4      	; 0x31a2 <__udivmodhi4_ep>
    319e:	a6 1b       	sub	r26, r22
    31a0:	b7 0b       	sbc	r27, r23

000031a2 <__udivmodhi4_ep>:
    31a2:	88 1f       	adc	r24, r24
    31a4:	99 1f       	adc	r25, r25
    31a6:	5a 95       	dec	r21
    31a8:	a9 f7       	brne	.-22     	; 0x3194 <__udivmodhi4_loop>
    31aa:	80 95       	com	r24
    31ac:	90 95       	com	r25
    31ae:	bc 01       	movw	r22, r24
    31b0:	cd 01       	movw	r24, r26
    31b2:	08 95       	ret

000031b4 <__udivmodsi4>:
    31b4:	a1 e2       	ldi	r26, 0x21	; 33
    31b6:	1a 2e       	mov	r1, r26
    31b8:	aa 1b       	sub	r26, r26
    31ba:	bb 1b       	sub	r27, r27
    31bc:	fd 01       	movw	r30, r26
    31be:	0d c0       	rjmp	.+26     	; 0x31da <__udivmodsi4_ep>

000031c0 <__udivmodsi4_loop>:
    31c0:	aa 1f       	adc	r26, r26
    31c2:	bb 1f       	adc	r27, r27
    31c4:	ee 1f       	adc	r30, r30
    31c6:	ff 1f       	adc	r31, r31
    31c8:	a2 17       	cp	r26, r18
    31ca:	b3 07       	cpc	r27, r19
    31cc:	e4 07       	cpc	r30, r20
    31ce:	f5 07       	cpc	r31, r21
    31d0:	20 f0       	brcs	.+8      	; 0x31da <__udivmodsi4_ep>
    31d2:	a2 1b       	sub	r26, r18
    31d4:	b3 0b       	sbc	r27, r19
    31d6:	e4 0b       	sbc	r30, r20
    31d8:	f5 0b       	sbc	r31, r21

000031da <__udivmodsi4_ep>:
    31da:	66 1f       	adc	r22, r22
    31dc:	77 1f       	adc	r23, r23
    31de:	88 1f       	adc	r24, r24
    31e0:	99 1f       	adc	r25, r25
    31e2:	1a 94       	dec	r1
    31e4:	69 f7       	brne	.-38     	; 0x31c0 <__udivmodsi4_loop>
    31e6:	60 95       	com	r22
    31e8:	70 95       	com	r23
    31ea:	80 95       	com	r24
    31ec:	90 95       	com	r25
    31ee:	9b 01       	movw	r18, r22
    31f0:	ac 01       	movw	r20, r24
    31f2:	bd 01       	movw	r22, r26
    31f4:	cf 01       	movw	r24, r30
    31f6:	08 95       	ret

000031f8 <__prologue_saves__>:
    31f8:	2f 92       	push	r2
    31fa:	3f 92       	push	r3
    31fc:	4f 92       	push	r4
    31fe:	5f 92       	push	r5
    3200:	6f 92       	push	r6
    3202:	7f 92       	push	r7
    3204:	8f 92       	push	r8
    3206:	9f 92       	push	r9
    3208:	af 92       	push	r10
    320a:	bf 92       	push	r11
    320c:	cf 92       	push	r12
    320e:	df 92       	push	r13
    3210:	ef 92       	push	r14
    3212:	ff 92       	push	r15
    3214:	0f 93       	push	r16
    3216:	1f 93       	push	r17
    3218:	cf 93       	push	r28
    321a:	df 93       	push	r29
    321c:	cd b7       	in	r28, 0x3d	; 61
    321e:	de b7       	in	r29, 0x3e	; 62
    3220:	ca 1b       	sub	r28, r26
    3222:	db 0b       	sbc	r29, r27
    3224:	0f b6       	in	r0, 0x3f	; 63
    3226:	f8 94       	cli
    3228:	de bf       	out	0x3e, r29	; 62
    322a:	0f be       	out	0x3f, r0	; 63
    322c:	cd bf       	out	0x3d, r28	; 61
    322e:	09 94       	ijmp

00003230 <__epilogue_restores__>:
    3230:	2a 88       	ldd	r2, Y+18	; 0x12
    3232:	39 88       	ldd	r3, Y+17	; 0x11
    3234:	48 88       	ldd	r4, Y+16	; 0x10
    3236:	5f 84       	ldd	r5, Y+15	; 0x0f
    3238:	6e 84       	ldd	r6, Y+14	; 0x0e
    323a:	7d 84       	ldd	r7, Y+13	; 0x0d
    323c:	8c 84       	ldd	r8, Y+12	; 0x0c
    323e:	9b 84       	ldd	r9, Y+11	; 0x0b
    3240:	aa 84       	ldd	r10, Y+10	; 0x0a
    3242:	b9 84       	ldd	r11, Y+9	; 0x09
    3244:	c8 84       	ldd	r12, Y+8	; 0x08
    3246:	df 80       	ldd	r13, Y+7	; 0x07
    3248:	ee 80       	ldd	r14, Y+6	; 0x06
    324a:	fd 80       	ldd	r15, Y+5	; 0x05
    324c:	0c 81       	ldd	r16, Y+4	; 0x04
    324e:	1b 81       	ldd	r17, Y+3	; 0x03
    3250:	aa 81       	ldd	r26, Y+2	; 0x02
    3252:	b9 81       	ldd	r27, Y+1	; 0x01
    3254:	ce 0f       	add	r28, r30
    3256:	d1 1d       	adc	r29, r1
    3258:	0f b6       	in	r0, 0x3f	; 63
    325a:	f8 94       	cli
    325c:	de bf       	out	0x3e, r29	; 62
    325e:	0f be       	out	0x3f, r0	; 63
    3260:	cd bf       	out	0x3d, r28	; 61
    3262:	ed 01       	movw	r28, r26
    3264:	08 95       	ret

00003266 <_exit>:
    3266:	f8 94       	cli

00003268 <__stop_program>:
    3268:	ff cf       	rjmp	.-2      	; 0x3268 <__stop_program>
